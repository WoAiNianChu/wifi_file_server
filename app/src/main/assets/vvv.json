[
    {
        "_id": 1,
        "Title": "创建 LiteDB 数据库代码",
        "Content": "// 创建 LiteDB 数据库代码\n\n(function () {\n    function underscore(string) {\n        return string.replaceAll(/[A-Z]/g, m => `_${m[0].toLowerCase()}`);\n    }\n    function decapitalize(string) {\n        return string[0].toLowerCase() + string.slice(1);\n    }\n    function capitalize(string) {\n        return string[0].toUpperCase() + string.slice(1);\n    }\n    function camelcase(string) {\n        return string.replaceAll(/[-_ ]([a-z])/g, m => m[1].value.toUpperCase());\n    }\n\n    const strings = [\"title\", \"content\", \"category\"];\n    const ints = [\"id\"];\n    const longs = [\"CreationTime\", \"UpdatedTime\"];\n    const buffer1 = [];\n    const buffer2 = [];\n    const buffer3 = [];\n    const buffer4 = [];\n    const buffer5 = [];\n    const buffer6 = [];\n\n    const className = \"Code\";\n\n\n    for (let index = 0; index < strings.length; index++) {\n        const element = strings[index];\n        // buffer1.push(`public string ${capitalize(element)} { get; set; }`);\n        buffer1.push(`if (${decapitalize(className)}.${capitalize(element)} != null)\n        {\n            old${className}.${capitalize(element)} = ${decapitalize(className)}.${capitalize(element)};\n        }`);\n\n    }\n    for (let index = 0; index < ints.length; index++) {\n        const element = ints[index];\n        //buffer2.push(`public int ${capitalize(element)} { get; set; }`);\n        buffer2.push(`if (${decapitalize(className)}.${capitalize(element)} != 0)\n       {\n           old${className}.${capitalize(element)} = ${decapitalize(className)}.${capitalize(element)};\n       }`);\n    }\n    for (let index = 0; index < longs.length; index++) {\n        const element = longs[index];\n        //   buffer3.push(`public long ${capitalize(element)} { get; set; }`);\n        buffer3.push(`if (${decapitalize(className)}.${capitalize(element)} != 0)\n      {\n          old${className}.${capitalize(element)} = ${decapitalize(className)}.${capitalize(element)};\n      }`);\n    }\n    for (let index = 0; index < strings.length; index++) {\n        const element = strings[index];\n        buffer4.push(`public string ${capitalize(element)} { get; set; }`);\n    }\n    for (let index = 0; index < ints.length; index++) {\n        const element = ints[index];\n        buffer5.push(`public int ${capitalize(element)} { get; set; }`);\n    }\n    for (let index = 0; index < longs.length; index++) {\n        const element = longs[index];\n        buffer6.push(`public long ${capitalize(element)} { get; set; }`);\n    }\n    console.error(buffer1.concat(buffer2).concat(buffer3).join('\\n'));\n    console.error(buffer4.concat(buffer5).concat(buffer6).join('\\n'));\n    console.error(` string Insert${className}(${className} ${decapitalize(className)});\n    IEnumerable<${className}> Get${className}s();\n    IEnumerable<${className}> Query${className}s(string category);\n    ${className} Get${className}(string uniqueId);\n    void Delete${className}(string uniqueId);`);\n\n    console.log(`public string Insert${className}(${className} ${decapitalize(className)})\n    {\n        if (${decapitalize(className)} == null)\n        {\n            return null;\n        }\n\n        var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n        if (${decapitalize(className)}.Id <= 0 && !${decapitalize(className)}.UniqueId.CheckUniqueId())\n        {\n            var creationTime = DateTime.UtcNow.GetUnixTimeStamp();\n            ${decapitalize(className)}.CreationTime = creationTime;\n            ${decapitalize(className)}.UpdatedTime = creationTime;\n            ${decapitalize(className)}.UniqueId = GenerateBookUniqueId(c);\n            return c.Insert(${decapitalize(className)}) > 0 ? ${decapitalize(className)}.UniqueId : null;\n        }\n\n        var old${className} = ${decapitalize(className)}.Id > 0\n            ? c.FindById(${decapitalize(className)}.Id)\n            : c.FindOne(b => b.UniqueId == ${decapitalize(className)}.UniqueId);\n        if (old${className} == null) return null;\n\n        \n        old${className}.UpdatedTime =  DateTime.UtcNow.GetUnixTimeStamp();\n        return c.Update(old${className}) ? old${className}.UniqueId : null;\n    }`);\n\n\n    console.log(`public IEnumerable<${className}> Get${className}s()\n    {\n        var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n        return c.FindAll();\n    }\n    public ${className} Get${className}(string uniqueId)\n        {\n            var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n            return c.FindOne(b => b.UniqueId == uniqueId);\n        }\n        public IEnumerable<${className}> Query${className}s(string topic)\n        {\n            var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n            return c.Query()\n                .Where(x => x.Category == topic)\n                .ToEnumerable();\n        }\n\n        public void Delete${className}(string uniqueId)\n        {\n            var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n            c.Delete(c.FindOne(x => x.UniqueId == uniquedId).Id);\n        }\n`);\n    console.log(`\n[HttpPost(\"/api/${decapitalize(className)}\")]\npublic string Insert${className}([FromBody] ${className} ${decapitalize(className)})\n{\n    return _databaseService.Insert${className}(${decapitalize(className)});\n}\n[HttpGet(\"/api/${decapitalize(className)}\")]\npublic ${className} Get${className}(string id)\n{\n    return _databaseService.Get${className}(id);\n}\n\n        [HttpGet(\"/api/${decapitalize(className)}/{query}\")]\n        public IEnumerable<${className}> Get${className}s(string query)\n        {\n            return _databaseService.Get${className}s();\n        }\n`);\n})();",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16441722245769126"
        },
        "UpdatedTime": {
            "$numberLong": "16441731670467971"
        }
    },
    {
        "_id": 2,
        "Title": "字符串",
        "Content": "// 字符串\n\n    function underscore(string) {\n        return string.replaceAll(/[A-Z]/g, m => `_${m[0].toLowerCase()}`);\n    }\n\n    function decapitalize(string) {\n        return string[0].toLowerCase() + string.slice(1);\n    }\nfunction camelcase(string) {\n        return string.replaceAll(/[-_ ]([a-z])/g, m => m[1].value.toUpperCase());\n    }\nfunction substringAfter(string, delimiter, missingDelimiterValue) {\n    const index = string.indexOf(delimiter);\n    if (index === -1) {\n        return missingDelimiterValue || string;\n    } else {\n        return string.substring(index + delimiter.length);\n    }\n}\n\nfunction substringAfterLast(string, delimiter, missingDelimiterValue) {\n    const index = string.lastIndexOf(delimiter);\n    if (index === -1) {\n        return missingDelimiterValue || string;\n    } else {\n        return string.substring(index + delimiter.length);\n    }\n}\n\nfunction substringBefore(string, delimiter, missingDelimiterValue) {\n    const index = string.indexOf(delimiter);\n    if (index === -1) {\n        return missingDelimiterValue || string;\n    } else {\n        return string.substring(0, index);\n    }\n}\n\nfunction substringBeforeLast(string, delimiter, missingDelimiterValue) {\n    const index = string.lastIndexOf(delimiter);\n    if (index === -1) {\n        return missingDelimiterValue || string;\n    } else {\n        return string.substring(0, index);\n    }\n}",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16441732123238926"
        },
        "UpdatedTime": {
            "$numberLong": "16441750808499919"
        }
    },
    {
        "_id": 3,
        "Title": "NDK",
        "Content": "// NDK\n\n// 读取 Android 资源\nbool readBytesAsset(AAssetManager *aAssetManager, std::string_view filename, unsigned char **data,\n                    unsigned int *len) {\n\n    AAsset *aAsset = AAssetManager_open(aAssetManager, filename.data(), AASSET_MODE_BUFFER);\n    if (aAsset == nullptr) {\n        *data = nullptr;\n        if (len) *len = 0;\n        return false;\n    }\n    auto size = (unsigned int) AAsset_getLength(aAsset);\n    *data = (unsigned char *) malloc(size);\n    AAsset_read(aAsset, *data, size);\n    if (len) *len = size;\n\n    AAsset_close(aAsset);\n    return true;\n}",
        "Category": "C++",
        "CreationTime": {
            "$numberLong": "16441742162445722"
        },
        "UpdatedTime": {
            "$numberLong": "16441743799303287"
        }
    },
    {
        "_id": 4,
        "Title": "文件",
        "Content": "// 文件\n\nbool IsDirectory(std::string &fileName, bool followLinks) {\n    int status;\n    struct stat statBuf;\n    if (followLinks)\n        status = stat(fileName.c_str(), &statBuf);\n    else\n        status = lstat(fileName.c_str(), &statBuf);\n    status = (status == 0 && S_ISDIR(statBuf.st_mode));\n    return status;\n}\n\nstd::vector<std::filesystem::path> listWebFiles(std::string &path) {\n    std::filesystem::path dir{path};\n    if (!std::filesystem::is_directory(std::filesystem::status(dir)))\n        return std::vector<std::filesystem::path>{};\n    std::vector<std::filesystem::path> files{};\n    for (auto const &dir_entry: std::filesystem::directory_iterator{dir}) {\n        if (dir_entry.is_directory() ||\n            (dir_entry.is_regular_file() && dir_entry.path().extension() == \".html\")) {\n            files.push_back(dir_entry.path());\n        }\n    }\n    return files;\n}\n\n\nstruct File {\npublic:\n    std::string path;\n    long size;\n    bool isDirectory;\n};\n\nstd::vector<File> GetFiles(std::string &path) {\n    std::vector<File> files = {};\n\n    struct dirent *entry;\n    DIR *dir = opendir(path.c_str());\n    if (dir == nullptr) {\n        return files;\n    }\n    struct stat s;\n    int dfd = dirfd(dir);\n    while ((entry = readdir(dir)) != nullptr) {\n        if (!strcmp(entry->d_name, \".\") || !strcmp(entry->d_name, \"..\")) continue;\n        std::string fullPath = {path + \"/\" + entry->d_name};\n        if (entry->d_type != DT_DIR) {\n            if (fstatat(dfd, entry->d_name, &s, AT_SYMLINK_NOFOLLOW) == 0) {\n                files.push_back(File{\n                        fullPath,\n                        s.st_blocks * 512,\n                        false,\n                });\n            }\n        }\n    }\n    closedir(dir);\n    std::sort(files.begin(), files.end(), [](File &a, File &b) {\n        if (a.isDirectory == b.isDirectory) {\n            return a.path < b.path;\n        } else if (a.isDirectory) {\n            return true;\n        }\n        return false;\n    });\n    return files;\n}",
        "Category": "C++",
        "CreationTime": {
            "$numberLong": "16441743128348029"
        },
        "UpdatedTime": {
            "$numberLong": "16442461805927726"
        }
    },
    {
        "_id": 5,
        "Title": "模板",
        "Content": "// 模板\n\nstd::vector<std::string> ParseTemplate(std::string &string) {\n    std::vector<std::string> blocks;\n    int offset = 0;\n    for (int i = 0; i < string.size(); ++i) {\n        if (string[i] == '{' && string[i + 1] == '{') {\n            blocks.push_back(string.substr(offset, i - offset));\n            offset = i + 2;\n            for (int j = i; j < string.size(); ++j) {\n                if (string[j] == '}' && string[j + 1] == '}') {\n                    blocks.push_back(string.substr(offset, j - offset));\n                    offset = j + 2;\n                    break;\n                }\n            }\n        }\n    }\n    if (offset < string.size()) {\n        blocks.push_back(string.substr(offset, string.size() - offset));\n    }\n    return blocks;\n}",
        "Category": "C++",
        "CreationTime": {
            "$numberLong": "16441744265467357"
        },
        "UpdatedTime": {
            "$numberLong": "16441744265467357"
        }
    },
    {
        "_id": 6,
        "Title": "搜索",
        "Content": "// 搜索\n\nfunction fuzzysearch(needle, haystack) {\n    var hlen = haystack.length;\n    var nlen = needle.length;\n    if (nlen > hlen) {\n        return false;\n    }\n    if (nlen === hlen) {\n        return needle === haystack;\n    }\n    outer: for (var i = 0, j = 0; i < nlen; i++) {\n        var nch = needle.charCodeAt(i);\n        while (j < hlen) {\n            if (haystack.charCodeAt(j++) === nch) {\n                continue outer;\n            }\n        }\n        return false;\n    }\n    return true;\n}",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16441747775701429"
        },
        "UpdatedTime": {
            "$numberLong": "16441747775701429"
        }
    },
    {
        "_id": 7,
        "Title": "视频",
        "Content": "// 视频\n\nfunction formatDuration(ms) {\n    if (isNaN(ms)) return '0:00';\n    if (ms < 0) ms = -ms;\n    const time = {\n        hour: Math.floor(ms / 3600) % 24,\n        minute: Math.floor(ms / 60) % 60,\n        second: Math.floor(ms) % 60,\n    };\n    return Object.entries(time)\n        .filter((val, index) => index || val[1])\n        .map(val => (val[1] + '').padStart(2, '0'))\n        .join(':');\n}\n\nfunction calculateLoadedPercent(video) {\n    if (!video.buffered.length) {\n        return '0';\n    }\n    return (video.buffered.end(0) / video.duration) * 100 + '%';\n}\n\nfunction calculateProgressPercent(video) {\n    return ((video.currentTime / video.duration) * 100).toFixed(2) + '%';\n}\n\nfunction durationToSeconds(duration) {\n    let result = 0;\n    if (/(\\d{1,2}:){1,2}\\d{1,2}/.test(duration)) {\n        const pieces = duration.split(':');\n        for (let i = pieces.length - 1; i > -1; i--) {\n            result += Math.pow(60, i) * parseInt(pieces[pieces.length - i - 1]);\n        }\n        return result;\n    }\n    result = parseInt(duration);\n    if (isNaN(result)) {\n        result = 0;\n    }\n    return result;\n}\nfunction touchMove(progressBar, ev) {\n    const rect = progressBar.getBoundingClientRect();\n    let precent = (ev.touches[0].clientX - rect.x) / (rect.width - 28) * 100;\n    precent = clamp(precent, 0, 100);\n    return precent;\n}",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16441748369856997"
        },
        "UpdatedTime": {
            "$numberLong": "16441751139452163"
        }
    },
    {
        "_id": 8,
        "Title": "剪切板",
        "Content": "// 剪切板\n\nfunction writeString(message) {\n    const textarea = document.createElement(\"textarea\");\n    textarea.style.position = 'fixed';\n    textarea.style.right = '100%';\n    document.body.appendChild(textarea);\n    textarea.value = message;\n    textarea.select();\n    document.execCommand('copy');\n    textarea.remove();\n}\n\nasync function readText() {\n    const string = await navigator.clipboard.readText();\n    return string;\n}\n\n<script>\nasync function writeText(string) {\n    try {\n        await navigator.clipboard.writeText(string)\n    } catch (e) {\n        NativeAndroid.writeText(string);\n    }\n}\n\ndocument.querySelectorAll('p,code,dt,td,th,dd')\n    .forEach(element => {\n        element.addEventListener('click', async evt => {\n            writeText(element.textContent.replaceAll(/[\\r\\n]+/g, ' '));\n        })\n    });\n\ndocument.querySelectorAll('pre')\n    .forEach(element => {\n        element.addEventListener('click', async evt => {\n            writeText(element.textContent);\n        })\n    })\ndocument.querySelectorAll('h1,h2,h3,h4,h5,h6')\n    .forEach(element => {\n        element.addEventListener('click', async evt => {\n            writeText(`${'#'.repeat(parseInt(/\\d/.exec(evt.target.tagName)[0]))} ${element.textContent.replaceAll(/[\\r\\n]+/g, ' ')}`);\n        })\n    });\ndocument.querySelectorAll('table').forEach(element=>{\n    element.addEventListener('click',evt=>{\n        const trArray = element.querySelectorAll('tr');\n        const buf = [];\n        for (let i = 0; i < trArray.length; i++) {\n            console.log(i);\n            if (i === 1) {\n                buf.push('|---|---|');\n                const b = [];\n                b.push('|');\n                const elements = [...trArray[i].children];\n                elements.forEach((x, k) => {\n                    if (k === 0)\n                        b.push(\"`\"+x.textContent + '`|');\n                    else\n                        b.push(x.textContent + '|');\n                });\n                buf.push(b.join(''));\n            } else {\n                const b = [];\n                b.push('|');\n                const elements = [...trArray[i].children];\n                elements.forEach((x, k) => {\n                    if (k === 0)\n                        b.push(\"`\"+x.textContent + '`|');\n                    else\n                        b.push(x.textContent + '|');\n                });\n                buf.push(b.join(''));\n            }\n        }\n        writeText(buf.join('\\n'));\n    })\n})\n</script>",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16441748726476868"
        },
        "UpdatedTime": {
            "$numberLong": "16460242310479563"
        }
    },
    {
        "_id": 9,
        "Title": "延迟加载图片",
        "Content": "延迟加载图片\n\n    function lazyLoadImages() {\n        const observer = new IntersectionObserver(function (entries) {\n            Array.prototype.forEach.call(entries, function (entry) {\n                if (entry.isIntersecting) {\n                    observer.unobserve(entry.target);\n                    entry.target.src = entry.target.getAttribute(\"data-src\");\n                }\n            });\n        });\n        Array.prototype.forEach.call(document.querySelectorAll('img'), function (image) {\n            if (image.hasAttribute('data-src'))\n                observer.observe(image);\n        });\n    }",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16441749453758068"
        },
        "UpdatedTime": {
            "$numberLong": "16441749453758068"
        }
    },
    {
        "_id": 10,
        "Title": "文本框",
        "Content": "文本框\n\n function formatCode(editor) {\n        const start = editor.selectionStart;\n        const end = editor.selectionEnd;\n        const string = editor.value;\n\n        if (start === end) {\n            let offsetStart = start;\n            while (offsetStart > 0) {\n                if (/[a-zA-Z0-9+-]/.test(string[offsetStart - 1]))\n                    offsetStart--;\n                else break;\n            }\n            let offsetEnd = end;\n            while (offsetEnd < string.length) {\n\n                if (/[a-zA-Z0-9+-]/.test(string[offsetEnd + 1]))\n                    offsetEnd++;\n                else break;\n\n            }\n            offsetEnd++\n            const str = string.substring(offsetStart, offsetEnd).trim();\n\n            editor.setRangeText('`' + str + '`', offsetStart,\n                offsetEnd);\n        }\n    }",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16441749989032475"
        },
        "UpdatedTime": {
            "$numberLong": "16441760842905831"
        }
    },
    {
        "_id": 11,
        "Title": "数学",
        "Content": "数学\n\n\nfunction clamp(x, min, max) {\n    if (x > max) return max;\n    if (x < min) return min;\n    return x;\n}",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16441751266099627"
        },
        "UpdatedTime": {
            "$numberLong": "16441751266099627"
        }
    },
    {
        "_id": 12,
        "Title": "网络",
        "Content": "网络\n\n\nasync function getStringAsync(uri, options) {\n    const response = await fetch(uri, {\n        method: 'GET',\n        ...options\n    });\n    if (!response.ok) {\n        throw new Error();\n    }\n    return await response.text();\n}\n\nconst response = await fetch('/api/setting');\n        const obj = await response.json();\n\n\nconst response = await fetch('/api/setting', {\n                method: 'POST',\n                body: JSON.stringify(object),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            await response.json();\n\nasync function search(term) {\n    let url = new URL(\"/api/search\");\n    url.searchParams.set(\"q\", term);\n    let response = await fetch(url);\n    if (!response.ok) throw new Error(response.statusText);\n    let resultsArray = await response.json();\n    return resultsArray;\n}\n\n       async function search(path) {\n        let url = new URL(location.protocol+\"//\"+location.host + \"/api/files\");\n        url.searchParams.set(\"path\", path);\n        let response = await fetch(url.toString());\n        if (!response.ok) throw new Error(response.statusText);\n        return await response.json();\n    }\n\n const response = await fetch(`/api/unzip?path=${encodeURIComponent(path)}`);\n                const obj = await response.text();",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16441751645692400"
        },
        "UpdatedTime": {
            "$numberLong": "16461159973788839"
        }
    },
    {
        "_id": 13,
        "Title": "格式化 Chrome 开发工具请求头",
        "Content": "// 格式化 Chrome 开发工具请求头\n\n(function () {\n    const res = ``;\n\n    const lines = res.split('\\n');\n\n    console.error(lines.map(l => {\n        const pieces = l.split(': ');\n        return `\"${pieces[0]}\":\"${pieces[1]}\"`;\n    }).join(',\\n'));\n})();",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16441752836526544"
        },
        "UpdatedTime": {
            "$numberLong": "16441752836526544"
        }
    },
    {
        "_id": 14,
        "Title": "百度网盘",
        "Content": "// 百度网盘\n\n(function () {\n\n    function substringAfterLast(string, delimiter) {\n        const index = string.lastIndexOf(delimiter);\n        if (index !== -1) {\n            return string.substring(index + delimiter.length);\n        }\n        return string;\n    }\n    async function fetchShare() {\n        const shareUri = 'https://pan.baidu.com/share/record?channel=chunlei&clienttype=0&app_id=250528&num=100&page=1&web=1&order=ctime&desc=1';\n        const js = await fetch(shareUri).then(res => {\n            return res.json();\n        });\n        return js.list.map(i => substringAfterLast(i.typicalPath, '/')).sort();\n    }\n    async function fetchCourses() {\n        const shareUri = 'https://pan.baidu.com/api/list?order=time&desc=1&showempty=0&web=1&page=1&num=100&dir=%2F%E8%A7%86%E9%A2%91&t=0.8739700812691273&channel=chunlei&web=1&app_id=250528&bdstoken=8bece87c69ed5e7b869d77c3a01b983a&logid=MzFDNDM5QTNCNjAwODc3QTRDNDg5QURFNTIxNEVDODE6Rkc9MQ==&clienttype=0';\n        const js = await fetch(shareUri).then(res => {\n            return res.json();\n        });\n        return js.list.map(i => i.server_filename).sort();\n    }\n    // \n\n\n    async function execute() {\n        const shares = await fetchShare();\n        console.log(shares.join('\\n'));\n        const courses = await fetchCourses();\n        return courses.filter(c => !shares.some(s => s === c));\n    }\n    execute().then(obj => {\n        console.log(obj.join('\\n'));\n    })\n})();",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16441754462706692"
        },
        "UpdatedTime": {
            "$numberLong": "16441755705566827"
        }
    },
    {
        "_id": 15,
        "Title": "HTML 对象到 JavaScript 代码",
        "Content": "// HTML 对象到 JavaScript 代码\n\n(function () {\n\n    const nodeNames = [];\n\n    function getMethodName(n) {\n        let nodeName = n.id || '';\n        nodeName = nodeName || (n.classList && n.classList[0]);\n        nodeName = nodeName || n.nodeName.toLowerCase();\n        nodeName = nodeName.replace(/[_-]+([a-zA-Z0-9])/g, (s, a) => a.substr(0, 1).toUpperCase() + a.substr(1));\n\n        if (nodeNames.indexOf(nodeName) === -1) {\n            nodeNames.push(nodeName)\n        } else {\n            let i = 1;\n            while (nodeNames.indexOf(nodeName) !== -1) {\n                nodeName = nodeName.replace(/[0-9]+$/g, '');\n                nodeName += i;\n                i++;\n            }\n            nodeNames.push(nodeName)\n        }\n        return nodeName;\n    }\n\n    function makeJavaScriptCode(n, array) {\n        const nodeName = getMethodName(n);\n\n        array.push(\n            (n.nodeName.toLowerCase() === 'svg' || n.nodeName.toLowerCase() === 'path') ? `const ${nodeName}=document.createElementNS('http://www.w3.org/2000/svg','${n.nodeName}');` : `const ${nodeName}=document.createElement('${n.nodeName}');`\n        );\n        for (let a of n.attributes) {\n            if (a.name === 'style') {\n                const s = a.value.split(';').filter(i => i.trim().length);\n                s.forEach(x => {\n                    const index = x.indexOf(':');\n                    const n = x.substring(0, index).trim().replace(/-([a-zA-Z])/g, m => m[1].toUpperCase());\n                    const v = x.substr(index + 1).trim().replace(/;$/, '');\n                    array.push(`${nodeName}.style.${n} = '${v}';`);\n                });\n\n            } else {\n                array.push(\n                    `${nodeName}.setAttribute('${a.name}' ,'${a.value}');`\n                );\n            }\n\n        }\n        for (let c of n.childNodes) {\n            if (c.nodeType === 1) {\n                const chidlNodeName = makeJavaScriptCode(c, array);\n                array.push(\n                    `${nodeName}.appendChild(${chidlNodeName});`\n                );\n            } else {\n                if (c.textContent.trim().length)\n                    array.push(\n                        `${nodeName}.appendChild(document.createTextNode('${c.textContent.trim()}'));`\n                    );\n            }\n\n        }\n        return nodeName;\n    }\n\n    const array = [];\n    makeJavaScriptCode($0, array);\n    console.log(array.join('\\n'));\n})();",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16441755438134146"
        },
        "UpdatedTime": {
            "$numberLong": "16491243649158755"
        }
    },
    {
        "_id": 16,
        "Title": "ebook-convert",
        "Content": "// ebook-convert\n\n\n\tfor /r %i in (*.epub) do \"C:\\Calibre Portable\\Calibre\\ebook-convert.exe\" \"%i\" \"%~ni.azw3\"\n\tfor /r %i in (*.mobi) do \"C:\\Users\\Administrator\\Desktop\\Program\\Calibre Portable\\Calibre\\ebook-convert.exe\" \"%i\" \"%~ni.epub\"\n\tfor /r %i in (*.epub) do \"C:\\Users\\Administrator\\Desktop\\Calibre Portable\\Calibre\\ebook-convert.exe\" \"%i\" \"%~ni.mobi\"",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441756773150009"
        },
        "UpdatedTime": {
            "$numberLong": "16441756773150009"
        }
    },
    {
        "_id": 17,
        "Title": "netsh",
        "Content": "// netsh\n\n\tnetsh wlan show profiles\n\tnetsh wlan show profile name=\"ZTE_ACE267\" key=clear'\n\tnetsh wlan add filter permission=allow networktype=infrastructure ssid=\"H3C_8808D3\"\t\t\n\tnetsh wlan add filter permission=denyall networktype=infrastructure\n\tnetsh wlan export profile key=clear",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441757002109294"
        },
        "UpdatedTime": {
            "$numberLong": "16441757002109294"
        }
    },
    {
        "_id": 18,
        "Title": "taskkill",
        "Content": "taskkill\n\n\ttaskkill /f /im adb.exe",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441757448467945"
        },
        "UpdatedTime": {
            "$numberLong": "16441757448467945"
        }
    },
    {
        "_id": 19,
        "Title": "xcopy",
        "Content": "xcopy\n\n\txcopy /t /e \"source directory path\" \"target directory\"",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441757582192815"
        },
        "UpdatedTime": {
            "$numberLong": "16441757582192815"
        }
    },
    {
        "_id": 20,
        "Title": "RUNDLL32",
        "Content": "RUNDLL32\n\n\tRUNDLL32.EXE powrprof.dll,SetSuspendState 0,1,0",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441757665773461"
        },
        "UpdatedTime": {
            "$numberLong": "16441757665773461"
        }
    },
    {
        "_id": 21,
        "Title": "dism",
        "Content": "dism\n\n\ndism /online /cleanup-image /spsuperseded /hidesp\nDISM.exe /Online /English /Get-Features /Format:Table\nDISM.exe /Online /Disable-Feature /Featurename:SimpleTCP /Remove\nDISM.exe /online /Cleanup-Image /StartComponentCleanup\nDISM.exe /online /Cleanup-Image /StartComponentCleanup /ResetBase",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441757854537578"
        },
        "UpdatedTime": {
            "$numberLong": "16441757854537578"
        }
    },
    {
        "_id": 22,
        "Title": "dir",
        "Content": "dir\n\n\tdir /b /a-d>files.txt\n\tdir /s /b /o:gn\n\tdir /s /b /a-d /o:gn",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441757942103411"
        },
        "UpdatedTime": {
            "$numberLong": "16441757942103411"
        }
    },
    {
        "_id": 23,
        "Title": "aria2c",
        "Content": "aria2c\n\n\taria2c --https-proxy=\"https://127.0.0.1:10809\"",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441758197934163"
        },
        "UpdatedTime": {
            "$numberLong": "16441758197934163"
        }
    },
    {
        "_id": 24,
        "Title": "msinfo32",
        "Content": "msinfo32",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441758281607522"
        },
        "UpdatedTime": {
            "$numberLong": "16441758631613775"
        }
    },
    {
        "_id": 25,
        "Title": "BaiduPCS-Go",
        "Content": "BaiduPCS-Go\n\nBaiduPCS-Go ls /Documents/Safari2>355.txt\nBaiduPCS-Go search -path=/ 关键字",
        "Category": "命令行",
        "CreationTime": {
            "$numberLong": "16441758333131538"
        },
        "UpdatedTime": {
            "$numberLong": "16441758333131538"
        }
    },
    {
        "_id": 26,
        "Title": "压缩",
        "Content": "// 压缩\n\n// https://www.nuget.org/packages/SharpZipLib.NETStandard/\npublic async Task<byte[]> ZipAsync(IEnumerable<KeyValuePair<string, Stream>> files, string mime, string password)\n{\n    ExceptionHelper.ThrowIfNull(nameof(files), files);\n    ExceptionHelper.ThrowIfNull(nameof(mime), mime);\n\n    using (var output = new MemoryStream())\n    {\n        using (var zipStream = new ZipOutputStream(output))\n        {\n            zipStream.SetLevel(9);\n\n            if (!string.IsNullOrEmpty(password))\n            {\n                zipStream.Password = password;\n            }\n\n            foreach (var file in files)\n            {\n                var newEntry = new ZipEntry($\"{file.Key}.{mime}\") { DateTime = DateTime.Now };\n                zipStream.PutNextEntry(newEntry);\n\n                await file.Value.CopyToAsync(zipStream);\n                zipStream.CloseEntry();\n            }\n        }\n\n        return output.ToArray();\n    }\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16441762134152791"
        },
        "UpdatedTime": {
            "$numberLong": "16441762134152791"
        }
    },
    {
        "_id": 27,
        "Title": "正则表达式",
        "Content": "正则表达式\n\n* 移除空行：`^(?:[\\t ]*(?:\\r?\\n|\\r))+`\n* 移除评论：`(\\/\\*([\\s\\S]*?\\*\\/))|(\\/\\/.*)`\n* 移除日志：`Log.e\\([^\\)]+\\);`",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16441763865702515"
        },
        "UpdatedTime": {
            "$numberLong": "16441763865702515"
        }
    },
    {
        "_id": 28,
        "Title": "文件",
        "Content": "文件\n\n Directory.GetFiles(@\"D:\\Books\",\"*\",SearchOption.AllDirectories)\n\t\t\t\t\t\t.Where(i=>i.Contains(\"\\\\images\\\\\")&& Path.GetFileName(i)!=\"img-links.txt\").ForEach(x=>File.Delete(x));\n\t\t\t\nDirectory.GetFiles(@\"D:\\Books\",\"*\",SearchOption.AllDirectories)\n\t \t\t .Where(i=>Path.GetFileName(i)!=\"links.txt\"&& Path.GetFileName(i)!=\"目录.html\").ForEach(x=>File.Delete(x));",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16441765147448668"
        },
        "UpdatedTime": {
            "$numberLong": "16441765147448668"
        }
    },
    {
        "_id": 29,
        "Title": "快捷键程序",
        "Content": "// 快捷键程序\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing HtmlAgilityPack;\nusing NUglify;\nusing Renci.SshNet;\nusing Renci.SshNet.Security;\nusing SshNet.Security.Cryptography;\n\nnamespace Server\n{\n    [AttributeUsage(AttributeTargets.All)]\n    public class BindMenuItemAttribute : Attribute\n    {\n        public string Message { get; set; }\n        public Key ShortKey { get; set; }\n    }\n\n    public static class Methods\n    {\n        [BindMenuItemAttribute(Message = \"更新Nginx\", ShortKey = Key.KeyP)]\n        public static void OnKeyP()\n        {\n            try\n            {\n                const string host = \"159.75.78.126\";\n                const string username = \"root\";\n                const string password = \"q4so4tDtz!\";\n\n                using var ssh = new SshClient(host, username, password);\n                ssh.Connect();\n                using var ftp = new SftpClient(host, username, password);\n                ftp.Connect();\n                UploadFile(ftp, \"nginx.conf\", \"/etc/nginx/nginx.conf\", false);\n\n\n                //UploadFile(ftp, \"euphoria.service\", \"/etc/systemd/system/euphoria.service\", false);\n                //var filename = \"/var/log/nginx/access.log\";\n                //using var stream = new FileStream(Path.GetFileName(filename), FileMode.OpenOrCreate);\n                //ftp.DownloadFile(filename, stream);\n                // /var/log/nginx/access.log /etc/nginx/nginx.conf\n               ssh.RunCommand(\"nginx -s reload\");\n                var results = ssh.RunCommand(\"nginx -t\");\n                Console.WriteLine(\"执行结果：{0}\\n{1}\",results.Error,results.Result);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n            \n        }\n \n\n        [BindMenuItemAttribute(Message = \"发布程序\", ShortKey = Key.KeyI)]\n        public static void OnKeyI()\n        {\n            UploadApplication(@\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\");\n        }\n\n        [BindMenuItemAttribute(Message = \"下载\", ShortKey = Key.KeyO)]\n        public static void OnKeyO()\n        {\n            try\n            {\n                const string host = \"159.75.78.126\";\n                const string username = \"root\";\n                const string password = \"q4so4tDtz!\";\n\n               \n                \n                using var ftp = new SftpClient(host, username, password);\n                ftp.Connect();\n                /*\n                  using var ssh = new SshClient(host, username, password);\n                ssh.Connect();\n                 const string filename = \"/etc/nginx/nginx.conf\";\n                 using var stream = new FileStream(Path.GetFileName(filename), FileMode.OpenOrCreate);\n                 ftp.DownloadFile(filename, stream);\n                 */\n                // /etc/systemd/system/euphoria.service\n                /*ssh.RunCommand(\"sudo systemctl stop euphoria.service\");\n                ssh.RunCommand(\"sudo rm -rf /root/bin\");*/\n                var files = ftp.ListDirectory(\"/root/bin/pages\");\n                foreach (var file in files)\n                {\n                    Console.WriteLine(file.Name);\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n        }\n\n        [BindMenuItemAttribute(Message = \"下载数据库\", ShortKey = Key.KeyL)]\n        public static void OnKeyL()\n        {\n            DownloadDatabase();\n        }\n\n        [BindMenuItemAttribute(Message = \"上传静态资源\", ShortKey = Key.KeyT)]\n        public static void OnKeyT()\n        {\n            var dir = @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\";\n            const string host = \"159.75.78.126\";\n            const string username = \"root\";\n            const string password = \"q4so4tDtz!\";\n\n            /*using var ssh = new SshClient(host, username, password);\n            ssh.Connect();*/\n            using var ftp = new SftpClient(host, username, password);\n            ftp.Connect();\n            foreach (var file in Directory.GetFiles(dir))\n            {\n                Console.WriteLine(\"/root/bin/wwwroot/\" + Path.GetFileName(file));\n                UploadFile(ftp, file, \"/root/bin/wwwroot/\" + Path.GetFileName(file), true);\n            }\n        }\n\n        [BindMenuItemAttribute(Message = \"发布页面\", ShortKey = Key.KeyK)]\n        public static void OnKeyK()\n        {\n            try\n            {\n                Shared.PublishJavaScript(\n                    @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\\editor\\editor.html\");\n                Shared.PublishJavaScript(\n                    @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\\article\\article.html\");\n                Shared.PublishJavaScript(@\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\\articles\\articles.html\");\n                Shared.PublishJavaScript(@\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\\codes\\codes.html\");\n                OnKeyT();\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n        }\n\n        [BindMenuItemAttribute(Message = \"排序JavaScript\", ShortKey = Key.KeyU)]\n        public static void OnKeyU()\n        {\n            var lines = ClipboardShare.GetText();\n            if (string.IsNullOrWhiteSpace(lines)) return;\n            var blocks = lines.ToBlocks();\n            var results = blocks.OrderBy(x =>\n                Regex.Match(x, \"\\\\s+(\\\\w+)\\\\s*\\\\(\").Value\n            );\n            ClipboardShare.SetText(string.Join(Environment.NewLine, results));\n        }\n\n        private static void UploadFile(SftpClient ftp, string filename, string serverFileName, bool checkDir = false)\n        {\n            if (checkDir)\n            {\n                var pieces = serverFileName.Split('/');\n                var rootPath = string.Empty;\n                for (var i = 1; i < pieces.Length - 1; i++)\n                {\n                    rootPath = rootPath + \"/\" + pieces[i];\n                    if (!ftp.Exists(rootPath))\n                    {\n                        ftp.CreateDirectory(rootPath);\n                    }\n                }\n            }\n\n            using var stream = File.OpenRead(filename);\n            ftp.UploadFile(stream, serverFileName);\n        }\n\n        private static void UploadApplication(string dir, string host = \"159.75.78.126\", string username = \"root\",\n            string password = \"q4so4tDtz!\")\n        {\n            var binDir = Path.Combine(dir, @\"bin\\Release\\net5.0\\linux-x64\\publish\");\n            var process = Process.Start(new ProcessStartInfo()\n            {\n                WorkingDirectory = dir,\n                FileName = \"dotnet\", //K dotnet\n                Arguments =\n                    \"publish --configuration Release -r linux-x64 -p:PublishSingleFile=true --self-contained false\"\n            });\n            process?.WaitForExit();\n\n            using var ssh = new SshClient(host, username, password);\n            ssh.Connect();\n            ssh.RunCommand(\"sudo systemctl stop euphoria.service\");\n            using var ftp = new SftpClient(host, username, password);\n            ftp.Connect();\n            var files = Directory.GetFiles(binDir, \"*.*\");\n            foreach (var filename in files)\n            {\n                if (filename.EndsWith(\".pdb\"))\n                    continue;\n                var name = \"/root/bin/\" + filename.Substring(binDir.Length + 1).Replace(\"\\\\\", \"/\");\n                Console.WriteLine(name);\n                UploadFile(ftp, filename, name, true);\n            }\n\n            ssh.RunCommand(\"sudo systemctl start euphoria.service\");\n            \n            Console.WriteLine(\"完成\");\n        }\n        private static void DownloadDatabase(string host = \"159.75.78.126\", string username = \"root\",\n            string password = \"q4so4tDtz!\")\n        {\n\n            using var ssh = new SshClient(host, username, password);\n            ssh.Connect();\n            var dateTimeString = DateTime.Now.ToString(\"yyyy-MM-dd-hh-mm-ss\");\n            var name = \"dataService\";\n            ssh.RunCommand(\"sudo systemctl stop euphoria.service\");\n            ssh.RunCommand(string.Format(\"zip -r /root/database-{1}.zip /root/bin/{0}.db /root/bin/{0}-log.db\", name, dateTimeString));\n            ssh.RunCommand(\"sudo systemctl start euphoria.service\");\n            using var ftp = new SftpClient(host, username, password);\n            ftp.Connect();\n           \n            using (var writer = new FileStream(string.Format(\"database{0}.zip\", dateTimeString), FileMode.OpenOrCreate)) {\n                ftp.DownloadFile(string.Format(\"/root/database-{0}.zip\", dateTimeString), writer);\n            }\n            Console.WriteLine($\"database{dateTimeString}.zip\");\n            Console.WriteLine(\"完成\");\n        }\n    }\n\n    class Program\n    {\n        [StructLayout(LayoutKind.Sequential)]\n        public struct MSG\n        {\n            public IntPtr hwnd;\n            public int message;\n            public IntPtr wParam;\n            public IntPtr lParam;\n            public int time;\n            public int pt_x;\n            public int pt_y;\n        }\n\n        [DllImport(\"user32.dll\", CharSet = CharSet.Auto)]\n        public static extern bool TranslateMessage([In, Out] ref MSG msg);\n\n        [DllImport(\"user32.dll\", CharSet = System.Runtime.InteropServices.CharSet.Auto)]\n        public static extern int DispatchMessage([In] ref MSG msg);\n\n        [DllImport(\"user32.dll\")]\n        public static extern sbyte GetMessage(out MSG lpMsg, IntPtr hWnd, uint wMsgFilterMin,\n            uint wMsgFilterMax);\n\n\n        static void Main(string[] args)\n        {\n            /*var dir = @\"C:\\Users\\Administrator\\Desktop\\icomoon\\SVG\";\n            var files = Directory.GetFiles(dir);\n            var sb = new StringBuilder();\n            foreach (var file in files)\n            {\n                sb.AppendFormat(@\"\n            <div class=\"\"color-button\"\" id=\"\"octicon-{0}\"\">\n                {1}\n            </div>\n\",Path.GetFileNameWithoutExtension(file), File.ReadAllText(file));\n\n            }\n            ClipboardShare.SetText(sb.ToString());*/\n            /*Task.Factory.StartNew(() =>\n            {\n                const string host = \"159.75.78.126\"; //\"114.96.110.247\" \"159.75.78.126\";\n                const string username = \"root\";\n                const string password = \"q4so4tDtz!\";\n                using var ftp = new SftpClient(host, username, password);\n                ftp.Connect();\n                using var stream = new FileStream(\"bin.zip\", FileMode.OpenOrCreate);\n                ftp.DownloadFile(\"/root/bin.zip\", stream);\n            });*/\n            var methods = typeof(Methods).GetMethods(BindingFlags.Public | BindingFlags.Static);\n            var methodInfos = new Dictionary<Key, MethodInfo>();\n            var list = new List<string>();\n            foreach (var method in methods)\n            {\n                var attributes = method.GetCustomAttributes(typeof(BindMenuItemAttribute), false);\n                if (!attributes.Any())\n                    continue;\n                var attribute = attributes.First() as BindMenuItemAttribute;\n\n                list.Add($\"{attribute.ShortKey} {attribute.Message}\");\n                methodInfos.Add(attribute.ShortKey, method);\n            }\n\n            list = list.OrderBy(i => i).ToList();\n\n            foreach (var element in list)\n            {\n                Console.WriteLine(element);\n            }\n\n            var kbh = new KeyboardShare();\n            kbh.ConfigHook();\n            kbh.KeyDown += async (s, k) =>\n            {\n//\t\t\t\tif (((int)k.Key >= 48 && (int)k.Key <= 57) || ((int)k.Key >= 112 && (int)k.Key <= 123)) {\n//\t\t\t\t\tif (methodInfos.ContainsKey(k.Key)) {\n//\t\t\t\t\t\tmethodInfos[k.Key].Invoke(null, null);\n//\t\t\t\t\t\treturn;\n//\t\t\t\t\t}\n//\t\t\t\t}\n                if (k.KeyStaus == KeyStaus.SysKeyDown)\n                {\n                    if (methodInfos.ContainsKey(k.Key))\n                    {\n                        try\n                        {\n                            methodInfos[k.Key].Invoke(null, null);\n                        }\n                        catch\n                        {\n                        }\n\n                        return;\n                    }\n\n                    switch (k.Key)\n                    {\n                        case Key.Key2:\n\n\n                            break;\n                    }\n                }\n            };\n\n            MSG message;\n            while (GetMessage(out message, IntPtr.Zero, 0, 0) != 0)\n            {\n                TranslateMessage(ref message);\n                DispatchMessage(ref message);\n            }\n        }\n    }\n\n    public static class Shared\n    {\n        private static string Base64UrlEncode(byte[] input)\n        {\n            return Base64UrlEncode(input, offset: 0, count: input.Length);\n        }\n\n        private static string Base64UrlEncode(byte[] input, int offset, int count)\n        {\n            // Special-case empty input\n            if (count == 0)\n            {\n                return string.Empty;\n            }\n\n            var buffer = new char[GetArraySizeRequiredToEncode(count)];\n            var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n            return new String(buffer, startIndex: 0, length: numBase64Chars);\n        }\n\n        private static int GetArraySizeRequiredToEncode(int count)\n        {\n            var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n            return checked(numWholeOrPartialInputBlocks * 4);\n        }\n\n        private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n        {\n            var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n            // Special-case empty input.\n            if (count == 0)\n            {\n                return 0;\n            }\n\n            // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n            // Start with default Base64 encoding.\n            var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n            // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n            for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n            {\n                var ch = output[i];\n                if (ch == '+')\n                {\n                    output[i] = '-';\n                }\n                else if (ch == '/')\n                {\n                    output[i] = '_';\n                }\n                else if (ch == '=')\n                {\n                    // We've reached a padding character; truncate the remainder.\n                    return i - outputOffset;\n                }\n            }\n\n            return numBase64Chars;\n        }\n\n        private static string GetHashForString(this string str)\n        {\n            // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n            using (var sha256 = new SHA256CryptoServiceProvider())\n            {\n                var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n                return Base64UrlEncode(hash);\n            }\n        }\n\n        public static string ReadAllText(this string path)\n        {\n            var encoding = new UTF8Encoding(false);\n            using (StreamReader sr = new StreamReader(path, encoding, true))\n                return sr.ReadToEnd();\n        }\n\n        public static void PublishJavaScript(string fileName)\n        {\n            var fileList = Directory.GetFiles(Path.GetDirectoryName(Path.GetDirectoryName(fileName)));\n\n            foreach (var element in fileList)\n            {\n                if (element.Contains(Path.GetFileNameWithoutExtension(fileName) + \"_v_\"))\n                {\n                    File.Delete(element);\n                }\n            }\n\n            string dir = Path.GetDirectoryName(fileName);\n\n            var hd = new HtmlDocument();\n            hd.LoadHtml(fileName.ReadAllText());\n            PublishCss(fileName, hd);\n            var scripts = hd.DocumentNode.SelectNodes(\"//script\");\n            if (scripts == null)\n                return;\n\n            HtmlNode link = null;\n            var files = new List<string>();\n            foreach (var script in scripts)\n            {\n                var scriptName = script.GetAttributeValue(\"src\", string.Empty);\n\n\n                if (!scriptName.StartsWith(\"http://\") && !scriptName.StartsWith(\"https://\") &&\n                    !string.IsNullOrWhiteSpace(scriptName))\n                {\n                    files.Add(Path.Combine(dir, scriptName));\n\n                    if (link == null)\n                        link = script.CloneNode(true);\n                    script.Remove();\n                }\n            }\n\n            var sb = new StringBuilder();\n\n\n            foreach (var element in files)\n            {\n                Console.WriteLine(element);\n                sb.AppendLine(element.ReadAllText());\n            }\n\n            var versionName = string.Format(\"{0}_v_{1}.js\", Path.GetFileNameWithoutExtension(fileName),\n                GetHashForString(sb.ToString()));\n\n\n            link.SetAttributeValue(\"src\", versionName);\n            hd.DocumentNode.SelectSingleNode(\"//body\").ChildNodes.Append(link);\n            var head = hd.DocumentNode.SelectSingleNode(\"//head\");\n            var preload = hd.CreateElement(\"link\");\n            preload.SetAttributeValue(\"rel\", \"preload\");\n            preload.SetAttributeValue(\"as\", \"script\");\n            preload.SetAttributeValue(\"href\", versionName);\n            head.ChildNodes.Append(preload);\n\n\n            File.WriteAllText(Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(fileName)), versionName),\n                Uglify.Js(sb.ToString()).Code);\n            File.WriteAllText(\n                Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(fileName)), Path.GetFileName(fileName)),\n                hd.DocumentNode.OuterHtml);\n        }\n\n        private static void PublishCss(string fileName, HtmlDocument hd)\n        {\n            string dir = Path.GetDirectoryName(fileName);\n\n            var scripts = hd.DocumentNode.SelectNodes(\"//link\");\n            if (scripts == null)\n                return;\n            HtmlNode link = null;\n            var files = new List<string>();\n            foreach (var script in scripts)\n            {\n                var scriptName = script.GetAttributeValue(\"href\", string.Empty);\n\n\n                if (!scriptName.StartsWith(\"http://\") && !scriptName.StartsWith(\"https://\") &&\n                    !string.IsNullOrWhiteSpace(scriptName))\n                {\n                    files.Add(Path.Combine(dir, scriptName));\n                    if (link == null)\n                        link = script.CloneNode(true);\n                    script.Remove();\n                }\n            }\n\n            var sb = new StringBuilder();\n\n\n            foreach (var element in files)\n            {\n                sb.AppendLine(element.ReadAllText());\n            }\n\n            var versionName = string.Format(\"{0}_v_{1}.css\", Path.GetFileNameWithoutExtension(fileName),\n                GetHashForString(sb.ToString()));\n\n\n            link.SetAttributeValue(\"href\", versionName);\n            var head = hd.DocumentNode.SelectSingleNode(\"//head\");\n            var preload = hd.CreateElement(\"link\");\n            preload.SetAttributeValue(\"rel\", \"preload\");\n            preload.SetAttributeValue(\"as\", \"style\");\n            preload.SetAttributeValue(\"href\", versionName);\n            head.ChildNodes.Append(preload);\n            hd.DocumentNode.SelectSingleNode(\"//head\").ChildNodes.Append(link);\n\n\n            File.WriteAllText(Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(fileName)), versionName),\n                Uglify.Css(sb.ToString()).Code);\n        }\n\n        public static IEnumerable<string> ToBlocks(this string value)\n        {\n            var count = 0;\n            StringBuilder sb = new StringBuilder();\n            List<string> ls = new List<string>();\n            foreach (var t in value)\n            {\n                sb.Append(t);\n                switch (t)\n                {\n                    case '{':\n                        count++;\n                        break;\n                    case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n                }\n            }\n\n            return ls;\n        }\n    }\n\n    public static class ClipboardShare\n    {\n        [DllImport(\"user32.dll\", SetLastError = true)]\n        static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n        [DllImport(\"kernel32.dll\", SetLastError = true)]\n        static extern IntPtr GlobalLock(IntPtr hMem);\n\n        [DllImport(\"Kernel32.dll\", SetLastError = true)]\n        static extern int GlobalSize(IntPtr hMem);\n\n        [DllImport(\"kernel32.dll\", SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        static extern bool GlobalUnlock(IntPtr hMem);\n\n        [DllImport(\"User32.dll\", SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        static extern bool IsClipboardFormatAvailable(uint format);\n\n        [DllImport(\"user32.dll\", SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n        [DllImport(\"user32.dll\")]\n        static extern bool EmptyClipboard();\n\n        [DllImport(\"user32.dll\", SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        static extern bool CloseClipboard();\n\n        [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n        public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n        [DllImport(\"User32.dll\", SetLastError = true)]\n        static extern IntPtr GetClipboardData(uint uFormat);\n\n\n        const uint cfUnicodeText = 13;\n\n        public static void OpenClipboard()\n        {\n            var num = 10;\n            while (true)\n            {\n                if (OpenClipboard(IntPtr.Zero))\n                {\n                    break;\n                }\n\n                if (--num == 0)\n                {\n                    ThrowWin32();\n                }\n\n                System.Threading.Thread.Sleep(100);\n            }\n        }\n\n        public static void SetText(string text)\n        {\n            OpenClipboard();\n            EmptyClipboard();\n            IntPtr hGlobal = IntPtr.Zero;\n            try\n            {\n                var bytes = (text.Length + 1) * 2;\n                hGlobal = Marshal.AllocHGlobal(bytes);\n                if (hGlobal == IntPtr.Zero)\n                {\n                    ThrowWin32();\n                }\n\n                var target = GlobalLock(hGlobal);\n                if (target == IntPtr.Zero)\n                {\n                    ThrowWin32();\n                }\n\n                try\n                {\n                    Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n                }\n                finally\n                {\n                    GlobalUnlock(target);\n                }\n\n                if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n                {\n                    ThrowWin32();\n                }\n\n                hGlobal = IntPtr.Zero;\n            }\n            finally\n            {\n                if (hGlobal != IntPtr.Zero)\n                {\n                    Marshal.FreeHGlobal(hGlobal);\n                }\n\n                CloseClipboard();\n            }\n        }\n\n        static void ThrowWin32()\n        {\n            throw new Win32Exception(Marshal.GetLastWin32Error());\n        }\n\n        public static string GetText()\n        {\n            if (!IsClipboardFormatAvailable(cfUnicodeText))\n            {\n                return null;\n            }\n\n            IntPtr handle = IntPtr.Zero;\n            IntPtr pointer = IntPtr.Zero;\n            try\n            {\n                OpenClipboard();\n                handle = GetClipboardData(cfUnicodeText);\n                if (handle == IntPtr.Zero)\n                {\n                    return null;\n                }\n\n                pointer = GlobalLock(handle);\n                if (pointer == IntPtr.Zero)\n                {\n                    return null;\n                }\n\n                var size = GlobalSize(handle);\n                var buff = new byte[size];\n                Marshal.Copy(pointer, buff, 0, size);\n                return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n            }\n            finally\n            {\n                if (pointer != IntPtr.Zero)\n                {\n                    GlobalUnlock(handle);\n                }\n\n                CloseClipboard();\n            }\n        }\n\n        public static IEnumerable<string> GetFileNames()\n        {\n            if (!IsClipboardFormatAvailable(15))\n            {\n                var n = GetText();\n                if (Directory.Exists(n) || File.Exists(n))\n                {\n                    return new string[] {n};\n                }\n\n                return null;\n            }\n\n            IntPtr handle = IntPtr.Zero;\n            try\n            {\n                OpenClipboard();\n                handle = GetClipboardData(15);\n                if (handle == IntPtr.Zero)\n                {\n                    return null;\n                }\n\n                var count = DragQueryFile(handle, unchecked((int) 0xFFFFFFFF), null, 0);\n                if (count == 0)\n                {\n                    return Enumerable.Empty<string>();\n                }\n\n                var sb = new StringBuilder(260);\n                var files = new string[count];\n                for (var i = 0; i < count; i++)\n                {\n                    var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                    var s = sb.ToString();\n                    if (s.Length > charlen)\n                    {\n                        s = s.Substring(0, charlen);\n                    }\n\n                    files[i] = s;\n                }\n\n                return files;\n            }\n            finally\n            {\n                CloseClipboard();\n            }\n        }\n    }\n\n    public class KeyboardShare\n    {\n        [DllImport(\"User32.dll\")]\n        private static extern IntPtr SetWindowsHookExA(HookID hookID, KeyboardHookProc lpfn, IntPtr hmod,\n            int dwThreadId);\n\n        [DllImport(\"User32.dll\")]\n        private static extern IntPtr CallNextHookEx(IntPtr hook, int code, IntPtr wParam, IntPtr lParam);\n\n        [DllImport(\"kernel32.dll\")]\n        static extern IntPtr GetConsoleWindow();\n\n        public delegate IntPtr KeyboardHookProc(int code, IntPtr wParam, IntPtr lParam);\n\n        private event KeyboardHookProc keyhookevent;\n\n        private IntPtr hookPtr;\n\n        public KeyboardShare()\n        {\n            this.keyhookevent += KeyboardHook_keyhookevent;\n        }\n\n        private IntPtr KeyboardHook_keyhookevent(int code, IntPtr wParam, IntPtr lParam)\n        {\n            KeyStaus ks = (KeyStaus) wParam.ToInt32();\n            KeyboardHookStruct khs = (KeyboardHookStruct) Marshal.PtrToStructure(lParam, typeof(KeyboardHookStruct));\n            KeyEvent ke = ks == KeyStaus.KeyDown || ks == KeyStaus.SysKeyDown ? KeyDown : KeyUp;\n            if (ke != null)\n            {\n                ke.Invoke(this, new KeyEventArg()\n                {\n                    Key = khs.Key,\n                    KeyStaus = ks\n                });\n            }\n\n            return CallNextHookEx(IntPtr.Zero, code, wParam, lParam);\n        }\n\n        public void ConfigHook()\n        {\n            hookPtr = SetWindowsHookExA(HookID.Keyboard_LL, keyhookevent, IntPtr.Zero, 0);\n            if (hookPtr == null)\n                throw new Exception();\n        }\n\n        public delegate void KeyEvent(object sender, KeyEventArg e);\n\n        public event KeyEvent KeyDown;\n\n        public event KeyEvent KeyUp;\n    }\n\n    [StructLayout(LayoutKind.Explicit, Size = 20)]\n    public struct KeyboardHookStruct\n    {\n        [FieldOffset(0)] public Key Key;\n\n        [FieldOffset(4)] public int ScanCode;\n\n        [FieldOffset(8)] public int Flags;\n\n        [FieldOffset(12)] public int Time;\n\n        [FieldOffset(16)] public IntPtr dwExtraInfo;\n    }\n\n    public enum KeyStaus\n    {\n        KeyDown = 0x0100,\n        KeyUp = 0x0101,\n        SysKeyDown = 0x0104,\n        SysKeyUp = 0x0105\n    }\n\n    public class KeyEventArg\n    {\n        public Key Key;\n\n        public KeyStaus KeyStaus;\n    }\n\n    public enum HookID\n    {\n        Callwndproc = 4,\n        Callwndprocert = 12,\n        Cbt = 5,\n        Debug = 9,\n        Foregroundidle = 11,\n        GetMessage = 3,\n        JournalPlayback = 1,\n        JournalRecord = 0,\n        Keyboard = 2,\n        Keyboard_LL = 13,\n        Mouse = 7,\n        MouseLL = 14,\n        MsgFilter = -1,\n        Shell = 10,\n        SysmsgFilter = 6\n    }\n\n    public enum Key\n    {\n        LeftButton = 0x01,\n        RightButton = 0x02,\n        Cancel = 0x03,\n        MiddleButton = 0x04,\n        XButton1 = 0x05,\n        XButton2 = 0x06,\n        BackSpace = 0x08,\n        Tab = 0x09,\n        Clear = 0x0C,\n        Return = 0x0D,\n        Enter = Return,\n        Shift = 0x10,\n        Control = 0x11,\n        Menu = 0x12,\n        Pause = 0x13,\n        CapsLock = 0x14,\n        IMEKana = 0x15,\n        IMEHanguel = IMEKana,\n        IMEHangul = IMEKana,\n        IMEJunja = 0x17,\n        IMEFinal = 0x18,\n        IMEHanja = 0x19,\n        IMEKanji = IMEHanja,\n        Escape = 0x1B,\n        IMEConvert = 0x1C,\n        IMENonConvvert = 0x1D,\n        IMEAccept = 0x1E,\n        IMEModeChange = 0x1F,\n        SpaceBar = 0x20,\n        PageUp = 0x21,\n        PageDown = 0x22,\n        End = 0x23,\n        Home = 0x24,\n        Left = 0x25,\n        Up = 0x26,\n        Right = 0x27,\n        Down = 0x28,\n        Select = 0x29,\n        Print = 0x2A,\n        Execute = 0x2B,\n        Snapshot = 0x2C,\n        Insert = 0x2D,\n        Delete = 0x2E,\n        Help = 0x2F,\n        Key0 = 0x30,\n        Key1 = 0x31,\n        Key2 = 0x32,\n        Key3 = 0x33,\n        Key4 = 0x34,\n        Key5 = 0x35,\n        Key6 = 0x36,\n        Key7 = 0x37,\n        Key8 = 0x38,\n        Key9 = 0x39,\n        KeyA = 0x41,\n        KeyB = 0x42,\n        KeyC = 0x43,\n        KeyD = 0x44,\n        KeyE = 0x45,\n        KeyF = 0x46,\n        KeyG = 0x47,\n        KeyH = 0x48,\n        KeyI = 0x49,\n        KeyJ = 0x4A,\n        KeyK = 0x4B,\n        KeyL = 0x4C,\n        KeyM = 0x4D,\n        KeyN = 0x4E,\n        KeyO = 0x4F,\n        KeyP = 0x50,\n        KeyQ = 0x51,\n        KeyR = 0x52,\n        KeyS = 0x53,\n        KeyT = 0x54,\n        KeyU = 0x55,\n        KeyV = 0x56,\n        KeyW = 0x57,\n        KeyX = 0x58,\n        KeyY = 0x59,\n        KeyZ = 0x5A,\n        LeftWinKey = 0x5B,\n        RightWinKey = 0x5C,\n        AppsKey = 0x5D,\n        Sleep = 0x5F,\n        NumPad0 = 0x60,\n        NumPad1 = 0x61,\n        NumPad2 = 0x62,\n        NumPad3 = 0x63,\n        NumPad4 = 0x64,\n        NumPad5 = 0x65,\n        NumPad6 = 0x66,\n        NumPad7 = 0x67,\n        NumPad8 = 0x68,\n        NumPad9 = 0x69,\n        Multiply = 0x6A,\n        Add = 0x6B,\n        Separator = 0x6C,\n        Subtract = 0x6D,\n        Decimal = 0x6E,\n        Divide = 0x6F,\n        F1 = 0x70,\n        F2 = 0x71,\n        F3 = 0x72,\n        F4 = 0x73,\n        F5 = 0x74,\n        F6 = 0x75,\n        F7 = 0x76,\n        F8 = 0x77,\n        F9 = 0x78,\n        F10 = 0x79,\n        F11 = 0x7A,\n        F12 = 0x7B,\n        F13 = 0x7C,\n        F14 = 0x7D,\n        F15 = 0x7E,\n        F16 = 0x7F,\n        F17 = 0x80,\n        F18 = 0x81,\n        F19 = 0x82,\n        F20 = 0x83,\n        F21 = 0x84,\n        F22 = 0x85,\n        F23 = 0x86,\n        F24 = 0x87,\n        NumLock = 0x90,\n        ScrollLock = 0x91,\n        OEM92 = 0x92,\n        OEM93 = 0x93,\n        OEM94 = 0x94,\n        OEM95 = 0x95,\n        OEM96 = 0x96,\n        LeftShfit = 0xA0,\n        RightShfit = 0xA1,\n        LeftCtrl = 0xA2,\n        RightCtrl = 0xA3,\n        LeftMenu = 0xA4,\n        RightMenu = 0xA5,\n        BrowserBack = 0xA6,\n        BrowserForward = 0xA7,\n        BrowserRefresh = 0xA8,\n        BrowserStop = 0xA9,\n        BrowserSearch = 0xAA,\n        BrowserFavorites = 0xAB,\n        BrowserHome = 0xAC,\n        BrowserVolumeMute = 0xAD,\n        BrowserVolumeDown = 0xAE,\n        BrowserVolumeUp = 0xAF,\n        MediaNextTrack = 0xB0,\n        MediaPreviousTrack = 0xB1,\n        MediaStop = 0xB2,\n        MediaPlayPause = 0xB3,\n        LaunchMail = 0xB4,\n        LaunchMediaSelect = 0xB5,\n        LaunchApp1 = 0xB6,\n        LaunchApp2 = 0xB7,\n        OEM1 = 0xBA,\n        OEMPlus = 0xBB,\n        OEMComma = 0xBC,\n        OEMMinus = 0xBD,\n        OEMPeriod = 0xBE,\n        OEM2 = 0xBF,\n        OEM3 = 0xC0,\n        OEM4 = 0xDB,\n        OEM5 = 0xDC,\n        OEM6 = 0xDD,\n        OEM7 = 0xDE,\n        OEM8 = 0xDF,\n        OEM102 = 0xE2,\n        IMEProcess = 0xE5,\n        Packet = 0xE7,\n        Attn = 0xF6,\n        CrSel = 0xF7,\n        ExSel = 0xF8,\n        EraseEOF = 0xF9,\n        Play = 0xFA,\n        Zoom = 0xFB,\n        PA1 = 0xFD,\n        OEMClear = 0xFE\n    }\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16441765863122216"
        },
        "UpdatedTime": {
            "$numberLong": "16441765863122216"
        }
    },
    {
        "_id": 30,
        "Title": "服务器",
        "Content": "服务器\n\n// https://www.nuget.org/packages/SSH.NET/\n        // dotnet add package SSH.NET --version 2020.0.1\n        // 159.75.78.126\n        // 47.106.105.122\n        private static void DownloadDatabase(string host = \"159.75.78.126\", string username = \"root\",\n            string password = \"q4so4tDtz!\")\n        {\n\n            using var ssh = new SshClient(host, username, password);\n            ssh.Connect();\n            var dateTimeString = DateTime.Now.ToString(\"yyyy-MM-dd-hh-mm-ss\");\n            const string name = \"dataService\";\n            ssh.RunCommand(\"sudo systemctl stop euphoria.service\");\n            ssh.RunCommand(string.Format(\"zip -r /root/database-{1}.zip /root/bin/{0}.db /root/bin/{0}-log.db\", name, dateTimeString));\n            ssh.RunCommand(\"sudo systemctl start euphoria.service\");\n            using var ftp = new SftpClient(host, username, password);\n            ftp.Connect();\n           \n            using (var writer = new FileStream($\"database{dateTimeString}.zip\", FileMode.OpenOrCreate)) {\n                ftp.DownloadFile($\"/root/database-{dateTimeString}.zip\", writer);\n            }\n            Console.WriteLine($\"完成下载 database{dateTimeString}.zip\");\n        }",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16441770141373696"
        },
        "UpdatedTime": {
            "$numberLong": "16441789723369546"
        }
    },
    {
        "_id": 31,
        "Title": "字符串",
        "Content": "// 字符串\n\nstd::string SubstringAfterLast(const std::string &value,\n                               const std::string &str) {\n    auto index = value.find_last_of(str);\n    if (index != std::string::npos)\n        return value.substr(index + str.length());\n    else\n        return std::string();\n}",
        "Category": "C++",
        "CreationTime": {
            "$numberLong": "16442461083691968"
        },
        "UpdatedTime": {
            "$numberLong": "16442461083691968"
        }
    },
    {
        "_id": 32,
        "Title": "文件",
        "Content": "文件\n\n   public static String readAllText(File file) throws IOException {\n        FileInputStream is = new FileInputStream(file);\n        byte[] data = new byte[(int) file.length()];\n        is.read(data);\n        is.close();\n        return new String(data, StandardCharsets.UTF_8);\n    }",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16443013400689687"
        },
        "UpdatedTime": {
            "$numberLong": "16443013400689687"
        }
    },
    {
        "_id": 33,
        "Title": "SearchView",
        "Content": "SearchView\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuItem menuItem = menu.add(0, 0, 0, \"搜索\");\n        menuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);\n        SearchView searchView = new SearchView(this);\n        searchView.setIconified(true);\n        searchView.setOnQueryTextListener(new OnQueryTextListener() {\n            @Override\n            public boolean onQueryTextSubmit(String query) {\n mWebView.findAllAsync(query);\n                return true;\n            }\n\n            @Override\n            public boolean onQueryTextChange(String newText) {\n                return false;\n            }\n        });\n        menuItem.setActionView(searchView);\n        return super.onCreateOptionsMenu(menu);\n    }\n\nandroid:theme=\"@android:style/Theme.Material.Light\"",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16443016675888755"
        },
        "UpdatedTime": {
            "$numberLong": "16453673756277379"
        }
    },
    {
        "_id": 34,
        "Title": "ListView",
        "Content": "// ListView\n\n\n\n    private static class ListAdapter extends BaseAdapter {\n        private List<File> mFiles = new ArrayList<>();\n\n        public void refresh(String dir, String pattern) {\n            Pattern pat = null;\n            if (pattern != null) {\n                pat = Pattern.compile(pattern);\n            }\n            if (dir == null && pat != null) {\n                List<File> files = new ArrayList<>();\n                files.addAll(mFiles);\n                mFiles.clear();\n                for (File file : files) {\n                    try {\n                        String contents = readAllText(file);\n                        Matcher matcher = pat.matcher(contents);\n                        if (matcher.find()) {\n                            mFiles.add(file);\n                        }\n                    } catch (Exception ignored) {\n                    }\n                }\n                notifyDataSetChanged();\n                return;\n            }\n            mFiles.clear();\n            File[] files = new File(dir).listFiles(new FileFilter() {\n                @Override\n                public boolean accept(File pathname) {\n                    return !pathname.isFile() || !pathname.getName().endsWith(\".bak\");\n                }\n            });\n            if (files == null) return;\n            Arrays.sort(files, (o1, o2) -> {\n                if (o1.isDirectory() && o2.isDirectory() || (o1.isFile() && o2.isFile())) {\n                    return o1.getName().compareTo(o2.getName());\n                } else if (o1.isDirectory()) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            });\n            for (File file : files) {\n                if (pat == null)\n                    mFiles.add(file);\n                else {\n                    try {\n                        String contents = readAllText(file);\n                        Matcher matcher = pat.matcher(contents);\n                        if (matcher.find()) {\n                            mFiles.add(file);\n                        }\n\n                    } catch (Exception ignored) {\n                    }\n                }\n            }\n            notifyDataSetChanged();\n        }\n\n        @Override\n        public int getCount() {\n            return mFiles.size();\n        }\n\n        @Override\n        public File getItem(int position) {\n            return mFiles.get(position);\n        }\n\n        @Override\n        public long getItemId(int position) {\n            return position;\n        }\n\n        @Override\n        public View getView(int position, android.view.View convertView, ViewGroup parent) {\n            ViewHolder viewHolder;\n            if (convertView == null) {\n                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n                convertView = new TextView(parent.getContext());\n                convertView.setLayoutParams(layoutParams);\n                convertView.setPadding(30, 30, 30, 30);\n                viewHolder = new ViewHolder();\n                viewHolder.textView = (TextView) convertView;\n                convertView.setTag(viewHolder);\n            } else {\n                viewHolder = (ViewHolder) convertView.getTag();\n            }\n            viewHolder.textView.setText(mFiles.get(position).getName());\n            return convertView;\n/*\nif (convertView == null) {\n                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n                convertView = new TextView(parent.getContext());\n                convertView.setLayoutParams(layoutParams);\n                convertView.setPadding(30, 30, 30, 30);\n            }\n            ((TextView) convertView).setText(mFiles.get(position).getName());\n            return convertView;\n*/\n        }\n    }\nprivate static class ViewHolder {\n        private TextView textView;\n    }",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16443021537286588"
        },
        "UpdatedTime": {
            "$numberLong": "16443022340405524"
        }
    },
    {
        "_id": 35,
        "Title": "SharedPreferences",
        "Content": "SharedPreferences\n\n public static void setString(Context context, String key, String value) {\n        PreferenceManager.getDefaultSharedPreferences(context)\n                .edit()\n                .putString(key, value)\n                .apply();\n    }\n\nPreferenceManager.getDefaultSharedPreferences(this)\n                .getString(\"js\",\"\");",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16443742246582792"
        },
        "UpdatedTime": {
            "$numberLong": "16444329373497665"
        }
    },
    {
        "_id": 36,
        "Title": "字符串",
        "Content": "字符串\n\npublic static String substring(String string, String first, String second) {\n        int start = string.indexOf(first);\n        if (start == -1) return null;\n        start += first.length();\n        int end = string.indexOf(second, start);\n        if (end == -1) return null;\n        return string.substring(start, end);\n    }\n\n    public static String substringAfter(String string, char delimiter) {\n        int index = string.indexOf(delimiter);\n        if (index != -1) return string.substring(index + 1);\n        return string;\n    }\n\n    public static String substringAfter(String string, String delimiter) {\n        int index = string.indexOf(delimiter);\n        if (index != -1) return string.substring(index + delimiter.length());\n        return string;\n    }\n\n    public static String substringAfterLast(String string, char delimiter) {\n        int index = string.lastIndexOf(delimiter);\n        if (index != -1) return string.substring(index + 1);\n        return string;\n    }\n\n    public static String substringAfterLast(String string, String delimiter) {\n        int index = string.lastIndexOf(delimiter);\n        if (index != -1) return string.substring(index + delimiter.length());\n        return string;\n    }\n\n    public static String substringBefore(String string, char delimiter) {\n        int index = string.indexOf(delimiter);\n        if (index != -1) return string.substring(0, index);\n        return string;\n    }\n\n    public static String substringBefore(String string, String delimiter) {\n        int index = string.indexOf(delimiter);\n        if (index != -1) return string.substring(0, index + delimiter.length());\n        return string;\n    }\n\n    public static String substringBeforeLast(String string, char delimiter) {\n        int index = string.lastIndexOf(delimiter);\n        if (index != -1) return string.substring(0, index);\n        return string;\n    }\n\n    public static String substringBeforeLast(String string, String delimiter) {\n        int index = string.lastIndexOf(delimiter);\n        if (index != -1) return string.substring(0, index);\n        return string;\n    }",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16443742739712759"
        },
        "UpdatedTime": {
            "$numberLong": "16443742739712759"
        }
    },
    {
        "_id": 37,
        "Title": "剪切板",
        "Content": "剪切板\n\n public static void writeText(Context context, String string) {\n        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\n        ClipData clip = ClipData.newPlainText(null, string);\n        clipboard.setPrimaryClip(clip);\n    }\n public static String readText(Context context) {\n        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\n        ClipData clipData = clipboard.getPrimaryClip();\n        if (clipData.getItemCount() > 0) {\n            CharSequence sequence = clipboard.getPrimaryClip().getItemAt(0).getText();\n            if (sequence != null)\n                return sequence.toString();\n        }\n        return null;\n    }",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16443743325986249"
        },
        "UpdatedTime": {
            "$numberLong": "16443743325986249"
        }
    },
    {
        "_id": 38,
        "Title": "网络",
        "Content": "网络\n\npublic static String readString(HttpURLConnection connection) {\n        InputStream in;\n        BufferedReader reader = null;\n        try {\n            String contentEncoding = connection.getHeaderField(\"Content-Encoding\");\n            if (contentEncoding != null && contentEncoding.equals(\"gzip\")) {\n                in = new GZIPInputStream(connection.getInputStream());\n            } else {\n                in = connection.getInputStream();\n            }\n            /*\n            \"implementation group\": \"org.brotli', name: 'dec', version: '0.1.1\",\n            else if (contentEncoding != null && contentEncoding.equals(\"br\")) {\n                in = new BrotliInputStream(connection.getInputStream());\n            } */\n            //  if (contentEncoding != null && contentEncoding.equals(\"br\")) {\n            //in = new BrotliInputStream(connection.getInputStream());\n            //  }\n            reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n            String line;\n            StringBuilder sb = new StringBuilder();\n            while ((line = reader.readLine()) != null) {\n                sb.append(line).append(\"\\r\\n\");\n            }\n            return sb.toString();\n        } catch (Exception ignored) {\n        } finally {\n            try {\n                if (reader != null)\n                    reader.close();\n            } catch (Exception ignored) {\n            }\n        }\n        return null;\n    }\n\n   public static HttpResponse getString(String uri, String[][] headers,\n                                         boolean location,\n                                         boolean cookie) throws IOException {\n        URL url = new URL(uri);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        urlConnection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36\");\n        if (headers != null) {\n            for (String[] header : headers) {\n                urlConnection.setRequestProperty(header[0], header[1]);\n            }\n        }\n        HttpResponse httpResponse = new HttpResponse();\n        urlConnection.setInstanceFollowRedirects(false);\n        Map<String, List<String>> listMap = urlConnection.getHeaderFields();\n        if (cookie) {\n            StringBuilder stringBuilder = new StringBuilder();\n            for (Entry<String, List<String>> header : listMap.entrySet()) {\n                if (header.getKey() != null && header.getKey().equalsIgnoreCase(\"set-cookie\")) {\n                    for (String s : header.getValue()) {\n                        stringBuilder.append(Shared.substringBefore(s, \"; \"))\n                                .append(\"; \");\n                    }\n                }\n            }\n            httpResponse.cookie = stringBuilder.toString();\n        }\n        if (location) {\n            httpResponse.location = urlConnection.getHeaderField(\"Location\");\n        }\n        int code = urlConnection.getResponseCode();\n        if (code < 400 && code >= 200) {\n            httpResponse.contents = Shared.readString(urlConnection);\n        }\n        return httpResponse;\n    }\n\n\n    private static void disableSSLCertificateChecking() {\n        TrustManager[] trustAllCerts = new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(java.security.cert.X509Certificate[] x509Certificates, String s) throws java.security.cert.CertificateException {\n                        // not implemented\n                    }\n\n                    @Override\n                    public void checkServerTrusted(java.security.cert.X509Certificate[] x509Certificates, String s) throws java.security.cert.CertificateException {\n                        // not implemented\n                    }\n\n                    @Override\n                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                        return null;\n                    }\n                }\n        };\n        try {\n            HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {\n                @Override\n                public boolean verify(String s, SSLSession sslSession) {\n                    return true;\n                }\n            });\n            SSLContext sc = SSLContext.getInstance(\"TLS\");\n            sc.init(null, trustAllCerts, new java.security.SecureRandom());\n            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n        } catch (KeyManagementException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n\npublic static String touchServer(String url, String method, String accessToken, String jsonBody) {\n        Log.e(\"TAG/Utils\", \"[ERROR][touch]: \" + url);\n        disableSSLCertificateChecking();\n        HttpURLConnection connection = null;\n        URL u;\n        try {\n            u = new URL(url);\n        } catch (MalformedURLException e) {\n            Log.e(\"TAG/Utils\", \"[ERROR][touch]: \" + e.getMessage());\n            return e.getMessage();\n        }\n        try {\n            connection = (HttpURLConnection) u.openConnection();\n            connection.setRequestMethod(method);\n            if (accessToken != null)\n                connection.setRequestProperty(\"Authorization\", \"Bearer \" + accessToken);\n            connection.setConnectTimeout(10 * 1000);\n            connection.setReadTimeout(10 * 1000);\n            connection.setRequestProperty(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\");\n            connection.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate, br\");\n            connection.setRequestProperty(\"Accept-Language\", \"zh-CN,zh;q=0.9,en;q=0.8\");\n            connection.setRequestProperty(\"Cache-Control\", \"max-age=0\");\n            connection.setRequestProperty(\"Connection\", \"keep-alive\");\n            connection.setRequestProperty(\"Upgrade-Insecure-Requests\", \"1\");\n            connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.56 Mobile Safari/537.36\");\n            if (jsonBody != null) {\n                connection.addRequestProperty(\"Content-Type\", \"application/json\");\n                connection.addRequestProperty(\"Content-Encoding\", \"gzip\");\n                GZIPOutputStream outGZIP;\n                outGZIP = new GZIPOutputStream(connection.getOutputStream());\n                byte[] body = jsonBody.getBytes(\"utf-8\");\n                outGZIP.write(body, 0, body.length);\n                outGZIP.close();\n            }\n            int code = connection.getResponseCode();\n            StringBuilder sb = new StringBuilder();\n//            sb.append(\"ResponseCode: \").append(code).append(\"\\r\\n\");\n//\n//\n//            Set<String> keys = connection.getHeaderFields().keySet();\n//            for (String key : keys) {\n//                sb.append(key).append(\": \").append(connection.getHeaderField(key)).append(\"\\r\\n\");\n//            }\n            if (code < 400 && code >= 200) {\n                //sb.append(\"\\r\\n\\r\\n\");\n                InputStream in;\n                String contentEncoding = connection.getHeaderField(\"Content-Encoding\");\n                if (contentEncoding != null && contentEncoding.equals(\"gzip\")) {\n                    in = new GZIPInputStream(connection.getInputStream());\n                } else {\n                    in = connection.getInputStream();\n                }\n                BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    sb.append(line).append(\"\\r\\n\");\n                }\n                reader.close();\n            } else {\n                Log.e(\"TAG/Utils\", \"[ERROR][touch]: \" + code);\n                sb.append(\"Method: \").append(method).append(\";\\n\")\n                        .append(\"ResponseCode: \").append(code).append(\";\\n\")\n                        .append(\"Error: \").append(toString(connection.getErrorStream()));\n            }\n            return sb.toString();\n        } catch (IOException e) {\n            Log.e(\"TAG/Utils\", \"[ERROR][touch]: \" + e.getMessage());\n            return e.getMessage();\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16443744675461465"
        },
        "UpdatedTime": {
            "$numberLong": "16443745471537218"
        }
    },
    {
        "_id": 39,
        "Title": "AlertDialog",
        "Content": "AlertDialog\n\npublic static void openTextContentDialog(Activity activity, String title, Listener listener) {\n        EditText editText = new EditText(activity);\n        editText.requestFocus();\n        AlertDialog dialog = new Builder(activity)\n                .setTitle(title)\n                .setView(editText)\n                .setPositiveButton(android.R.string.ok, (dialogInterface, i) -> {\n                    listener.onSuccess(editText.getText().toString());\n                    dialogInterface.dismiss();\n                }).setNegativeButton(android.R.string.cancel, (dialogInterface, which) -> {\n                    dialogInterface.dismiss();\n                })\n                .create();\n        dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n        dialog.show();\n    }\n\n EditText editText = new EditText(this);\n            editText.requestFocus();\n            AlertDialog dialog = new Builder(this)\n                    .setTitle(\"输入\")\n                    .setView(editText)\n                    .setPositiveButton(android.R.string.ok, (dialogInterface, i) -> {\n                        mWebView.loadUrl(editText.getText().toString());\n                        dialogInterface.dismiss();\n                    }).setNegativeButton(android.R.string.cancel, (dialogInterface, which) -> {\n                        dialogInterface.dismiss();\n                    })\n                    .create();\n            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n            dialog.show();",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16444326661847679"
        },
        "UpdatedTime": {
            "$numberLong": "16470566389814979"
        }
    },
    {
        "_id": 40,
        "Title": "标题",
        "Content": "标题\n\nconsole.error([...document.querySelectorAll('h1,h2,h3,h4,h5')].map(i=>\"\\t\".repeat(parseInt(/\\d+/.exec(i.tagName)[0]))+i.textContent).join('\\n'));",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16446531080729876"
        },
        "UpdatedTime": {
            "$numberLong": "16446531080729876"
        }
    },
    {
        "_id": 41,
        "Title": "表格",
        "Content": "表格\n\n(function () {\n    const trArray = $0.querySelectorAll('tr');\n    //const max = [...trArray].map(i => i.querySelectorAll('td').length).reduce((x, y) => x > y ? x : y);\n    //console.log(max);\n    const buf = [];\n    for (let i = 0; i < trArray.length; i++) {\n        console.log(i);\n        if (i === 1) {\n            buf.push('|---|---|');\n            const b = [];\n            b.push('|');\n            const elements = [...trArray[i].children];\n            elements.forEach((x, k) => {\n                if (k === 0)\n                    b.push(\"`\" + x.textContent + '`|');\n                else\n                    b.push(x.textContent + '|');\n            });\n            buf.push(b.join(''));\n        } else {\n            const b = [];\n            b.push('|');\n            const elements = [...trArray[i].children];\n            elements.forEach((x, k) => {\n                if (k === 0)\n                    b.push(\"`\" + x.textContent + '`|');\n                else\n                    b.push(x.textContent + '|');\n            });\n            buf.push(b.join(''));\n        }\n    }\n    console.error(buf.join('\\n'));\n})();",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16448844164167991"
        },
        "UpdatedTime": {
            "$numberLong": "16448844164167991"
        }
    },
    {
        "_id": 42,
        "Title": "Floating Actions",
        "Content": "Floating Actions\n\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div\n        style=\"height: 56px;background: #E40A5D;position: fixed;box-shadow: 0 0 4px rgb(0 0 0 / 14%), 0 4px 8px rgb(0 0 0 / 28%);padding: 10px;box-sizing: border-box;\">\n        <div style=\"height: 36px;width:36px;padding-right: 10px;display: inline-block;\">\n            <svg viewBox=\"0 0 24 24\" style=\"fill:#f1f1f1\">\n                <path\n                    d=\"M21.516 20.484v-13.969q0-0.422-0.305-0.727t-0.727-0.305h-9.047l1.313 3.797h1.453v-1.266h1.266v1.266h4.547v1.313h-1.922q-0.703 2.344-2.391 4.219l3.281 3.281-0.938 0.891-3.094-3.094 1.031 3.094-1.969 2.531h6.469q0.422 0 0.727-0.305t0.305-0.727zM13.172 10.594l0.797 2.344 0.844 1.125q1.453-1.594 2.063-3.469h-3.703zM6.984 15.984q2.156 0 3.492-1.359t1.336-3.516q0-0.047-0.141-1.031h-4.688v1.734h2.953q-0.094 0.891-0.844 1.641t-2.109 0.75q-1.313 0-2.227-0.938t-0.914-2.25q0-1.359 0.914-2.297t2.227-0.938q1.266 0 2.063 0.797l1.313-1.266q-1.453-1.313-3.375-1.313-2.063 0-3.516 1.477t-1.453 3.539 1.453 3.516 3.516 1.453zM21 3.984q0.797 0 1.406 0.609t0.609 1.406v15q0 0.797-0.609 1.406t-1.406 0.609h-9l-0.984-3h-8.016q-0.797 0-1.406-0.609t-0.609-1.406v-15q0-0.797 0.609-1.406t1.406-0.609h6.984l1.031 3h9.984z\">\n                </path>\n            </svg>\n        </div>\n        <div style=\"height: 36px;width:36px;padding-right: 10px;display: inline-block;\">\n            <svg viewBox=\"0 0 24 24\" style=\"fill:#f1f1f1\">\n                <path\n                    d=\"M21.516 20.484v-13.969q0-0.422-0.305-0.727t-0.727-0.305h-9.047l1.313 3.797h1.453v-1.266h1.266v1.266h4.547v1.313h-1.922q-0.703 2.344-2.391 4.219l3.281 3.281-0.938 0.891-3.094-3.094 1.031 3.094-1.969 2.531h6.469q0.422 0 0.727-0.305t0.305-0.727zM13.172 10.594l0.797 2.344 0.844 1.125q1.453-1.594 2.063-3.469h-3.703zM6.984 15.984q2.156 0 3.492-1.359t1.336-3.516q0-0.047-0.141-1.031h-4.688v1.734h2.953q-0.094 0.891-0.844 1.641t-2.109 0.75q-1.313 0-2.227-0.938t-0.914-2.25q0-1.359 0.914-2.297t2.227-0.938q1.266 0 2.063 0.797l1.313-1.266q-1.453-1.313-3.375-1.313-2.063 0-3.516 1.477t-1.453 3.539 1.453 3.516 3.516 1.453zM21 3.984q0.797 0 1.406 0.609t0.609 1.406v15q0 0.797-0.609 1.406t-1.406 0.609h-9l-0.984-3h-8.016q-0.797 0-1.406-0.609t-0.609-1.406v-15q0-0.797 0.609-1.406t1.406-0.609h6.984l1.031 3h9.984z\">\n                </path>\n            </svg>\n        </div>\n        <div style=\"height: 36px;width:36px;padding-right: 10px;display: inline-block;\">\n            <svg viewBox=\"0 0 24 24\" style=\"fill:#f1f1f1\">\n                <path\n                    d=\"M21.516 20.484v-13.969q0-0.422-0.305-0.727t-0.727-0.305h-9.047l1.313 3.797h1.453v-1.266h1.266v1.266h4.547v1.313h-1.922q-0.703 2.344-2.391 4.219l3.281 3.281-0.938 0.891-3.094-3.094 1.031 3.094-1.969 2.531h6.469q0.422 0 0.727-0.305t0.305-0.727zM13.172 10.594l0.797 2.344 0.844 1.125q1.453-1.594 2.063-3.469h-3.703zM6.984 15.984q2.156 0 3.492-1.359t1.336-3.516q0-0.047-0.141-1.031h-4.688v1.734h2.953q-0.094 0.891-0.844 1.641t-2.109 0.75q-1.313 0-2.227-0.938t-0.914-2.25q0-1.359 0.914-2.297t2.227-0.938q1.266 0 2.063 0.797l1.313-1.266q-1.453-1.313-3.375-1.313-2.063 0-3.516 1.477t-1.453 3.539 1.453 3.516 3.516 1.453zM21 3.984q0.797 0 1.406 0.609t0.609 1.406v15q0 0.797-0.609 1.406t-1.406 0.609h-9l-0.984-3h-8.016q-0.797 0-1.406-0.609t-0.609-1.406v-15q0-0.797 0.609-1.406t1.406-0.609h6.984l1.031 3h9.984z\">\n                </path>\n            </svg>\n        </div>\n        <div style=\"height: 36px;width:36px;display: inline-block;\">\n            <svg viewBox=\"0 0 24 24\" style=\"fill:#f1f1f1\">\n                <path\n                    d=\"M15 9v-3.984h-9.984v3.984h9.984zM12 18.984q1.219 0 2.109-0.891t0.891-2.109-0.891-2.109-2.109-0.891-2.109 0.891-0.891 2.109 0.891 2.109 2.109 0.891zM17.016 3l3.984 3.984v12q0 0.797-0.609 1.406t-1.406 0.609h-13.969q-0.844 0-1.43-0.586t-0.586-1.43v-13.969q0-0.844 0.586-1.43t1.43-0.586h12z\">\n                </path>\n            </svg>\n        </div>\n    </div>\n    <script>\n        const div = document.querySelector('div');\n        let pageX;\n        let pageY;\n        let x;\n        let y;\n        div.addEventListener('touchstart', evt => {\n            pageX = evt.touches[0].pageX;\n            pageY = evt.touches[0].pageY;\n            x = div.getBoundingClientRect().x;\n            y = div.getBoundingClientRect().y;\n        })\n        div.addEventListener('touchmove', evt => {\n            let pX = evt.touches[0].pageX;\n            let pY = evt.touches[0].pageY;\n            let xdiff = pX - pageX;\n            let ydiff = pY - pageY;\n            console.log(xdiff, ydiff);\n            div.style.left = `${xdiff + x}px`;\n            div.style.top = `${ydiff + y}px`;\n        })\n        div.addEventListener('touchend', evt => {\n            pageX = pageY = 0;\n        })\n    </script>\n</body>\n\n</html>",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16450483650592764"
        },
        "UpdatedTime": {
            "$numberLong": "16450483650592764"
        }
    },
    {
        "_id": 43,
        "Title": "Cookie",
        "Content": "// Cookie\n\n foreach (var cookie in HttpContext.Request.Cookies)\n            {\n                Console.WriteLine($\"{cookie.Key}: {cookie.Value}\");\n            }\n            var expires = new DateTimeOffset(DateTime.UtcNow).AddYears(1);\n            var cookieOptions = new CookieOptions()\n            {\n                Path = \"/\",\n                Expires = expires,\n                HttpOnly = false\n            };\n            Response.Cookies.Append(\"Cookie\", KeyExtensions.AESEncrypt(\"\", \"psycho_euphoria\"), cookieOptions);\n\n\n/*\n\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Http/Http.Features/src/CookieOptions.cs\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Http/Headers/src/SetCookieHeaderValue.cs\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Http/Headers/src/HeaderUtilities.cs\n\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.cookieoptions?view=aspnetcore-6.0\n\n*/",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16450613149617605"
        },
        "UpdatedTime": {
            "$numberLong": "16488760097681890"
        }
    },
    {
        "_id": 44,
        "Title": "SQL Server",
        "Content": "// SQL Server\n\n```\n\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\nusing System.Data.SqlClient;\n\nnamespace Datas\n{\n\t/// <summary>\n\t/// Description of MainForm.\n\t/// </summary>\n\tpublic partial class MainForm : Form\n\t{\n\t\tstring constr = \"server=.;database=MotorService;integrated security=SSPI\";\n\t\tSqlConnection c;\n\t\tList<Record> list;\n\t\tList<int> partIds;\n\t\tpublic MainForm()\n\t\t{\n\t\t\tInitializeComponent();\n\t\t\t\n\t\t\t/*\n\t\t\t\n//\t\t\tDataTable dt = c.GetSchema(\"Tables\");\n//\t\t\tforeach (DataRow row in dt.Rows) {\n//\t\t\t\tstring tablename = (string)row[2];\n//\t\t\t\ttoolStripComboBox1.Items.Add(tablename);\n//\t\t\t}\n\t\t\tvar sql =\"SELECT PchHeadId,Quantity FROM Purchase WHERE PartId = 1898\"; //\"select PartId,Quantity from Purchase Order by  Quantity desc\";\n\t\t\t\n\t\t\tvar reader =\tnew SqlCommand(sql, c).ExecuteReader();\n\t\t\tvar list=new List<string>();\n\t\t\t\n\t\t\twhile(reader.Read()){\n\t\t\t\t//toolStripComboBox1.Items.Add(reader.GetInt32(0).ToString()+\" \"+reader.GetDecimal(1).ToString());\n\t\t\t\tlist.Add(string.Format(\"{0} - {1}\",reader.GetInt32(0),reader.GetDecimal(1)));\n\t\t\t}\n\t\t\t\n\t\t\tFile.WriteAllLines(\n\t\t\t\tPath.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop),\"3.txt\")\n\t\t\t\t,list);\n\t\t\t\t*/\n\t\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\tprivate void Initialize()\n\t\t{\n\t\t\tc = new SqlConnection(constr);\n\t\t\tc.Open();\n\t\t\t\n\t\t}\n\t\tvoid ToolStripComboBox1KeyUp(object sender, KeyEventArgs e)\n\t\t{\n\t\t\tif (e.KeyCode == Keys.Enter) {\n\t\t\t\tvar sql = \"select PartId,PartName from PartsOriginal where PartName like '%\" + toolStripComboBox1.Text + \"%'\"; //\"select PartId,Quantity from Purchase Order by  Quantity desc\";\n\t\t\t\n\t\t\t\tvar reader =\tnew SqlCommand(sql, c).ExecuteReader();\n\t\t\t\tlist = new List<Record>();\n\t\t\t\ttoolStripComboBox1.Items.Clear();\n\t\t\t\twhile (reader.Read()) {\n\t\t\t\t\t//toolStripComboBox1.Items.Add(reader.GetInt32(0).ToString()+\" \"+reader.GetDecimal(1).ToString());\n\t\t\t\t\tvar record = new Record(); \n\t\t\t\t\trecord.PartId = reader.GetInt32(0);\n\t\t\t\t\trecord.PartName = reader.GetString(1);\n\t\t\t\t\n\t\t\t\t\tlist.Add(record);\n\t\t\t\t\ttoolStripComboBox1.Items.Add(record.PartName);\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\treader.Close();\n\t\t\t}\n\t\n\t\t}\n\t\tvoid ToolStripComboBox1SelectedIndexChanged(object sender, EventArgs e)\n\t\t{\n\t\t\tif (toolStripComboBox1.SelectedIndex == -1)\n\t\t\t\treturn;\n\t\t\tvar sql = \"select Quantity,PchDate,PchId from Purchase join PurchaseHead on Purchase.PchHeadId = PurchaseHead.PchHeadId where PartId = \" +\n\t\t\t          list[toolStripComboBox1.SelectedIndex].PartId\n\t\t\t          + \" order by PchDate desc\";\n\t\t\t\n\t\t\tvar reader =\tnew SqlCommand(sql, c).ExecuteReader();\n\t\t\tpartIds = new List<int>();\n\t\t\tlistBox1.Items.Clear();\n\t\t\twhile (reader.Read()) {\n\t\t\t\tlistBox1.Items.Add(string.Format(\"{0} {1}\", reader.GetDecimal(0), reader.GetDateTime(1).ToString()));\n\t\t\t\tpartIds.Add(reader.GetInt32(2));\n\t\t\t}\n\t\t\treader.Close();\n\t\t}\n\t\tvoid 修改ToolStripMenuItemClick(object sender, EventArgs e)\n\t\t{\n\t\t\tif (listBox1.SelectedIndex == -1)\n\t\t\t\treturn;\n\t\t\tnew SqlCommand(\"Update Purchase set Quantity = 200 where PchId = \"+partIds[listBox1.SelectedIndex],c).ExecuteNonQuery();\n\t\t}\n\t\tvoid ToolStripTextBox1KeyUp(object sender, KeyEventArgs e)\n\t\t{\n\t\t\tif(e.KeyCode==Keys.Enter && toolStripTextBox1.Text==\"640916\"){\n\t\t\t \n\t\t\t\tInitialize();\n\t\t\t}\n\t\t}\n\t\t \n\t\t\n\t\tprivate class Record\n\t\t{\n\t\t\tpublic int PartId;\n\t\t\tpublic string PartName;\n\t\t}\n\t}\n}\n```",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16450613243756518"
        },
        "UpdatedTime": {
            "$numberLong": "16476765135783569"
        }
    },
    {
        "_id": 45,
        "Title": "腾讯云短信",
        "Content": "// 腾讯云短信\n\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace Lucidu\n{\n    public class SmsClient\n    {\n        /*\n       https://cloud.tencent.com/document/product/382/55981\n       https://github.com/TencentCloud/signature-process-demo/blob/main/sms/signature-v1/dotnet/demo.cs\n       https://github.com/TencentCloud/signature-process-demo/blob/main/sms/signature-v3/dotnet/demo.cs\n*/\n\n        private readonly HttpClient _httpClient;\n\n        public SmsClient(HttpClient httpClient)\n        {\n            _httpClient = httpClient;\n        }\n\n        private const string AppId = \"1400655900\";\n        private const string AppKey = \"d3ce2c13e72578da8c1e73003b867a5e\";\n        private const string SmsSdkAppId = \"1400655900\";\n        private const string SecretId = \"AKIDtd8OQzJODn8E5h390cy5wXt0sUryqSpw\";\n        private const string SecretKey = \"uYx60e2B5kALGvLWR6WgbGfpkPpzuZ2G\";\n        private const string TemplateId = \"1355728\";\n\n        private const string SignName = \"瑜伽测试号小程序\";\n\n        private static Dictionary<string, dynamic> GenerateBody(string phoneNum, string verfiyCode)\n        {\n            var obj = new Dictionary<string, dynamic>\n            {\n                {\"SmsSdkAppId\", SmsSdkAppId},\n                {\"SignName\", SignName},\n                {\"TemplateId\", TemplateId},\n                {\"PhoneNumberSet\", new string[] {phoneNum}},\n                {\"TemplateParamSet\", new string[] {verfiyCode}}\n            };\n\n\n            /*\n            console.log([...$0.querySelectorAll('td:first-child')].map(i=>`obj.Add(\"${i.textContent}\",${i.textContent.substring(0,1).toLowerCase()}${i.textContent.substring(1)});`).join('\\n'))\n            */\n            return obj;\n        }\n\n        private static byte[] HmacSha256(byte[] key, byte[] msg)\n        {\n            using var mac = new HMACSHA256(key);\n            return mac.ComputeHash(msg);\n        }\n\n        private static string Sha256Hex(string s)\n        {\n            using var algo = SHA256.Create();\n            var hashes = algo.ComputeHash(Encoding.UTF8.GetBytes(s));\n            var builder = new StringBuilder();\n            foreach (var t in hashes)\n            {\n                builder.Append(t.ToString(\"x2\"));\n            }\n\n            return builder.ToString();\n        }\n\n        private static string GenerateAuthorization(string postData, out long timestamp)\n        {\n            // ************* 步骤 1：拼接规范请求串 *************\n            const string host = \"sms.tencentcloudapi.com\";\n            const string httpRequestMethod = \"POST\";\n            const string canonicalUri = \"/\";\n            const string canonicalQueryString = \"\";\n            const string canonicalHeaders = \"content-type:application/json; charset=utf-8\\n\" + \"host:\" + host + \"\\n\";\n            const string signedHeaders = \"content-type;host\";\n            var hashedRequestPayload = Sha256Hex(postData);\n            var canonicalRequest = httpRequestMethod + \"\\n\" + canonicalUri + \"\\n\" + canonicalQueryString + \"\\n\"\n                                   + canonicalHeaders + \"\\n\" + signedHeaders + \"\\n\" + hashedRequestPayload;\n\n            // ************* 步骤 2：拼接待签名字符串 *************\n            var date = DateTime.UtcNow;\n            var dateset = date.ToString(\"yyyy-MM-dd\");\n            var startTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n            var requestTimestamp =\n                (long) Math.Round((date - startTime).TotalMilliseconds, MidpointRounding.AwayFromZero) / 1000;\n            timestamp = requestTimestamp;\n\n            const string service = \"sms\";\n            const string algorithm = \"TC3-HMAC-SHA256\";\n            var credentialScope = dateset + \"/\" + service + \"/\" + \"tc3_request\";\n            var hashedCanonicalRequest = Sha256Hex(canonicalRequest);\n            var stringToSign = algorithm + \"\\n\" + requestTimestamp + \"\\n\" + credentialScope + \"\\n\" +\n                               hashedCanonicalRequest;\n            \n\n            // ************* 步骤 3：计算签名 *************\n            var tc3SecretKey = Encoding.UTF8.GetBytes(\"TC3\" + SecretKey);\n            var secretDate = HmacSha256(tc3SecretKey, Encoding.UTF8.GetBytes(dateset));\n            var secretService = HmacSha256(secretDate, Encoding.UTF8.GetBytes(service));\n            var secretSigning = HmacSha256(secretService, Encoding.UTF8.GetBytes(\"tc3_request\"));\n            var signatureBytes = HmacSha256(secretSigning, Encoding.UTF8.GetBytes(stringToSign));\n            var signature = BitConverter.ToString(signatureBytes).Replace(\"-\", \"\").ToLower();\n\n            // ************* 步骤 4：拼接 Authorization *************\n            var authorization = algorithm + \" \"\n                                          + \"Credential=\" + SecretId + \"/\" + credentialScope + \", \"\n                                          + \"SignedHeaders=\" + signedHeaders + \", \"\n                                          + \"Signature=\" + signature;\n\n            return authorization;\n        }\n\n        private const string Url = \"https://sms.tencentcloudapi.com\";\n\n\n        public async Task<string> SendSms(string phoneNum, string dynamicVerifyCode)\n        {\n            object postBody = GenerateBody(phoneNum, dynamicVerifyCode);\n\n            var authorization =\n                GenerateAuthorization(JsonSerializer.Serialize(postBody), out var timestamp);\n\n            var sc = new StringContent(JsonSerializer.Serialize(postBody), Encoding.UTF8,\n                \"application/json\");\n\n            var message = new HttpRequestMessage(HttpMethod.Post, Url);\n            message.Content = sc;\n            message.Headers.Add(\"X-TC-Action\", \"SendSms\");\n            message.Headers.Add(\"X-TC-Region\", \"ap-guangzhou\");\n            message.Headers.Add(\"X-TC-Timestamp\", \"\" + timestamp);\n            message.Headers.Add(\"X-TC-Version\", \"2021-01-11\");\n            message.Headers.Add(\"X-TC-Language\", \"zh-CN\");\n            Console.WriteLine(timestamp);\n            message.Headers.TryAddWithoutValidation(\"Authorization\", authorization);\n            message.Headers.Add(\"Host\", \"sms.tencentcloudapi.com\");\n\n            var response = await _httpClient.SendAsync(message);\n\n            return await response.Content.ReadAsStringAsync();\n        }\n    }\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16450613824869507"
        },
        "UpdatedTime": {
            "$numberLong": "16489404310602507"
        }
    },
    {
        "_id": 46,
        "Title": "字符串",
        "Content": "// 字符串\n\n public static class Shared\n    {\n        public static void WriteAllLines(this string path, IEnumerable<string> contents)\n        {\n            using (var writer =\tnew StreamWriter(path, false, new UTF8Encoding(false))) {\n                foreach (string line in contents) {\n                    writer.WriteLine(line);\n                }\n            }\n        }\n\n        public static void WriteAllText(this string path, string contents)\n        {\n            using (var sw = new StreamWriter(path, false, new UTF8Encoding(false)))\n                sw.Write(contents);\n        }\n        public static List<String> ReadAllLines(this string path)\n        {\n            var encoding = new UTF8Encoding(false);\n            String line;\n            List<String> lines = new List<String>();\n            using (StreamReader sr = new StreamReader(path, encoding))\n                while ((line = sr.ReadLine()) != null)\n                    lines.Add(line);\n            return lines;\n        }\n        public static string ReadAllText(this string path)\n        {\n            var encoding = new UTF8Encoding(false);\n            using (StreamReader sr = new StreamReader(path, encoding, true))\n                return sr.ReadToEnd();\n        }\n        public static string RemoveWhiteSpaceLines(this string str)\n        {\n            return string.Join(Environment.NewLine,\n                str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                    .Where(i => !string.IsNullOrWhiteSpace(i)));\n        }\n\n        public static string Repeat(this string instr, int n)\n        {\n            if (n <= 0)\n            {\n                return null;\n            }\n\n            if (string.IsNullOrEmpty(instr) || n == 1)\n            {\n                return instr;\n            }\n\n            return new StringBuilder(instr.Length * n)\n                .Insert(0, instr, n)\n                .ToString();\n        }\n\n\n        public static string SubstringAfter(this string value, char delimiter)\n        {\n            var index = value.IndexOf(delimiter);\n            if (index == -1)\n                return value;\n            else\n                return value.Substring(index + 1);\n        }\n\n        public static string SubstringAfter(this string value, string delimiter)\n        {\n            var index = value.IndexOf(delimiter);\n            if (index == -1)\n                return value;\n            else\n                return value.Substring(index + delimiter.Length);\n        }\n\n        public static string SubstringAfterLast(this string value, char delimiter)\n        {\n            var index = value.LastIndexOf(delimiter);\n            if (index == -1)\n                return value;\n            else\n                return value.Substring(index + 1);\n        }\n\n        public static string SubstringAfterLast(this string value, string delimiter)\n        {\n            var index = value.LastIndexOf(delimiter, StringComparison.Ordinal);\n            return index == -1 ? value : value.Substring(index + 1);\n        }\n\n        public static string SubstringBefore(this string value, char delimiter)\n        {\n            var index = value.IndexOf(delimiter);\n            if (index == -1)\n                return value;\n            else\n                return value.Substring(0, index);\n        }\n\n        public static string SubstringBefore(this string value, string delimiter)\n        {\n            var index = value.IndexOf(delimiter);\n            if (index == -1)\n                return value;\n            else\n                return value.Substring(0, index);\n        }\n\n        public static string SubstringBeforeLast(this string value, char delimiter)\n        {\n            var index = value.LastIndexOf(delimiter);\n            if (index == -1)\n                return value;\n            else\n                return value.Substring(0, index);\n        }\n\n        public static string SubstringBeforeLast(this string value, string delimiter)\n        {\n            var index = value.LastIndexOf(delimiter);\n            if (index == -1)\n                return value;\n            else\n                return value.Substring(0, index);\n        }\n\n        public static string Concatenate(this IEnumerable<string> strings)\n        {\n            return Concatenate(strings, (StringBuilder builder, string nextValue) => builder.Append(nextValue));\n        }\n\n        private static string Concatenate(this IEnumerable<string> strings,\n            Func<StringBuilder, string, StringBuilder> builderFunc)\n        {\n            return strings.Aggregate(new StringBuilder(), builderFunc).ToString();\n        }\n\n        public static string ConcatenateLines(this IEnumerable<string> strings)\n        {\n            return Concatenate(strings, (StringBuilder builder, string nextValue) => builder.AppendLine(nextValue));\n        }\n\n        public static string Concatenates(this IEnumerable<string> strings, string separator)\n        {\n            return Concatenate(strings,\n                (StringBuilder builder, string nextValue) => builder.Append(nextValue).Append(separator));\n        }\n\n        public static string Concatenates(this IEnumerable<string> strings)\n        {\n            return Concatenate(strings, (builder, nextValue) => builder.Append(nextValue));\n        }\n\n        public static string Replace(this string oldValue, string start, string end, string newValue)\n        {\n            var startIndex = oldValue.IndexOf(start, StringComparison.Ordinal);\n            if (startIndex == -1) return oldValue;\n            var endIndex = oldValue.IndexOf(end, startIndex + start.Length, StringComparison.Ordinal);\n            if (endIndex == -1) return oldValue;\n            var sb = new StringBuilder();\n            sb.Append(oldValue[..startIndex]);\n            sb.Append(newValue);\n            sb.Append(oldValue[(endIndex + end.Length)..]);\n            return sb.ToString();\n        }\n\n        public static string Substring(this ReadOnlySpan<char> buffer, ReadOnlySpan<char> start, ReadOnlySpan<char> end)\n        {\n            var startIndex = buffer.IndexOf(start);\n            if (startIndex == -1)\n            {\n                return string.Empty;\n            }\n\n            var endIndex = buffer.Slice(startIndex + start.Length).IndexOf(end);\n            if (endIndex == -1)\n            {\n                return string.Empty;\n            }\n\n            endIndex += startIndex + start.Length;\n\n            return buffer.Slice(startIndex + start.Length, endIndex - startIndex - start.Length).ToString();\n        }\n    }",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16450616703189452"
        },
        "UpdatedTime": {
            "$numberLong": "16450616703189452"
        }
    },
    {
        "_id": 47,
        "Title": "程序 下载书籍",
        "Content": "// 程序 下载书籍\n\npackage com.company;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.zip.GZIPInputStream;\n\n\npublic class Main {\n    public static String readString(HttpURLConnection connection) {\n        InputStream in;\n        BufferedReader reader = null;\n        try {\n            String contentEncoding = connection.getHeaderField(\"Content-Encoding\");\n            if (contentEncoding != null && contentEncoding.equals(\"gzip\")) {\n                in = new GZIPInputStream(connection.getInputStream());\n            } else {\n                in = connection.getInputStream();\n            }\n            /*\n            \"implementation group\": \"org.brotli', name: 'dec', version: '0.1.1\",\n            else if (contentEncoding != null && contentEncoding.equals(\"br\")) {\n                in = new BrotliInputStream(connection.getInputStream());\n            } */\n            //  if (contentEncoding != null && contentEncoding.equals(\"br\")) {\n            //in = new BrotliInputStream(connection.getInputStream());\n            //  }\n            reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n            String line;\n            StringBuilder sb = new StringBuilder();\n            while ((line = reader.readLine()) != null) {\n                sb.append(line).append(\"\\r\\n\");\n            }\n            return sb.toString();\n        } catch (Exception ignored) {\n        } finally {\n            try {\n                if (reader != null)\n                    reader.close();\n            } catch (Exception ignored) {\n            }\n        }\n        return null;\n    }\n\n    public static String getString(String uri, String[][] headers) throws IOException {\n        URL url = new URL(uri);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        urlConnection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36\");\n        if (headers != null) {\n            for (String[] header : headers) {\n                urlConnection.setRequestProperty(header[0], header[1]);\n            }\n        }\n        urlConnection.setInstanceFollowRedirects(false);\n        int code = urlConnection.getResponseCode();\n        if (code < 400 && code >= 200) {\n            return readString(urlConnection);\n        }\n        return null;\n    }\n\n    public static String substringBefore(String string, char delimiter) {\n        int index = string.indexOf(delimiter);\n        if (index != -1) return string.substring(0, index);\n        return string;\n    }\n\n    public static String getValidFileName(String s) {\n        char[] InvalidFileNameChars = {'\\\"', '<', '>', '|', '\\0', (char) 1, (char) 2, (char) 3, (char) 4, (char) 5, (char) 6, (char) 7, (char) 8, (char) 9, (char) 10, (char) 11, (char) 12, (char) 13, (char) 14, (char) 15, (char) 16, (char) 17, (char) 18, (char) 19, (char) 20, (char) 21, (char) 22, (char) 23, (char) 24, (char) 25, (char) 26, (char) 27, (char) 28, (char) 29, (char) 30, (char) 31, ':', '*', '?', '\\\\', '/'};\n        for (char invalidFileNameChar : InvalidFileNameChars) {\n            s = s.replace(invalidFileNameChar, ' ');\n        }\n        return s;\n    }\n\n    public static File makeDirectory(String title) {\n        title = getValidFileName(title);\n        File dir = new File(title);\n        if (!dir.exists()) {\n            dir.mkdir();\n        }\n        return dir;\n    }\n\n    public static String substring(String string, String first, String second) {\n        int start = string.indexOf(first);\n        if (start == -1) return null;\n        start += first.length();\n        int end = string.indexOf(second, start);\n        if (end == -1) return null;\n        return string.substring(start, end);\n    }\n\n    public static String getString(String href) throws IOException {\n        String response = getString(\n                \"https://aabook.cc/\" + href,\n                null\n        );\n        String id = substring(\n                response, \"+chapid+\\\"\", \"\\\",\");\n        String uri = String.format(\"https://aabook.cc/_getcontent.php?id=%s%s\",\n                substring(href, \"-\", \".\")\n                , id);\n        response = getString(\n                uri,\n                null\n        );\n        return response;\n    }\n\n    public static String substringBeforeLast(String string, String delimiter) {\n        int index = string.lastIndexOf(delimiter);\n        if (index != -1) return string.substring(0, index);\n        return string;\n    }\n\n    public static String substringAfter(String string, String delimiter) {\n        int index = string.indexOf(delimiter);\n        if (index != -1) return string.substring(index + delimiter.length());\n        return string;\n    }\n\n    public static void writeAllText(String path, String contents) throws IOException {\n        FileOutputStream outputStream = new FileOutputStream(path);\n        outputStream.write(contents.getBytes(StandardCharsets.UTF_8));\n        outputStream.close();\n    }\n\n    public static void writeFile(File dir, int index, String title, String contents) throws IOException {\n        String string = contents.replaceAll(\"<[^>]*? class='[^']*?'>[^>]*?>\", \"\");\n        String html = \"<!DOCTYPE html>\\n\" +\n                \"<html lang=\\\"en\\\">\\n\" +\n                \"\\n\" +\n                \"<head>\\n\" +\n                \"    <meta charset=\\\"UTF-8\\\">\\n\" +\n                \"    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n\" +\n                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\" +\n                \"    <title>\" + title\n                + \"</title>\\n\" +\n                \"</head>\\n\" +\n                \"\\n\" +\n                \"<body>\"\n                + substringBeforeLast(substringAfter(string, \"</style>\"), \"<script\")\n                + \"</body>\\n\" +\n                \"\\n\" +\n                \"</html>\";\n        writeAllText(\n                new File(dir, String.format(\"%03d %s%s\", index, title, \".bak\")).getAbsolutePath(), contents\n        );\n        writeAllText(\n                new File(dir, String.format(\"%03d %s%s\", index, title, \".html\")).getAbsolutePath(), html\n        );\n    }\n\n    public static void downloadBook(String url) throws IOException {\n        // https://mvnrepository.com/artifact/org.jsoup/jsoup\n        String contents = getString(url, null);\n        if (contents == null) return;\n        Document document = Jsoup.parse(contents);\n        String bookTitle = substringBefore(document.title(), ' ');\n        File dir = makeDirectory(bookTitle);\n        int i = 0;\n        Elements elements = document.select(\".section_list a\");\n        System.out.println(\"已找到章节数量：\" + elements.size());\n        for (Element element : elements) {\n            System.out.println(element.text());\n            i++;\n            String href = element.attr(\"href\");\n            String title = element.text();\n            File file = new File(dir, String.format(\"%03d %s%s\", i, title, \".html\"));\n            if (file.exists()) continue;\n            writeFile(dir, i, getValidFileName(title), getString(href));\n\n        }\n\n    }\n\n    public static void main(String[] args) {\n        String[] links = (\"https://aabook.cc/book.php?id=1524\\n\" +\n                \"https://aabook.cc/book.php?id=1055\\n\" +\n                \"https://aabook.cc/book.php?id=1084\\n\" +\n                \"https://aabook.cc/book.php?id=823\\n\" +\n                \"https://aabook.cc/book.php?id=822\\n\" +\n                \"https://aabook.cc/book.php?id=821\\n\" +\n                \"https://aabook.cc/book.php?id=820\\n\" +\n                \"https://aabook.cc/book.php?id=56\\n\" +\n                \"https://aabook.cc/book.php?id=3381\\n\" +\n                \"https://aabook.cc/book.php?id=2079\\n\" +\n                \"https://aabook.cc/book.php?id=507\\n\").split(\"[\\r\\n]+\");\n        ExecutorService executors = Executors.newFixedThreadPool(3);\n        for (String link : links) {\n            executors.submit(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        downloadBook(String.format(\"https://aabook.cc/chapterList-%s.html\",\n                                substringAfter(link,\"=\")));\n                    } catch (IOException e) {\n                        System.out.println(e);\n                    }\n                }\n            });\n        }\n        try {\n            System.in.read();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16451502541274430"
        },
        "UpdatedTime": {
            "$numberLong": "16451502673763546"
        }
    },
    {
        "_id": 48,
        "Title": "文件",
        "Content": "// 文件\n\nfunction humanFileSize(size)\n{\n    if (size === 0)\n        return '0';\n    var i = Math.floor(Math.log(size) / Math.log(1024));\n    return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i]\n}",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16456774738639437"
        },
        "UpdatedTime": {
            "$numberLong": "16456774738639437"
        }
    },
    {
        "_id": 49,
        "Title": "上传文件",
        "Content": "// 上传文件\n\n\nfunction uploadFile(options) {\n    const fn = (file) => {\n        try {\n            const progresscallback = options.progresscallback;\n            const successcallback = options.success;\n            const errorcallback = options.error;\n            const url = options.url;\n            const xhr = new XMLHttpRequest();\n            xhr.upload.currentProgress = 0;\n            xhr.upload.startData = 0;\n            if (progresscallback) {\n                xhr.upload.addEventListener('progress', progresscallback);\n            }\n            if (successcallback) {\n                // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange\n                xhr.addEventListener('readystatechange',\n                    () => {\n                        if (xhr.readyState === XMLHttpRequest.DONE) {\n                            var status = xhr.status;\n                            if (status === 0 || (status >= 200 && status < 400)) {\n                                successcallback(xhr);\n                            } else {\n                                if (errorcallback)\n                                    errorcallback(xhr);\n                            }\n                        }\n                    });\n            }\n            xhr.open('POST', url, true);\n            //xhr.setRequestHeader('X-File-Size', file.size);\n            //xhr.setRequestHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, PUT');\n            var formData = new FormData();\n            formData.append('image', file, file.name);\n            xhr.send(formData);\n        } catch (error) {\n            if (options.errorcallback)\n                options.errorcallback(error);\n        }\n    }\n    const uploadControl = document.createElement('INPUT');\n    uploadControl.style.display = 'fixed';\n    uploadControl.style.left = '-1000px';\n    uploadControl.accept = \"image/*\";\n    uploadControl.type = 'file'\n    uploadControl.click();\n    uploadControl.addEventListener('change', async ev => {\n        fn(uploadControl.files[0]);\n        uploadControl.remove();\n    })\n}",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16458008763623768"
        },
        "UpdatedTime": {
            "$numberLong": "16458008965488250"
        }
    },
    {
        "_id": 50,
        "Title": "腾讯云函数",
        "Content": "腾讯云函数\n\nconst https = require('https');\n\n//////////////////////////\n\nconst USER_AGENT = 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1';\n\n//////////////////////////\n\n\nfunction generateIP() {\n    let randomIP = \"\";\n\n    for (let i = 0; i < 4; i++) {\n        randomIP += Math.floor(Math.random() * (+255 - +1)) + +1;\n        if (i !== 3) randomIP += \".\";\n    }\n\n    return randomIP;\n}\n\n\nfunction getStringAsync(args, isRaw) {\n\n    const options = Object.assign({\n        port: 443,\n\n    }, args);\n    if (!options.headers) {\n        options.headers = {\n            'User-Agent': USER_AGENT\n        };\n    } else if (!options.headers['User-Agent']) {\n        options.headers['User-Agent'] = USER_AGENT;\n    }\n    return new Promise((reslove, reject) => {\n\n        const req = https.request(options, res => {\n\n            //let data = '';\n            const chunks = [];\n            res.on('data', chunk => {\n                //data += d;\n                chunks.push(chunk);\n            });\n            res.on('end', () => {\n                const body = Buffer.concat(chunks);\n                if (isRaw) {\n                    reslove(body);\n                } else {\n                    reslove(body.toString());\n                }\n            });\n        });\n        req.on('error', error => {\n            reject(error);\n        })\n        req.on('timeout', () => {\n            reject(new Error('timeout'));\n        });\n        req.end();\n    })\n}\n\nfunction fetchStringAsync(args, isRaw, data) {\n\n    const options = Object.assign({\n        port: 80,\n\n    }, args);\n    if (!options.headers) {\n        options.headers = {\n            'User-Agent': USER_AGENT\n        };\n    } else if (!options.headers['User-Agent']) {\n        options.headers['User-Agent'] = USER_AGENT;\n    }\n    return new Promise((reslove, reject) => {\n\n        const req = require('http').request(options, res => {\n\n            //let data = '';\n            const chunks = [];\n            res.on('data', chunk => {\n                //data += d;\n                chunks.push(chunk);\n            });\n            res.on('end', () => {\n                const body = Buffer.concat(chunks);\n                if (isRaw) {\n                    reslove(body);\n                } else {\n                    reslove(body.toString());\n                }\n            });\n        });\n        req.on('error', error => {\n            reject(error);\n        })\n        req.on('timeout', () => {\n            reject(new Error('timeout'));\n        });\n        if (data) {\n            req.write(data);\n        }\n        req.end();\n    })\n}\n\nfunction getHeadersAsync(args) {\n    const options = Object.assign({\n        port: 443,\n\n    }, args);\n    if (!options.headers) {\n        options.headers = {\n            'User-Agent': USER_AGENT\n        };\n    } else if (!options.headers['User-Agent']) {\n        options.headers['User-Agent'] = USER_AGENT;\n    }\n    return new Promise((reslove, reject) => {\n\n        const req = https.request(options, res => {\n            reslove(res.headers);\n        });\n        req.on('error', error => {\n            reject(error);\n        })\n        req.end();\n    })\n}\n\nfunction fetchHeadersAsync(args) {\n    const options = Object.assign({\n        port: 80,\n\n    }, args);\n    if (!options.headers) {\n        options.headers = {\n            'User-Agent': USER_AGENT\n        };\n    } else if (!options.headers['User-Agent']) {\n        options.headers['User-Agent'] = USER_AGENT;\n    }\n    return new Promise((reslove, reject) => {\n\n        const req = require('http').request(options, res => {\n            reslove(res.headers);\n        });\n        req.on('error', error => {\n            reject(error);\n        })\n        req.end();\n    })\n}\n\nfunction splitUrl(string) {\n    if (!string) return null;\n    const start = string.indexOf('://');\n    if (start === -1) return null;\n    let end = string.indexOf('/', start + 3);\n    if (end === -1) return null;\n    return [string.substring(start + 3, end), string.substring(end)];\n}\n\n\nfunction substring(string, first, second) {\n    let start = string.indexOf(first);\n    if (start === -1) return null;\n    start += first.length;\n    const end = string.indexOf(second, start);\n    if (end === -1) return null;\n    return string.substring(start, end);\n}\n\n\nfunction substringAfter(string, delimiter, missingDelimiterValue) {\n    const index = string.indexOf(delimiter);\n    if (index === -1) {\n        return missingDelimiterValue || string;\n    } else {\n        return string.substring(index + delimiter.length);\n    }\n}\n\n\nfunction substringAfterLast(string, delimiter, missingDelimiterValue) {\n    const index = string.lastIndexOf(delimiter);\n    if (index === -1) {\n        return missingDelimiterValue || string;\n    } else {\n        return string.substring(index + delimiter.length);\n    }\n}\n\n\nfunction substringBefore(string, delimiter, missingDelimiterValue) {\n    const index = string.indexOf(delimiter);\n    if (index === -1) {\n        return missingDelimiterValue || string;\n    } else {\n        return string.substring(0, index);\n    }\n}\n\n\nfunction substringBeforeLast(string, delimiter, missingDelimiterValue) {\n    const index = string.lastIndexOf(delimiter);\n    if (index === -1) {\n        return missingDelimiterValue || string;\n    } else {\n        return string.substring(0, index);\n    }\n}\n\n\nfunction substringInclude(string, first, second) {\n    let start = string.indexOf(first);\n    if (start === -1) return null;\n    const end = string.indexOf(second, start + first.length);\n    if (end === -1) return null;\n    return string.substring(start, end + second.length);\n}\n\nfunction substringExclude(string, first, second) {\n    let start = string.indexOf(first);\n    if (start === -1) return null;\n    const end = string.indexOf(second, start + first.length);\n    if (end === -1) return null;\n    return string.substring(start + first.length, end);\n}\n\nfunction timestamp() {\n    return ~~(+new Date / 1e3);\n}\n\nfunction hmsToSecondsOnly(str) {\n    var p = str.split(':'),\n        s = 0, m = 1;\n\n    while (p.length > 0) {\n        s += m * parseInt(p.pop(), 10);\n        m *= 60;\n    }\n\n    return s;\n}\n\nmodule.exports = {\n    generateIP,\n    getStringAsync,\n    splitUrl,\n    substring,\n    substringAfter,\n    substringAfterLast,\n    substringBefore,\n    substringBeforeLast,\n    substringInclude,\n    USER_AGENT,\n    getHeadersAsync,\n    timestamp,\n    fetchStringAsync,\n    hmsToSecondsOnly,\n    fetchHeadersAsync,\n    substringExclude\n}\n\n\nconst express = require('express');\nconst app = express();\nconst share = require('./share');\n\napp.get(`/translate`, async(req, res) => \n    {\n        const q = req.query['q'] || '';\n        const to = req.query['to'] || 'en';\n        const json = await share.getStringAsync({\n                method: 'GET',\n                hostname: 'translate.google.com',\n                path: `/translate_a/single?client=gtx&sl=auto&tl=${to}&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=${encodeURIComponent(q)}`,\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36\",\n                    //\"Accept-Encoding\": \"gzip, deflate, br\"\n                }\n            });\n            res.setHeader('content-type', 'text/plain');\n        res.send(json);\n    });",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16458501903331707"
        },
        "UpdatedTime": {
            "$numberLong": "16458501903331707"
        }
    },
    {
        "_id": 51,
        "Title": "云函数谷歌翻译",
        "Content": "云函数谷歌翻译\n\nconst express = require('express');\nconst app = express();\nconst https = require('https');\n\n\nfunction getStringAsync(args, isRaw) {\n\n  const options = Object.assign({\n      port: 443,\n\n  }, args);\n  if (!options.headers) {\n      options.headers = {\n          'User-Agent': USER_AGENT\n      };\n  } else if (!options.headers['User-Agent']) {\n      options.headers['User-Agent'] = USER_AGENT;\n  }\n  return new Promise((reslove, reject) => {\n\n      const req = https.request(options, res => {\n\n          //let data = '';\n          const chunks = [];\n          res.on('data', chunk => {\n              //data += d;\n              chunks.push(chunk);\n          });\n          res.on('end', () => {\n              const body = Buffer.concat(chunks);\n              if (isRaw) {\n                  reslove(body);\n              } else {\n                  reslove(body.toString());\n              }\n          });\n      });\n      req.on('error', error => {\n          reject(error);\n      })\n      req.on('timeout', () => {\n          reject(new Error('timeout'));\n      });\n      req.end();\n  })\n}\napp.get(`/translate`, async(req, res) => \n    {\n        const q = req.query['q'] || '';\n        const to = req.query['to'] || 'en';\n        const json = await getStringAsync({\n                method: 'GET',\n                hostname: 'translate.google.com',\n                path: `/translate_a/single?client=gtx&sl=auto&tl=${to}&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=${encodeURIComponent(q)}`,\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36\",\n                    //\"Accept-Encoding\": \"gzip, deflate, br\"\n                }\n            });\n            res.setHeader('content-type', 'text/plain');\n        res.send(json);\n    });",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16458504674741442"
        },
        "UpdatedTime": {
            "$numberLong": "16458504674741442"
        }
    },
    {
        "_id": 52,
        "Title": "云函数谷歌翻译",
        "Content": "云函数谷歌翻译\n\nconst express = require('express');\nconst app = express();\nconst https = require('https');\n\nconst USER_AGENT = 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1';\nfunction getStringAsync(args, isRaw) {\n\n  const options = Object.assign({\n      port: 443,\n\n  }, args);\n  if (!options.headers) {\n      options.headers = {\n          'User-Agent': USER_AGENT\n      };\n  } else if (!options.headers['User-Agent']) {\n      options.headers['User-Agent'] = USER_AGENT;\n  }\n  return new Promise((reslove, reject) => {\n\n      const req = https.request(options, res => {\n\n          //let data = '';\n          const chunks = [];\n          res.on('data', chunk => {\n              //data += d;\n              chunks.push(chunk);\n          });\n          res.on('end', () => {\n              const body = Buffer.concat(chunks);\n              if (isRaw) {\n                  reslove(body);\n              } else {\n                  reslove(body.toString());\n              }\n          });\n      });\n      req.on('error', error => {\n          reject(error);\n      })\n      req.on('timeout', () => {\n          reject(new Error('timeout'));\n      });\n      req.end();\n  })\n}\napp.get(`/translate`, async(req, res) => \n    {\n        const q = req.query['q'] || '';\n        const to = req.query['to'] || 'en';\n        const json = await getStringAsync({\n                method: 'GET',\n                hostname: 'translate.google.com',\n                path: `/translate_a/single?client=gtx&sl=auto&tl=${to}&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=${encodeURIComponent(q)}`,\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36\",\n                    //\"Accept-Encoding\": \"gzip, deflate, br\"\n                }\n            });\n            res.setHeader('content-type', 'text/plain');\n        res.send(json);\n    });\n\n    \napp.get('/404', (req, res) => {\n    res.status(404).send('Not found');\n  });\n  \n  app.get('/500', (req, res) => {\n    res.status(500).send('Server Error');\n  });\n  \n  // Error handler\n  app.use(function (err, req, res, next) {\n    console.error(err);\n    res.status(500).send('Internal Serverless Error');\n  });\n  \n  // Web 类型云函数，只能监听 9000 端口\n  app.listen(9000, () => {\n    console.log(`Server start on http://localhost:9000`);\n  });",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16458504756645691"
        },
        "UpdatedTime": {
            "$numberLong": "16458601264167584"
        }
    },
    {
        "_id": 53,
        "Title": "组件 Toast",
        "Content": "组件 Toast\n\nclass CustomToast extends HTMLElement {\n    static get observedAttributes() {\n        return ['message'];\n    }\n    // Fires when an instance of the element is created or updated\n    constructor() {\n        super();\n        this.root = this.attachShadow({\n            mode: 'open'\n        });\n        const style = document.createElement('style');\n        style.textContent = CustomToast.getStyle();\n        this.root.appendChild(style);\n        const c3Toast = document.createElement('DIV');\n        c3Toast.setAttribute('class', 'c3-toast');\n\n        const notificationActionRenderer = document.createElement('DIV');\n        notificationActionRenderer.setAttribute('class', 'notification-action-renderer');\n        const notificationActionResponseText = document.createElement('DIV');\n        notificationActionResponseText.setAttribute('class', 'notification-action-response-text');\n        notificationActionRenderer.appendChild(notificationActionResponseText);\n        c3Toast.appendChild(notificationActionRenderer);\n        this.root.appendChild(c3Toast);\n\n        this.c3Toast = c3Toast;\n        this.notificationActionResponseText = notificationActionResponseText;\n        this.messages = [];\n        this.timer = 0;\n    }\n\n    // Fires when an instance was inserted into the document\n    connectedCallback() {}\n\n    // Fires when an instance was removed from the document\n    disconnectedCallback() {}\n\n    showMessage() {\n        if (this.messages.length && !this.showing) {\n            const message = this.messages.shift();\n            this.notificationActionResponseText.textContent = message;\n            this.c3Toast.setAttribute('dir', 'in');\n            this.showing = true;\n            if (this.timer) {\n                clearTimeout(this.timer);\n            }\n            this.timer = setTimeout(() => {\n                this.c3Toast.setAttribute('dir', 'out');\n                setTimeout(() => {\n                    this.showing = false;\n                    this.showMessage();\n                }, 195);\n            }, 3000);\n        }\n    }\n    // Fires when an attribute was added, removed, or updated\n    attributeChangedCallback(attrName, oldVal, newVal) {\n        if (attrName === 'message') {\n            this.messages.push(newVal);\n            this.showMessage();\n        }\n    }\n\n    // Fires when an element is moved to a new document\n    adoptedCallback() {}\n    static getTemplate(value) {\n        return `\n        ${CustomToast.getStyle()}\n        <div>\n            ${value}\n        </div>\n        `;\n    }\n    static getStyle() {\n        return `\n        .c3-toast[dir=\"in\"] {\n            transition: margin 225ms cubic-bezier(0.0, 0.0, 0.2, 1);\n            margin-bottom: 0;\n        }\n        \n        .c3-toast[dir=\"out\"] {\n            transition: margin 195ms cubic-bezier(0.4, 0.0, 1, 1);\n        }\n        \n        .c3-toast {\n            display: block;\n            position: fixed;\n            z-index: 4;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            box-sizing: border-box;\n            padding: 14px 24px;\n            font-size: 1.4rem;\n            color: #ffffff;\n            background: hsl(0, 0%, 20%);\n            will-change: transform;\n            margin-bottom: -100%;\n        }\n        \n        .notification-action-renderer {\n            display: flex;\n            align-items: center;\n        }\n        \n        .notification-action-response-text {\n            flex-grow: 1;\n            padding-right: 1rem;\n            font-size:14px;\n        }\n        \n        `;\n    }\n}\ncustomElements.define('custom-toast', CustomToast);\n// <custom-toast id=\"toast\"></custom-toast>\n// <script src=\"./components/toast.js\"></script>\n// document.getElementById('toast').setAttribute('message','');",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16461146362980704"
        },
        "UpdatedTime": {
            "$numberLong": "16461146362980704"
        }
    },
    {
        "_id": 54,
        "Title": "组件",
        "Content": "// 组件\n\n(function () {\n    class CustomElement extends HTMLElement {\n        /*static get observedAttributes() {\n            return ['message'];\n        }*/\n\n        // Fires when an instance of the element is created or updated\n        constructor() {\n            super();\n            this.root = this.attachShadow({\n                mode: 'open'\n            });\n            const style = document.createElement('style');\n            style.textContent = CustomToast.getStyle();\n            this.root.appendChild(style);\n\n            this.dispatchEvent(new CustomEvent(\"\", {\n                detail: {}\n            }));\n        }\n\n        // Fires when an instance was inserted into the document\n        connectedCallback() {\n        }\n\n        // Fires when an instance was removed from the document\n        disconnectedCallback() {\n        }\n\n        // Fires when an attribute was added, removed, or updated\n        /*attributeChangedCallback(attrName, oldVal, newVal) {\n            if (attrName === 'message') {\n            }\n        }*/\n\n        // Fires when an element is moved to a new document\n        adoptedCallback() {\n        }\n\n    }\n\n// <custom-element></custom-element> \n // document.querySelector('custom-element');\n    customElements.define('custom-element', CustomElement);\n})();",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16461148751108473"
        },
        "UpdatedTime": {
            "$numberLong": "16461151712636199"
        }
    },
    {
        "_id": 55,
        "Title": "领英",
        "Content": "领英\n\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.*;\nimport java.net.Proxy.Type;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\npublic class Main {\n    public static final char[] InvalidFileNameChars = {'\\\"', '<', '>', '|', '\\0', (char) 1, (char) 2, (char) 3,\n            (char) 4, (char) 5, (char) 6, (char) 7, (char) 8, (char) 9, (char) 10, (char) 11, (char) 12, (char) 13,\n            (char) 14, (char) 15, (char) 16, (char) 17, (char) 18, (char) 19, (char) 20, (char) 21, (char) 22,\n            (char) 23, (char) 24, (char) 25, (char) 26, (char) 27, (char) 28, (char) 29, (char) 30, (char) 31, ':', '*',\n            '?', '\\\\', '/'};\n    private static final String JSESSIONID = \"ajax:5229668508755914729\";\n    private static final String LI_AT = \"AQEGAGMBAAAAAAavdaUAAAF9jPDfAwAAAX2w_WMDTQAARnVybjpsaTplbnRlcnByaXNlUHJvZmlsZToodXJuOmxpOmVudGVycHJpc2VBY2NvdW50Ojc2Mjc5NDY4LDEzMDYzMzc3OSmWcUJ3OKXvaUhDL8ZAt1uXkowPVxcuPi2xJEV0YGldPSypdZYvmjj2D7MV6xJFp2nmCqQHcBUpLPGiEjSXAOfqEHk0M1pLhDQRst-hqIQpEGfen1Y\";\n    private static File mDirectory = new File(\"DaVinci Resolve Software Features and Workflows\");\n    private static String[] mSlugs = new String[]{\n            \"https://www.linkedin.com/learning/creativity-tips-for-all-weekly?u=76279468\",\n            \"https://www.linkedin.com/learning/revit-lt-2022-essential-training?u=76279468\",\n            // \"https://www.linkedin.com/learning/illustrator-one-on-one-mastery?u=76279468\",\n            // \"https://www.linkedin.com/learning/illustrator-2022-essential-training?u=76279468\",\n            // \"https://www.linkedin.com/learning/illustrator-one-on-one-fundamentals?u=76279468\",\n            // \"https://www.linkedin.com/learning/learn-animation-production-in-blender-2-9?u=76279468\",\n//            \"https://www.linkedin.com/learning/c-sharp-advanced-practices?u=76279468\",\n//            \"https://www.linkedin.com/learning/java-concurrency-troubleshooting-latency-and-throughput?u=76279468\",\n//            \"https://www.linkedin.com/learning/concurrent-programming-with-android-threads-workers-and-kotlin-coroutines?u=76279468\",\n//            \"https://www.linkedin.com/learning/advanced-c-sharp-thread-safe-data-with-concurrent-collections?u=76279468\",\n//            \"https://www.linkedin.com/learning/python-parallel-and-concurrent-programming-part-1?u=76279468\",\n//            \"https://www.linkedin.com/learning/python-parallel-and-concurrent-programming-part-2?u=76279468\",\n//            \"https://www.linkedin.com/learning/vanilla-javascript-web-workers?u=76279468\",\n//            \"https://www.linkedin.com/learning/java-ee-concurrency-and-multithreading?u=76279468\",\n//            \"https://www.linkedin.com/learning/rxjava-design-patterns-for-android-developers?u=76279468\",\n//            \"https://www.linkedin.com/learning/advanced-threading-in-c-sharp?u=76279468\",\n//            \"https://www.linkedin.com/learning/threading-in-c-sharp?u=76279468\",\n//            \"https://www.linkedin.com/learning/windows-performance-tools-thread-analysis-with-intel-vtune-amplifier?u=76279468\",\n//            \"https://www.linkedin.com/learning/windows-performance-tools-memory-leak-analysis-with-intel-inspector?u=76279468\",\n//            \"https://www.linkedin.com/learning/windows-performance-tools-deadlock-analysis-with-intel-vtune-amplifier?u=76279468\",\n//            \"https://www.linkedin.com/learning/learning-java-threads?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-studio-essential-training-14266841?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-development-essential-training-5-storage-and-databases?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-development-retrofit-with-kotlin?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-development-essential-training-4-working-with-data?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-development-essential-training-3-navigation?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-development-data-binding?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-development-essential-training-2-user-interface-design?u=76279468\",\n//            \"https://www.linkedin.com/learning/building-an-android-app-with-jetpack-libraries?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-development-essential-training-1-your-first-app?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-app-development-communicating-with-the-user-2?u=76279468\",\n//            \"https://www.linkedin.com/learning/kotlin-essential-training?u=76279468\",\n//            \"https://www.linkedin.com/learning/android-development-audio-and-video?u=76279468\",\n//            \"https://www.linkedin.com/learning/maya-camera-techniques?u=76279468\",\n//            \"https://www.linkedin.com/learning/figure-drawing-the-portrait?u=76279468\"\n            // \"https://www.linkedin.com/learning/advanced-nlp-with-python-for-machine-learning?u=76279468\",\n            // \"https://www.linkedin.com/learning/compositing-3d-render-passes?u=76279468\",\n            // \"https://www.linkedin.com/learning/photoshop-one-on-one-mastery?u=76279468\",\n            // \"https://www.linkedin.com/learning/multi-shot-photo-techniques-in-photoshop-and-lightroom?u=76279468\",\n            // \"https://www.linkedin.com/learning/photoshop-one-on-one-advanced?u=76279468\",\n            // \"https://www.linkedin.com/learning/batch-processing-photos-to-save-time?u=76279468\",\n            // \"https://www.linkedin.com/learning/learning-print-production-photoshop-illustrator-and-indesign?u=76279468\",\n            // \"https://www.linkedin.com/learning/enhancing-images-with-artificial-intelligence-ai?u=76279468\",\n            // \"https://www.linkedin.com/learning/introduction-to-graphic-design-photoshop?u=76279468\",\n            // \"https://www.linkedin.com/learning/photoshop-one-on-one-fundamentals?u=76279468\",\n            // \"https://www.linkedin.com/learning/linux-shells-and-processes-14269702?u=76279468\",\n            // \"https://www.linkedin.com/learning/data-visualization-a-lesson-and-listen-series?u=76279468\",\n            // \"https://www.linkedin.com/learning/drawing-foundations-figure?u=76279468\",\n            // \"https://www.linkedin.com/learning/drawing-2-point-perspective?u=76279468\",\n            // \"https://www.linkedin.com/learning/figure-drawing-tonal-rendering?u=76279468\",\n            // \"https://www.linkedin.com/learning/photoshop-2021-one-on-one-mastery?u=76279468\",\n            // \"https://www.linkedin.com/learning/illustrator-2021-one-on-one-advanced?u=76279468\",\n            // \"https://www.linkedin.com/learning/photoshop-2021-one-on-one-advanced?u=76279468\",\n            // \"https://www.linkedin.com/learning/illustrator-2021-one-on-one-fundamentals?u=76279468\",\n            // \"https://www.linkedin.com/learning/photoshop-2021-one-on-one-fundamentals?u=76279468\"\n    };\n\n    public static String formatInterval(final long interval, boolean millisecs) {\n        final long hr = TimeUnit.MILLISECONDS.toHours(interval);\n        final long min = TimeUnit.MILLISECONDS.toMinutes(interval) % 60;\n        final long sec = TimeUnit.MILLISECONDS.toSeconds(interval) % 60;\n        final long ms = TimeUnit.MILLISECONDS.toMillis(interval) % 1000;\n        if (millisecs) {\n            return String.format(\"%02d:%02d:%02d,%03d\", hr, min, sec, ms);\n        } else {\n            return String.format(\"%02d:%02d:%02d\", hr, min, sec);\n        }\n    }\n\n    public static void main(String[] args) {\n        var length = \"/learning/\".length();\n        String[] slugs = (\n\n                                 \"https://www.linkedin.com/learning/maya-natural-environments?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/modo-product-visualization-shoe-rendering?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/maya-and-arnold-exterior-lighting-and-rendering?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/creating-a-finished-character-animation-in-blender-2-9?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/3ds-max-rendering-for-compositing-in-v-ray-next?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/maya-shader-networks?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/maya-and-arnold-architectural-materials?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/maya-facial-rigging?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/maya-advanced-materials-2?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/zbrush-tips-and-tricks?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/learning-3ds-max-2021?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/maya-character-rigging?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/blender-2-8-character-creation?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/3ds-max-3d-camera-techniques-for-archviz?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/cinema-4d-weekly?u=76279468\\n\"\n\n//                                \"https://www.linkedin.com/learning/kubernetes-your-first-project?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/circuitpython-connecting-a-robot-cat-to-the-internet?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/react-native-ecosystem-and-workflow-14359050?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/computer-vision-on-the-raspberry-pi-4?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/search?contentBy=urn%3Ali%3Aorganization%3A1337&u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/from-react-to-react-native-14332800?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/building-transparency-in-photoshop?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/motion-control-3d-bringing-photos-to-life-in-three-dimensions-with-after-effects-and-photoshop-cc-2?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/photoshop-for-fashion-design-2-rendering-techniques?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/photoshop-for-fashion-design-1-the-basics?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/photoshop-for-fashion-warping-pattern-fills?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/illustrator-for-fashion-design-advanced-drawing-flats?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/illustrator-for-fashion-design-drawing-flats-2?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/illustrator-for-fashion-design-creating-brushes?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/animating-in-photoshop?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/photographing-for-compositing-in-photoshop?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/photoshop-editing-video-and-creating-slideshows-2?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/fixing-a-distracting-background-in-photoshop?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/creating-printable-3d-art-in-photoshop?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/creating-commercial-illustrations?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/photoshop-creative-blurring?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/creating-a-goblin-using-textures-and-compositing-in-photoshop?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/photoshop-customizing-brushes?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/using-panoramic-photos-for-motion-graphics-and-visual-effects?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/drawing-and-painting-in-photoshop?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/drawing-vector-graphics-iconography?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/introduction-to-3d-in-after-effects?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/drawing-vector-graphics-isometric-illustration?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/drawing-vector-graphics-painting-with-vectors?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/designing-a-typographic-art-deco-postcard?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/illustrator-drawing-without-the-pen-tool?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/designing-a-channel-ident?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/drawing-vector-graphics-color-and-detail-14041755?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/introduction-to-graphic-design-illustrator?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/creating-icons-with-illustrator-3?u=76279468\\n\"+\n//\n//                                \"https://www.linkedin.com/learning/photoshop-advanced-adjustment-layers-and-blend-modes?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/user-experience-ux-for-non-designers?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/designing-characters-using-adobe-fresco?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/learning-astute-graphics-for-illustrator-3?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/lightroom-quick-tips-portraits?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/ux-for-web-forms?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/motion-graphics-for-social-media?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/photoshop-tips-and-quick-fixes-2?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/mastering-adobe-camera-raw?u=76279468\\n\"+\n//                                \"https://www.linkedin.com/learning/learning-logo-design?u=76279468\\n\"+\n//\n//                                \"https://www.linkedin.com/learning/pixel-playground?u=76279468\"\n//                        \"https://www.linkedin.com/learning/advanced-photoshop-blending-masking-and-compositing?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/advanced-photoshop-blending-masking-and-compositing?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/photoshop-masking-and-compositing-fundamentals?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/designing-gradient-dot-patterns-with-illustrator?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/designing-and-animating-a-mind-bending-illusion?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/creating-and-adapting-a-logo?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/learning-the-adobe-pen-tool?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/adobe-pen-tool-mastery?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/photoshop-channels-and-masks?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/introducing-photoshop?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/introducing-illustrator?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/learning-photoshop-portrait-retouching?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/retouching-and-color-correcting-photography-portraits?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/lightroom-for-faces?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/up-close-portrait-photography-start-to-finish?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/photoshop-restoration-scanning-oversized-photos?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/retouching-a-studio-portrait-in-photoshop?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/retouching-bridal-portraits-with-photoshop?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/figure-drawing-the-portrait?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/figure-drawing-tonal-rendering?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/drawing-2-point-perspective?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/drawing-foundations-figure?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/blender-tips-tricks-and-techniques?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/typography-for-motion-designers-in-cinema-4d?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/rhino-7-essential-training?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/2d-animation-tips-and-tricks?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/logo-design-type-treatments?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/design-your-first-logo?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/logo-design-techniques-4?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/photoshop-for-designers-type-effects-3?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/photoshop-for-designers-filters-4?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/photoshop-for-designers-type-essentials-2?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/illustrator-designing-with-grids-and-guides?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/photoshop-for-designers-textures-2?u=76279468\\n\" +\n//                                \"https://www.linkedin.com/learning/photoshop-for-designers-color-2?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-for-self-taught-editors?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/learning-premiere-pro?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/getting-started-with-premiere-pro-for-the-non-video-pro?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-audio-workflow-and-the-essential-sound-panel?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-working-with-audio?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-fixing-video-exposure-problems?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-speed-changes?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-adjustment-layers-and-nesting?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-compositing-and-masks?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-cutting-with-music?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-effects-and-preset-management?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-video-finishing-techniques?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-blending-mode-secrets?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-essential-keyboard-shortcuts?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-and-after-effects-enhancing-production-value?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-commercial-editing-techniques?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-narrative-scene-editing?u=76279468\\n\" +\n//                    \"https://www.linkedin.com/learning/premiere-pro-documentary-editing?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/producing-professional-audio-and-video-podcasts?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/photoshop-for-video-editors-core-skills?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/social-media-video-strategy-weekly-bites?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/first-look-at-productions-in-premiere-pro?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-understanding-video-compression?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/creative-video-editing-techniques?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-fixing-video-color-and-exposure-problems?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/web-video-for-business-2-editing-and-publishing?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/audio-for-video-editors-essential-terms?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-cc-2018-essential-training-the-basics-2?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/delivering-video-in-web-experiences?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/creating-an-online-video-ad-2-editing-uploading-and-marketing?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-outputs-and-media-encoder-2?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/color-for-video-editors?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/learning-typography-for-video-editors?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/motion-graphic-design-storyboards-and-animatics?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/animation-pipeline-production?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/adobe-audition-mixing-music-and-dialog?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/premiere-pro-guru-mixing-audio-clips-and-tracks?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/motion-graphics-for-video-editors-terms-and-technology-2?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/creating-time-lapse-video-2?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/motion-graphics-for-video-editors-creating-animated-logos-2?u=76279468\\n\" +\n//                        \"https://www.linkedin.com/learning/motion-graphics-for-video-editors-working-with-type-2?u=76279468\"\n//                \"https://www.linkedin.com/learning/java-algorithms?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/security-tips-browsing-the-web?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-essential-training?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/learning-the-javascript-language-2?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-async?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/typescript-essential-training?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-classes-2018?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-code-challenges?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-functions?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-patterns-2?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-arrays?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/json-essential-training?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-maps-and-sets?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-patterns-2?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/vanilla-javascript-ajax-and-fetch?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-best-practices-for-functions-and-classes?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-web-form-programming?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/interactive-animations-with-css-and-javascript?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-closures?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/controlling-css-with-javascript?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/foundational-javascript-security?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/learning-javascript-debugging-2?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-best-practices-for-data?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-for-web-designers-3?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-modern-browser-apis?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/ethical-hacking-with-javascript?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/javascript-events?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/ionic-4-0-essential-training?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/learning-javascript-animations-with-greensock?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/penetration-testing-advanced-web-testing?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/build-and-deploy-your-first-web-app-with-modern-tooling?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/css-combining-grid-and-flexbox?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/react-authentication?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/advanced-power-bi-custom-visuals-with-d3-js?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/learning-vue-js-8602681?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/bootstrap-5-essential-training?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/php-user-authentication?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/asp-dot-net-core-token-based-authentication?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/react-securing-applications-2?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/web-security-user-authentication-and-access-control?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/asp-dot-net-core-identity-authentication-management?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/react-building-styles-with-css-modules-9222678?u=76279468\\n\" +\n//                \"https://www.linkedin.com/learning/react-design-patterns?u=76279468\"\n                +\"https://www.linkedin.com/learning/excel-2021-essential-training-office-2021-ltsc?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/learn-to-control-your-attention?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/how-to-manage-your-attention-and-your-priorities?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/overcome-overthinking?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/the-step-by-step-guide-to-reinventing-yourself?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/becoming-a-great-conversationalist?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/the-procrastination-cure-blinkist-summary?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/excel-pivottables-in-depth-2021?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/how-to-speak-so-people-want-to-listen?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/good-habits-bad-habits-blinkist-summary?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/secrets-of-effective-prioritization?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/crafting-questions-to-make-better-decisions?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-integrating-ai-and-machine-learning?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/microsoft-power-platform-foundations-2021?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/learning-microsoft-power-bi-desktop-14165789?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/learning-data-analytics-part-2-extending-and-applying-core-knowledge?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/advanced-power-bi-custom-visuals-with-d3-js?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/learning-data-analytics-1-foundations?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-data-visualization-and-dashboard-tips-tricks-techniques?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-mistakes-to-avoid?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-and-bim-analysis-and-visualization?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-dashboards-for-beginners?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/getting-started-with-power-bi?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/microsoft-power-platform-foundations-2020?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/paths/become-a-data-analyst?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-dataflows-essential-training?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/data-dashboards-in-power-bi?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-essential-training-3?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-quick-tips?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/using-power-bi-with-excel?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-top-skills?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-data-methods?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-data-modeling-with-dax?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/customer-insights-and-consumer-analytics-for-organizations-tools-and-analysis?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/advanced-microsoft-power-bi?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/power-bi-for-marketers?u=76279468\\n\" +\n                                 \"https://www.linkedin.com/learning/excel-tips-weekly?u=76279468\"\n        ).split(\"\\n\");\n        for (int i = 0; i < slugs.length; i++) {\n            var path = slugs[i].startsWith(\"https://\") ? URI.create(slugs[i]).getPath() : slugs[i];\n            if (path.startsWith(\"/learning/\")) {\n                path = path.substring(length);\n            }\n            download(path);\n        }\n    }\n\n    private static void createDirectory(String title) throws IOException {\n        mDirectory = new File(getValidFileName(title));\n        if (Files.notExists(mDirectory.toPath()))\n            Files.createDirectory(mDirectory.toPath());\n    }\n\n    private static void createSrt(JsonObject selectedVideo, String fileName) throws IOException {\n        JsonElement transcript = selectedVideo.get(\"transcript\");\n        if (transcript == null) {\n            return;\n        }\n        JsonArray lines = transcript.getAsJsonObject().get(\"lines\").getAsJsonArray();\n        int durationInSeconds = selectedVideo.get(\"durationInSeconds\").getAsInt() * 1000;\n        List<String> results = new ArrayList<>();\n        int start = 0;\n        int end = 0;\n        String line = null;\n        for (int i = 0; i < lines.size(); i++) {\n            if (start == 0) {\n                start = lines.get(i).getAsJsonObject().get(\"transcriptStartAt\").getAsInt();\n                line = lines.get(i).getAsJsonObject().get(\"caption\").getAsString();\n                continue;\n            } else {\n                end = lines.get(i).getAsJsonObject().get(\"transcriptStartAt\").getAsInt();\n            }\n            results.add(Integer.toString(i));\n            results.add(String.format(\"%s --> %s\", formatInterval(start, true), formatInterval(end, true)));\n            start = end;\n            results.add(line);\n            line = lines.get(i).getAsJsonObject().get(\"caption\").getAsString();\n            results.add(\"\");\n        }\n        results.add(Integer.toString(lines.size()));\n        results.add(String.format(\"%s --> %s\", formatInterval(start, true), formatInterval(durationInSeconds, true)));\n        results.add(line);\n        results.add(\"\");\n        Files.writeString(Path.of(fileName + \".srt\"), String.join(\"\\r\\n\", results));\n    }\n\n    private static void download(String courseSlug) {\n        HttpClient client = getHttpClient();\n        try {\n            JsonArray chapters = getChapters(client, courseSlug);\n            int n = 1;\n            for (int i = 0; i < chapters.size(); i++) {\n                JsonArray videos = chapters.get(i).getAsJsonObject().getAsJsonArray(\"videos\");\n                for (int j = 0; j < videos.size(); j++) {\n                    // if (n != 23 && n != 29 && n != 32) {\n                    // n++;\n                    // continue;\n                    // }\n//                    if (n <= 741) {\n//                        n++;\n//                        continue;\n//                    }\n                    String videoSlug = videos.get(j).getAsJsonObject().get(\"slug\").getAsString();\n                    String uri = String.format(\n                            \"https://www.linkedin.com/learning-api/detailedCourses?courseSlug=%s&resolution=_%d&q=slugs&fields=selectedVideo&videoSlug=%s\",\n                            courseSlug, 720, videoSlug);\n                    HttpResponse<String> response = client.send(HttpRequest.newBuilder().uri(URI.create(uri))\n                                    .header(\"Csrf-Token\", JSESSIONID)\n                                    .header(\"Cookie\", String.format(\"li_at=%s; JSESSIONID=\\\"%s\\\"\", LI_AT, JSESSIONID)).build(),\n                            BodyHandlers.ofString());\n                    processVideo(n++, response.body(), client);\n                }\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static String extractCourseData(HttpClient client, String courseSlug)\n            throws IOException, InterruptedException {\n        HttpResponse<String> response = client.send(HttpRequest.newBuilder().uri(URI.create(String.format(\n                                \"https://www.linkedin.com/learning-api/detailedCourses?courseSlug=%s&fields=chapters,title,exerciseFiles&addParagraphsToTranscript=true&q=slugs\",\n                                courseSlug))).header(\"Csrf-Token\", JSESSIONID)\n                        .header(\"Cookie\", String.format(\"li_at=%s; JSESSIONID=\\\"%s\\\"\", LI_AT, JSESSIONID)).build(),\n                BodyHandlers.ofString());\n        return response.body();\n    }\n\n    private static JsonArray getChapters(HttpClient client, String courseSlug)\n            throws IOException, InterruptedException {\n        String courseData = getCourseData(client, courseSlug);\n        JsonObject obj = JsonParser.parseString(courseData).getAsJsonObject();\n        JsonObject elements = obj.getAsJsonArray(\"elements\").get(0).getAsJsonObject();\n        String title = elements.get(\"title\").getAsString();\n        createDirectory(title);\n        return elements.getAsJsonArray(\"chapters\");\n    }\n\n    private static String getCourseData(HttpClient client, String courseSlug) throws IOException, InterruptedException {\n        String courseData;\n        File file = new File(courseSlug + \".json\");\n        if (file.exists()) {\n            courseData = Files.readString(file.toPath());\n        } else {\n            courseData = extractCourseData(client, courseSlug);\n            Files.writeString(file.toPath(), courseData);\n        }\n        return courseData;\n    }\n\n    private static HttpClient getHttpClient() {\n        return HttpClient.newBuilder().proxy(new ProxySelector() {\n            @Override\n            public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {\n            }\n\n            @Override\n            public List<Proxy> select(URI uri) {\n                List<Proxy> proxies = new ArrayList<>();\n                Proxy proxy = new Proxy(Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 10809));\n                proxies.add(proxy);\n                return proxies;\n            }\n        }).build();\n    }\n\n    private static String getValidFileName(String title) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for (char c : title.toCharArray()) {\n            boolean founded = false;\n            for (char invalidFileNameChar : InvalidFileNameChars) {\n                if (invalidFileNameChar == c) {\n                    founded = true;\n                    break;\n                }\n            }\n            if (!founded)\n                stringBuilder.append(c);\n        }\n        return stringBuilder.toString();\n    }\n\n    private static void processVideo(int j, String videoData, HttpClient httpClient) {\n        try {\n            JsonObject elements = JsonParser.parseString(videoData).getAsJsonObject().get(\"elements\").getAsJsonArray()\n                    .get(0).getAsJsonObject();\n            JsonObject selectedVideo = elements.get(\"selectedVideo\").getAsJsonObject();\n            String fileName = String.format(\"%s\\\\%03d. %s\", mDirectory.getAbsolutePath(), j,\n                    getValidFileName(selectedVideo.get(\"title\").getAsString()));\n            createSrt(selectedVideo, fileName);\n            File videoFile = new File(fileName + \".mp4\");\n            if (videoFile.exists())\n                return;\n            String url = selectedVideo.get(\"url\").getAsJsonObject().get(\"progressiveUrl\").getAsString();\n            HttpRequest req = HttpRequest.newBuilder().uri(URI.create(url)).build();\n            httpClient.send(req, BodyHandlers.ofFile(videoFile.toPath()));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16462005737525097"
        },
        "UpdatedTime": {
            "$numberLong": "16462006682804402"
        }
    },
    {
        "_id": 56,
        "Title": "样式",
        "Content": "样式\n\n(function () {\n    const string = `menu-container\n-----------------------------\n\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    -webkit-box-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    justify-content: center;\n    z-index: 4;\n-----------------------------\nmenu-content\n-----------------------------\n   \n    position: relative;\n    z-index: 2;\n    max-height: 100%;\n    overflow-y: auto;\n    color: #030303;\n    background-color: #f9f9f9;\n    padding: 3px;\n    min-width: 250px;\n    max-width: 356px;\n    margin: 40px;\n-----------------------------\nytm-menu-item\n-----------------------------\n\n    display: block;\n    padding: 3px 0;\n-----------------------------\nmenu-item-button\n-----------------------------\n\n    border: none;\n    outline: none;\n    font: inherit;\n    color: inherit;\n    background: transparent;\n    cursor: pointer;\n    box-sizing: border-box;\n    display: block;\n    font-size: 1.6rem;\n    padding: 9px 12px;\n    text-align: initial;\n    text-transform: unset;\n    width: 100%;\n-----------------------------\nc3-overlay\n-----------------------------\n\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 1;\n    cursor: pointer;\n    background-color: rgba(0,0,0,0.8);\n-----------------------------\nhidden-button\n-----------------------------\n   \n    padding: 0;\n    border: none;\n    outline: none;\n    font: inherit;\n    text-transform: inherit;\n    color: inherit;\n    background: transparent;\n    cursor: pointer;\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 1px;\n    width: 1px;`;\n\n    const lines = string.split(/\\s*-+\\s*\\n/g);\n\n    const buffer = [];\n    const names = [];\n    const buffers=[];\n    for (let index = 0; index < lines.length; index += 2) {\n        const element = lines[index];\n        if (index + 1 < lines.length) {\n            let n = camelcase(element.trim());\n            const pieces = lines[index + 1].split('\\n')\n                .filter(i => i.trim())\n                .map(i => [\n                    camelcase(i.split(':', 2)[0].trim()),\n                    i.split(':', 2)[1].trim().replace(/;$/, '')\n                ]);\n\n            buffer.push(`const ${n} = document.createElement('div');\n            \n                ${JSON.stringify(pieces, '', '\\t')}\n             .forEach(x => ${n}.style[x[0]] = x[1]);\n            `);\n\n            names.push(n);\n        }\n    }\n    for (let index = 0; index < names.length; index++) {\n        const element = names[index];\n        if (index === 0)\n            buffers.push(`document.body.appendChild(${element});`);\n        else\n            buffers.push(`${names[index-1]}.appendChild(${element});`);\n\n    }\n\n\n\n    console.log(buffer.join('\\n')+buffers.reverse().join('\\n'));\n\n    function camelcase(string) {\n        return string.replaceAll(/[-_ ]([a-z])/g, m => m[1].toUpperCase());\n    }\n})();",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16463680159692536"
        },
        "UpdatedTime": {
            "$numberLong": "16463680159692536"
        }
    },
    {
        "_id": 57,
        "Title": "创建 LiteDB",
        "Content": "创建 LiteDB\n\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <textarea style=\"width: 100%;height: 300px;\">\n\n    </textarea>\n    <script>\n\n        function underscore(string) {\n            return string.replaceAll(/[A-Z]/g, m => `_${m[0].toLowerCase()}`);\n        }\n        function decapitalize(string) {\n            return string[0].toLowerCase() + string.slice(1);\n        }\n        function capitalize(string) {\n            return string[0].toUpperCase() + string.slice(1);\n        }\n        function camelcase(string) {\n            return string.replaceAll(/[-_ ]([a-z])/g, m => m[1].value.toUpperCase());\n        }\n\n        const strings = [\"courseName\", \"teacher\", \"startTime\",\"endTime\"];\n        const ints = [\"id\",\"peoples\"];\n        const longs = [\"dateTime\",\"CreationTime\", \"UpdatedTime\"];\n\n        const buffer1 = [];\n        const buffer2 = [];\n        const buffer3 = [];\n        const buffer4 = [];\n        const buffer5 = [];\n        const buffer6 = [];\n        const className = \"Course\";\n\n        for (let index = 0; index < strings.length; index++) {\n                const element = strings[index];\n                buffer1.push(`public string ${capitalize(element)} { get; set; }`);\n                buffer4.push(`if (${decapitalize(className)}.${capitalize(element)} != null)\n        {\n            old${className}.${capitalize(element)} = ${decapitalize(className)}.${capitalize(element)};\n        }`);\n        }\n       \n        for (let index = 0; index < ints.length; index++) {\n                const element = ints[index];\n                buffer2.push(`public int ${capitalize(element)} { get; set; }`);\n                buffer5.push(`if (${decapitalize(className)}.${capitalize(element)} != 0)\n       {\n           old${className}.${capitalize(element)} = ${decapitalize(className)}.${capitalize(element)};\n       }`);\n            }\n\n            for (let index = 0; index < longs.length; index++) {\n                const element = longs[index];\n                   buffer3.push(`public long ${capitalize(element)} { get; set; }`);\n                buffer6.push(`if (${decapitalize(className)}.${capitalize(element)} != 0)\n      {\n          old${className}.${capitalize(element)} = ${decapitalize(className)}.${capitalize(element)};\n      }`);\n            }\n \n\n        document.querySelector('textarea').value=buffer1.concat(buffer2).concat(buffer3)\n        .concat(buffer4).concat(buffer5).concat(buffer6)\n        .join('\\n')\n        +`int Insert${className}(${className} ${decapitalize(className)});\n    IEnumerable<${className}> Get${className}s();\n    IEnumerable<${className}> Query${className}s(string category);\n    ${className} Get${className}(int id);\n    void Delete${className}(int id);`+`public int Insert${className}(${className} ${decapitalize(className)})\n    {\n        if (${decapitalize(className)} == null)\n        {\n            return 0;\n        }\n\n        var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n        if (${decapitalize(className)}.Id <= 0 )\n        {\n            var creationTime = DateTime.UtcNow.GetUnixTimeStamp();\n            ${decapitalize(className)}.CreationTime = creationTime;\n            ${decapitalize(className)}.UpdatedTime = creationTime;\n            \n            return c.Insert(${decapitalize(className)});\n        }\n\n        var old${className} = c.FindById(${decapitalize(className)}.Id);\n        if (old${className} == null) return 0;\n\n        \n        old${className}.UpdatedTime =  DateTime.UtcNow.GetUnixTimeStamp();\n        return c.Update(old${className}) ? old${className}.Id : 0;\n    }`+`public IEnumerable<${className}> Get${className}s()\n    {\n        var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n        return c.FindAll();\n    }\n    public ${className} Get${className}(int id)\n        {\n            var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n            return c.FindById(id);\n        }\n        public IEnumerable<${className}> Query${className}s(string topic)\n        {\n            var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n            return c.Query()\n                .Where(x => x.Category == topic)\n                .ToEnumerable();\n        }\n\n        public void Delete${className}(int id)\n        {\n            var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n            c.Delete(id);\n        }\n`+`\n[HttpPost(\"/api/${decapitalize(className)}\")]\npublic int Insert${className}([FromBody] ${className} ${decapitalize(className)})\n{\n    return _databaseService.Insert${className}(${decapitalize(className)});\n}\n[HttpGet(\"/api/${decapitalize(className)}\")]\npublic ${className} Get${className}(int id)\n{\n    return _databaseService.Get${className}(id);\n}\n\n        [HttpGet(\"/api/${decapitalize(className)}/{query}\")]\n        public IEnumerable<${className}> Get${className}s(string query)\n        {\n            return _databaseService.Get${className}s();\n        }\n`;\n   </script>\n</body>\n\n</html>\n```",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16479610266671794"
        },
        "UpdatedTime": {
            "$numberLong": "16479610266671794"
        }
    },
    {
        "_id": 58,
        "Title": "创建 LiteDB 单行",
        "Content": "创建 LiteDB 单行\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <textarea style=\"width: 100%;height: 300px;\">\n\n    </textarea>\n    <script>\n\n        function underscore(string) {\n            return string.replaceAll(/[A-Z]/g, m => `_${m[0].toLowerCase()}`);\n        }\n        function decapitalize(string) {\n            return string[0].toLowerCase() + string.slice(1);\n        }\n        function capitalize(string) {\n            return string[0].toUpperCase() + string.slice(1);\n        }\n        function camelcase(string) {\n            return string.replaceAll(/[-_ ]([a-z])/g, m => m[1].value.toUpperCase());\n        }\n\n        const strings = [\"discountTitle\", \"discountContent\"];\n        const ints = [\"id\"];\n        const longs = [\"CreationTime\", \"UpdatedTime\"];\n\n        const buffer1 = [];\n        const buffer2 = [];\n        const buffer3 = [];\n        const buffer4 = [];\n        const buffer5 = [];\n        const buffer6 = [];\n        const className = \"Yoga\";\n\n        for (let index = 0; index < strings.length; index++) {\n                const element = strings[index];\n                buffer1.push(`public string ${capitalize(element)} { get; set; }`);\n                buffer4.push(`if (${decapitalize(className)}.${capitalize(element)} != null)\n        {\n            old${className}.${capitalize(element)} = ${decapitalize(className)}.${capitalize(element)};\n        }`);\n        }\n       \n        for (let index = 0; index < ints.length; index++) {\n                const element = ints[index];\n                buffer2.push(`public int ${capitalize(element)} { get; set; }`);\n                buffer5.push(`if (${decapitalize(className)}.${capitalize(element)} != 0)\n       {\n           old${className}.${capitalize(element)} = ${decapitalize(className)}.${capitalize(element)};\n       }`);\n            }\n\n            for (let index = 0; index < longs.length; index++) {\n                const element = longs[index];\n                   buffer3.push(`public long ${capitalize(element)} { get; set; }`);\n                buffer6.push(`if (${decapitalize(className)}.${capitalize(element)} != 0)\n      {\n          old${className}.${capitalize(element)} = ${decapitalize(className)}.${capitalize(element)};\n      }`);\n            }\n \n\n        document.querySelector('textarea').value=buffer1.concat(buffer2).concat(buffer3)\n        .concat(buffer4).concat(buffer5).concat(buffer6)\n        .join('\\n')\n        +`void Insert${className}(${className} ${decapitalize(className)});\n    ${className} Get${className}();\n    void Delete${className}();`+`public void Insert${className}(${className} ${decapitalize(className)})\n    {\n        if (${decapitalize(className)} == null)\n        {\n            return ;\n        }\n\n        var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n        if (${decapitalize(className)}.Id <= 0 )\n        {\n            var creationTime = DateTime.UtcNow.GetUnixTimeStamp();\n            ${decapitalize(className)}.CreationTime = creationTime;\n            ${decapitalize(className)}.UpdatedTime = creationTime;\n            \n           c.Insert(${decapitalize(className)});\n           return ;\n        }\n\n        var old${className} = c.FindById(${decapitalize(className)}.Id);\n        if (old${className} == null) return ;\n\n        \n        old${className}.UpdatedTime =  DateTime.UtcNow.GetUnixTimeStamp();\n        c.Update(old${className}) ;\n    }`+`\n    public ${className} Get${className}()\n        {\n            var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n            return c.FindById();\n        }\n\n        public void Delete${className}()\n        {\n            var c = Database.GetCollection<${className}>(\"${decapitalize(className)}s\");\n            c.Delete(1);\n        }\n`+`\n[HttpPost(\"/api/${decapitalize(className)}\")]\npublic int Insert${className}([FromBody] ${className} ${decapitalize(className)})\n{\n     _databaseService.Insert${className}(${decapitalize(className)});\n     return 1;\n    }\n[HttpGet(\"/api/${decapitalize(className)}\")]\npublic ${className} Get${className}()\n{\n    return _databaseService.Get${className}(1);\n}\n\n       \n`;\n   </script>\n</body>\n\n</html>\n```",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16479698175761439"
        },
        "UpdatedTime": {
            "$numberLong": "16479698175761439"
        }
    },
    {
        "_id": 59,
        "Title": "HTML",
        "Content": "HTML\n\n```\n[...document.querySelectorAll('[id]')].map(i=>i.id)\n\nconsole.error([...document.querySelectorAll('[id]')].map(i=>`const ${i.id.slice(0,1).toLowerCase()+i.id.slice(1)} = document.getElementById('${i.id}').value;`).join('\\n'))\n\nconsole.error([...document.querySelectorAll('[id]')].map(i=>`${i.id.slice(0,1).toLowerCase()+i.id.slice(1)}`).join(',\\n'))\n\n```",
        "Category": "模板",
        "CreationTime": {
            "$numberLong": "16479698177764180"
        },
        "UpdatedTime": {
            "$numberLong": "16479772574380093"
        }
    },
    {
        "_id": 60,
        "Title": "【微信小程序】获取系统信息",
        "Content": "【微信小程序】获取系统信息\n\nconst { brand,\n            model,\n            pixelRatio,\n            screenWidth,\n            screenHeight,\n            windowWidth,\n            windowHeight,\n            statusBarHeight,\n            language,\n            version,\n            system,\n            platform,\n            fontSizeSetting,\n            SDKVersion,\n            benchmarkLevel,\n            albumAuthorized,\n            cameraAuthorized,\n            locationAuthorized,\n            microphoneAuthorized,\n            notificationAuthorized,\n            notificationAlertAuthorized,\n            notificationBadgeAuthorized,\n            notificationSoundAuthorized,\n            phoneCalendarAuthorized,\n            bluetoothEnabled,\n            locationEnabled,\n            wifiEnabled,\n            safeArea,\n            locationReducedAccuracy,\n            theme,\n            host,\n            enableDebug,\n            deviceOrientation} = wx.getSystemInfoSync();\nconsole.log(`brand = ${brand}\nmodel = ${model}\npixelRatio = ${pixelRatio}\nscreenWidth = ${screenWidth}\nscreenHeight = ${screenHeight}\nwindowWidth = ${windowWidth}\nwindowHeight = ${windowHeight}\nstatusBarHeight = ${statusBarHeight}\nlanguage = ${language}\nversion = ${version}\nsystem = ${system}\nplatform = ${platform}\nfontSizeSetting = ${fontSizeSetting}\nSDKVersion = ${SDKVersion}\nbenchmarkLevel = ${benchmarkLevel}\nalbumAuthorized = ${albumAuthorized}\ncameraAuthorized = ${cameraAuthorized}\nlocationAuthorized = ${locationAuthorized}\nmicrophoneAuthorized = ${microphoneAuthorized}\nnotificationAuthorized = ${notificationAuthorized}\nnotificationAlertAuthorized = ${notificationAlertAuthorized}\nnotificationBadgeAuthorized = ${notificationBadgeAuthorized}\nnotificationSoundAuthorized = ${notificationSoundAuthorized}\nphoneCalendarAuthorized = ${phoneCalendarAuthorized}\nbluetoothEnabled = ${bluetoothEnabled}\nlocationEnabled = ${locationEnabled}\nwifiEnabled = ${wifiEnabled}\nsafeArea = ${safeArea}\nlocationReducedAccuracy = ${locationReducedAccuracy}\ntheme = ${theme}\nhost = ${host}\nenableDebug = ${enableDebug}\ndeviceOrientation = ${deviceOrientation}`);",
        "Category": "JavaScript",
        "CreationTime": {
            "$numberLong": "16488965907738568"
        },
        "UpdatedTime": {
            "$numberLong": "16488965907738568"
        }
    },
    {
        "_id": 61,
        "Title": "格式化代码",
        "Content": "格式化代码\n\n\nusing System.Text;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing System.Linq;\nusing System.IO;\nusing Microsoft.CodeAnalysis;\nusing System;\n\nnamespace FormatCs\n{\n    // D:\\cs\\cscs Format.cs\n    class Program\n    {\n\n        static void ProcessEnumDeclarationSyntax(EnumDeclarationSyntax enumDeclarationSyntax, StringBuilder stringBuilder)\n        {\n            foreach (EnumMemberDeclarationSyntax item in enumDeclarationSyntax.ChildNodes())\n            {\n\n                Console.WriteLine(item.EqualsValue);\n            }\n\n        }\n        public static string FormatCSharpCode(string value)\n        {\n\n\n            var s = new StringBuilder();\n\n            var rootNode = CSharpSyntaxTree.ParseText(value).GetRoot();\n\n            var namespace_ = rootNode.DescendantNodes().OfType<NamespaceDeclarationSyntax>();\n\n\n            if (namespace_.Any())\n            {\n\n                s.Append(namespace_.First().NamespaceKeyword.Text).Append(' ').Append(namespace_.First().Name).Append('{');\n            }\n\n            var using_ = rootNode.DescendantNodes().OfType<UsingDirectiveSyntax>();\n            if (using_.Any())\n            {\n\n                using_ = using_.OrderBy(i => i.Name.ToString());//.Distinct(i => i.Name.GetText());\n\n                foreach (var item in using_)\n                {\n                    s.Append(item.ToFullString());\n                }\n            }\n            var interface_ = rootNode.DescendantNodes().OfType<InterfaceDeclarationSyntax>();\n\n            if (interface_.Any())\n            {\n                interface_ = interface_.OrderBy(i => i.Identifier.ValueText);\n\n\n                foreach (var item in interface_)\n                {\n                    s.Append(item.Modifiers.ToFullString()).Append(\" interface \").Append(item.Identifier.ValueText);\n                    if (item.BaseList != null)\n                        s.Append(item.BaseList.GetText());\n\n                    s.Append('{');\n\n                    var field_ = item.ChildNodes().OfType<FieldDeclarationSyntax>();\n                    if (field_.Any())\n                    {\n                        field_ = field_.OrderBy(i => i.Declaration.Variables.First().ToFullString());\n\n                        foreach (var itemField in field_)\n                        {\n\n                            s.Append(itemField.ToFullString().Trim() + '\\n');\n                        }\n                    }\n                    var property_ = item.ChildNodes().OfType<PropertyDeclarationSyntax>();\n                    if (property_.Any())\n                    {\n                        property_ = property_.OrderBy(i => i.Identifier.Value);\n\n                        foreach (var itemProperty in property_)\n                        {\n\n                            s.Append(itemProperty.ToFullString().Trim() + '\\n');\n                        }\n                    }\n                    var method_ = item.ChildNodes().OfType<MethodDeclarationSyntax>();\n\n                    if (method_.Any())\n                    {\n                        method_ = method_.OrderByDescending(i => i.Modifiers.ToFullString().Contains(\"extern\")).ThenBy(i => i.Identifier.ValueText.Trim());//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n\n                        //method_ = method_.OrderBy(i => i.Modifiers.ToFullString().Trim() + i.Identifier.ValueText.Trim());//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n                        foreach (var itemMethod in method_)\n                        {\n\n\n                            s.Append(itemMethod.ToFullString());\n                        }\n\n                    }\n                }\n                s.Append('}');\n            }\n\n            var class_ = rootNode.DescendantNodes().OfType<ClassDeclarationSyntax>();\n\n            if (class_.Any())\n            {\n                class_ = class_.OrderBy(i => i.Identifier.ValueText);\n\n                foreach (var item in class_)\n                {\n\n\n                    s.AppendLine(item.AttributeLists.ToFullString()).Append(item.Modifiers.ToFullString()).Append(\" class \").Append(item.Identifier.ValueText);\n                    if (item.BaseList != null)\n                        s.Append(item.BaseList.GetText());\n\n                    s.Append('{');\n\n\n                    var field_ = item.ChildNodes().OfType<FieldDeclarationSyntax>();\n                    if (field_.Any())\n                    {\n                        field_ = field_.OrderBy(i => i.Declaration.Variables.First().ToFullString());\n\n                        foreach (var itemField in field_)\n                        {\n\n                            s.Append(itemField.ToFullString().Trim() + '\\n');\n                        }\n                    }\n                    var property_ = item.ChildNodes().OfType<PropertyDeclarationSyntax>();\n                    if (property_.Any())\n                    {\n                        property_ = property_.OrderBy(i => i.Identifier.ToString());\n\n                        foreach (var itemProperty in property_)\n                        {\n\n                            s.Append(itemProperty.ToFullString().Trim() + '\\n');\n                        }\n                    }\n                    var enum_ = item.ChildNodes().OfType<EnumDeclarationSyntax>();\n                    if (enum_.Any())\n                    {\n                        enum_ = enum_.OrderBy(i => i.Identifier.ToFullString());\n\n                        foreach (var itemEnum in enum_)\n                        {\n                            s.Append(itemEnum.ToFullString());\n                        }\n                    }\n                    var delegate_ = item.ChildNodes().OfType<DelegateDeclarationSyntax>();\n                    if (delegate_.Any())\n                    {\n                        delegate_ = delegate_.OrderBy(i => i.Identifier.ToFullString());\n\n                        foreach (var itemDelegate in delegate_)\n                        {\n\n                            s.Append(itemDelegate.ToFullString() + '\\n');\n                        }\n                    }\n                    var struct_ = item.ChildNodes().OfType<StructDeclarationSyntax>();\n                    if (struct_.Any())\n                    {\n                        struct_ = struct_.OrderBy(i => i.Identifier.ToFullString());\n\n                        foreach (var itemStruct in struct_)\n                        {\n                            s.Append(itemStruct.ToFullString());\n                        }\n                    }\n                    var constructor_ = item.ChildNodes().OfType<ConstructorDeclarationSyntax>();\n                    if (constructor_.Any())\n                    {\n                        constructor_ = constructor_.OrderBy(i => i.Identifier.ValueText);//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n                        foreach (var itemMethod in constructor_)\n                        {\n\n\n                            s.Append(itemMethod.ToFullString());\n                        }\n\n                    }\n                    var method_ = item.ChildNodes().OfType<MethodDeclarationSyntax>();\n\n                    if (method_.Any())\n                    {\n                        method_ = method_.OrderByDescending(i => i.Modifiers.ToFullString().Contains(\"extern\")).ThenBy(i => i.Identifier.ValueText.Trim());//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n\n                        //method_ = method_.OrderBy(i => i.Modifiers.ToFullString().Trim() + i.Identifier.ValueText.Trim());//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n                        foreach (var itemMethod in method_)\n                        {\n\n\n                            s.Append(itemMethod.ToFullString());\n                        }\n\n                    }\n                    s.Append('}');\n                }\n\n            }\n            s.Append('}');\n\n\n            var record_ = rootNode.DescendantNodes().OfType<RecordDeclarationSyntax>();\n\n            if (record_.Any())\n            {\n                record_ = record_.OrderBy(i => i.Identifier.ValueText);\n\n                foreach (var item in record_)\n                {\n\n\n                    s.AppendLine(item.AttributeLists.ToFullString()).Append(item.Modifiers.ToFullString()).Append(\" record \").Append(item.Identifier.ValueText);\n                    if (item.BaseList != null)\n                        s.Append(item.BaseList.GetText());\n\n                    s.Append('{');\n\n\n                    var field_ = item.ChildNodes().OfType<FieldDeclarationSyntax>();\n                    if (field_.Any())\n                    {\n                        field_ = field_.OrderBy(i => i.Declaration.Variables.First().ToFullString());\n\n                        foreach (var itemField in field_)\n                        {\n\n                            s.Append(itemField.ToFullString().Trim() + '\\n');\n                        }\n                    }\n                    var property_ = item.ChildNodes().OfType<PropertyDeclarationSyntax>();\n                    if (property_.Any())\n                    {\n                        property_ = property_.OrderBy(i => i.Identifier.ToString());\n\n                        foreach (var itemProperty in property_)\n                        {\n\n                            s.Append(itemProperty.ToFullString().Trim() + '\\n');\n                        }\n                    }\n                    var enum_ = item.ChildNodes().OfType<EnumDeclarationSyntax>();\n                    if (enum_.Any())\n                    {\n                        enum_ = enum_.OrderBy(i => i.Identifier.ToFullString());\n\n                        foreach (var itemEnum in enum_)\n                        {\n                            s.Append(itemEnum.ToFullString());\n                        }\n                    }\n                    var delegate_ = item.ChildNodes().OfType<DelegateDeclarationSyntax>();\n                    if (delegate_.Any())\n                    {\n                        delegate_ = delegate_.OrderBy(i => i.Identifier.ToFullString());\n\n                        foreach (var itemDelegate in delegate_)\n                        {\n\n                            s.Append(itemDelegate.ToFullString() + '\\n');\n                        }\n                    }\n                    var struct_ = item.ChildNodes().OfType<StructDeclarationSyntax>();\n                    if (struct_.Any())\n                    {\n                        struct_ = struct_.OrderBy(i => i.Identifier.ToFullString());\n\n                        foreach (var itemStruct in struct_)\n                        {\n                            s.Append(itemStruct.ToFullString());\n                        }\n                    }\n                    var constructor_ = item.ChildNodes().OfType<ConstructorDeclarationSyntax>();\n                    if (constructor_.Any())\n                    {\n                        constructor_ = constructor_.OrderBy(i => i.Identifier.ValueText);//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n                        foreach (var itemMethod in constructor_)\n                        {\n\n\n                            s.Append(itemMethod.ToFullString());\n                        }\n\n                    }\n                    var method_ = item.ChildNodes().OfType<MethodDeclarationSyntax>();\n\n                    if (method_.Any())\n                    {\n                        method_ = method_.OrderByDescending(i => i.Modifiers.ToFullString().Contains(\"extern\")).ThenBy(i => i.Identifier.ValueText.Trim());//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n\n                        //method_ = method_.OrderBy(i => i.Modifiers.ToFullString().Trim() + i.Identifier.ValueText.Trim());//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n                        foreach (var itemMethod in method_)\n                        {\n\n\n                            s.Append(itemMethod.ToFullString());\n                        }\n\n                    }\n                    s.Append('}');\n                }\n            }\n\n            return s.ToString();\n\n        }\n        public static string FormatCodes(string value)\n        {\n\n\n            var s = new StringBuilder();\n\n            var rootNode = CSharpSyntaxTree.ParseText(value).GetRoot();\n\n\n            var method_ = rootNode.DescendantNodes().OfType<MethodDeclarationSyntax>()\n            .Where(x=>x.AttributeLists.Count>0)\n            .OrderBy(x=>x.AttributeLists.First().ToFullString());\n            Console.WriteLine(method_.Count());\n            if (method_.Any())\n            {\n                //method_ = method_.OrderByDescending(i => i.Modifiers.ToFullString().Contains(\"extern\")).ThenBy(i => i.Identifier.ValueText.Trim());//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n\n                //method_ = method_.OrderBy(i => i.Modifiers.ToFullString().Trim() + i.Identifier.ValueText.Trim());//.OrderBy(i => i.Identifier.ValueText).ThenBy(i=>i.Modifiers.ToFullString());\n                foreach (var itemMethod in method_)\n                {\n\n                    \n                    s.Append(itemMethod.ToFullString());\n                }\n                File.WriteAllText(\"333.txt\",s.ToString());\n\n            }\n\n\n\n\n            return s.ToString();\n\n        }\n        public static void SplitCSharpCode(string value)\n        {\n\n            var dir = Path.Combine(System.Environment.GetFolderPath(System.Environment.SpecialFolder.Desktop), \"Models\");\n            if (!Directory.Exists(dir))\n                Directory.CreateDirectory(dir);\n\n            var s = new StringBuilder();\n\n            var rootNode = CSharpSyntaxTree.ParseText(value).GetRoot();\n\n            var namespace_ = rootNode.DescendantNodes().OfType<NamespaceDeclarationSyntax>();\n\n            if (namespace_.Any())\n            {\n\n                s.Append(namespace_.First().NamespaceKeyword.Text).Append(' ').Append(namespace_.First().Name).Append('{');\n            }\n\n            var using_ = rootNode.DescendantNodes().OfType<UsingDirectiveSyntax>();\n            if (using_.Any())\n            {\n\n                using_ = using_.OrderBy(i => i.Name.ToString());//.Distinct(i => i.Name.GetText());\n\n                foreach (var item in using_)\n                {\n                    s.Append(item.ToFullString());\n                }\n            }\n\n\n            var class_ = rootNode.DescendantNodes().OfType<ClassDeclarationSyntax>();\n\n            if (class_.Any())\n            {\n                class_ = class_.OrderBy(i => i.Identifier.ValueText);\n\n                foreach (var item in class_)\n                {\n\n\n                    var fileName = item.Identifier.ValueText + \".cs\";\n                    var stringBuilder = new StringBuilder();\n\n                    stringBuilder.Append(s.ToString());\n                    stringBuilder.Append(item.GetText().ToString());\n                    stringBuilder.Append(\"}\");\n\n                    File.WriteAllText(Path.Combine(dir, fileName), stringBuilder.ToString());\n                }\n\n            }\n\n\n\n\n        }\n\n        static void Main(string[] args)\n        {\n            /*var dir = @\"C:\\Users\\Administrator\\Desktop\\Resources\\SourceCode\\Keyboard\";\n            var files = Directory.GetFiles(dir, \"*.cs\", SearchOption.AllDirectories);\n            foreach (var file in files)\n            {\n                if (file.Contains(\"\\\\obj\\\\\") || file.Contains(\"\\\\Properties\\\\\")) continue;\n                File.WriteAllText(file, string.Join(\"\\n\", FormatCSharpCode(File.ReadAllText(file)).Split(new[] { '\\r', '\\n' }).Where(i => !string.IsNullOrWhiteSpace(i))));\n            }*/\n            //File.WriteAllText(@\"C:\\Users\\Administrator\\Desktop\\Resources\\SourceCode\\Keyboard\\Keyboards.cs\",\n            //string.Join(\"\\n\",\n            FormatCodes(File.ReadAllText(@\"2.txt\"));\n            //.Split(new[] { '\\r', '\\n' })));\n\n            //.Where(i => !string.IsNullOrWhiteSpace(i))));\n\n            /*\n                      \n\n                                  SplitCSharpCode(File.ReadAllText(@\"C:\\Users\\psycho\\Desktop\\999\\Euphoria\\Euphoria\\Book.cs\"));\n                      */\n\n\n            // var rootNode = CSharpSyntaxTree.ParseText(File.ReadAllText(\"KeyboardHook.txt\")).GetRoot();\n\n\n            // var rootNode = CSharpSyntaxTree.ParseText(File.ReadAllText(\"3.txt\")).GetRoot();\n            // ProcessClassDeclarationSyntaxs(rootNode, new StringBuilder());\n            // ProcessEnumDeclarationSyntaxs(rootNode.ChildNodes().OfType<NamespaceDeclarationSyntax>().First(), new StringBuilder());\n        }\n        static void ProcessClassDeclarationSyntaxs(SyntaxNode syntaxNode, StringBuilder stringBuilder)\n        {\n            var classes = syntaxNode.ChildNodes().OfType<ClassDeclarationSyntax>();\n\n            foreach (var item in classes)\n            {\n                stringBuilder.AppendLine(item.AttributeLists.ToFullString()).Append(item.Modifiers.ToFullString()).Append(\" class \").Append(item.Identifier.ValueText);\n                if (item.BaseList != null)\n                    stringBuilder.Append(item.BaseList.GetText());\n\n                stringBuilder.Append('{');\n\n                var methods = item.ChildNodes().OfType<MethodDeclarationSyntax>();\n                foreach (var method in methods)\n                {\n                    if (method.AttributeLists != null)\n                        Console.WriteLine(method.AttributeLists.First().Attributes.First().ArgumentList.Arguments.Last().NameEquals.Name.GetText().ToString().Length);\n\n                }\n                methods = methods.OrderBy(method => method.AttributeLists.First().Attributes.First().ArgumentList.Arguments.Where(b => b.NameEquals.Name.GetText().ToString().Trim() == \"ShortKey\").First().Expression.ChildNodes().Last().ToString());\n\n                foreach (var mm in methods)\n                {\n                    Console.WriteLine(mm.Modifiers.First());\n                    stringBuilder.AppendLine(mm.ToFullString());\n\n                }\n\n                stringBuilder.Append('}');\n            }\n            // var enumDeclarationSyntaxs = syntaxNode.DescendantNodes().OfType<FieldDeclarationSyntax>();\n            // foreach (var item in enumDeclarationSyntaxs)\n            // {\n            //     Console.WriteLine(item.AttributeLists);\n            //     //var enumMembers = item.ChildNodes().OfType<EnumMemberDeclarationSyntax>().OrderBy(i => i.Identifier);\n            // }\n\n            File.WriteAllText(\"5.txt\", stringBuilder.ToString());\n\n        }\n        static void ProcessEnumDeclarationSyntaxs(SyntaxNode syntaxNode, StringBuilder stringBuilder)\n        {\n            var enumDeclarationSyntaxs = syntaxNode.ChildNodes().OfType<EnumDeclarationSyntax>();\n            if (enumDeclarationSyntaxs == null || enumDeclarationSyntaxs.Count() < 1) return;\n            foreach (var item in enumDeclarationSyntaxs)\n            {\n                stringBuilder.Append(item.Modifiers).AppendLine();\n                stringBuilder.Append(\" enum \");\n                stringBuilder.Append(item.Identifier);\n                stringBuilder.Append(\"{\");\n                var enumMembers = item.ChildNodes().OfType<EnumMemberDeclarationSyntax>().OrderBy(i => i.Identifier.ValueText).Select(i => i.ToString());\n                stringBuilder.AppendJoin(\",\", enumMembers);\n                stringBuilder.Append(\"}\").AppendLine();\n            }\n            // var enumDeclarationSyntaxs = syntaxNode.DescendantNodes().OfType<FieldDeclarationSyntax>();\n            // foreach (var item in enumDeclarationSyntaxs)\n            // {\n            //     Console.WriteLine(item.AttributeLists);\n            //     //var enumMembers = item.ChildNodes().OfType<EnumMemberDeclarationSyntax>().OrderBy(i => i.Identifier);\n            // }\n\n        }\n    }\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16489395913620454"
        },
        "UpdatedTime": {
            "$numberLong": "16489395913620454"
        }
    },
    {
        "_id": 62,
        "Title": "控制台程序：上传Web服务器",
        "Content": "控制台程序：上传Web服务器\n\nusing Renci.SshNet;\nusing System.Diagnostics;\n\nstatic void UploadFile(SftpClient ftp, string filename, string serverFileName, bool checkDir = false)\n{\n    if (checkDir)\n    {\n        var pieces = serverFileName.Split('/');\n        var rootPath = string.Empty;\n        for (var i = 1; i < pieces.Length - 1; i++)\n        {\n            rootPath = rootPath + \"/\" + pieces[i];\n            if (!ftp.Exists(rootPath))\n            {\n                ftp.CreateDirectory(rootPath);\n            }\n        }\n    }\n\n    using var stream = File.OpenRead(filename);\n    ftp.UploadFile(stream, serverFileName);\n}\n\nstring host = \"159.75.78.126\";\nstring username = \"root\";\nstring password = \"q4so4tDtz!\";\n\nvar dir = @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\";\nvar binDir = Path.Combine(dir, @\"bin\\Release\\net6.0\\linux-x64\\publish\");\nvar process = Process.Start(new ProcessStartInfo()\n{\n    WorkingDirectory = dir,\n    FileName = \"dotnet\", //K dotnet\n    Arguments =\n        \"publish --configuration Release -r linux-x64 -p:PublishSingleFile=true --self-contained false\"\n});\nprocess?.WaitForExit();\n\nusing var ssh = new SshClient(host, username, password);\nssh.Connect();\nssh.RunCommand(\"sudo systemctl stop euphoria.service\");\nusing var ftp = new SftpClient(host, username, password);\nftp.Connect();\nvar files = Directory.GetFiles(binDir, \"*.*\");\nforeach (var filename in files)\n{\n    if (filename.EndsWith(\".pdb\"))\n        continue;\n    var name = \"/root/bin/\" + filename.Substring(binDir.Length + 1).Replace(\"\\\\\", \"/\");\n    Console.WriteLine(name);\n    UploadFile(ftp, filename, name, true);\n}\n\nssh.RunCommand(\"sudo systemctl start euphoria.service\");\n\n//dotnet publish --configuration Release -r win-x64 -p:PublishSingleFile=true --self-contained false",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16492173713636936"
        },
        "UpdatedTime": {
            "$numberLong": "16492173713636936"
        }
    },
    {
        "_id": 63,
        "Title": "控制台程序：创建 Net 6 Web 项目静态页面文件夹",
        "Content": "// 控制台程序：创建 Net 6 Web 项目静态页面文件夹\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nCreateJavascriptFolder();\n\nstatic void CreateJavascriptFolder()\n{\n    var s = ClipboardShare.GetText().Trim();\n    var dir = Path.Combine(@\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\",\n        s);\n    if (!Directory.Exists(dir))\n    {\n        Directory.CreateDirectory(dir);\n    }\n    var f = Path.Combine(dir, s + \".html\");\n    if (!File.Exists(f))\n    {\n        File.WriteAllText(f, $@\"<!DOCTYPE html>\n<html lang=\"\"en\"\">\n\n<head>\n    <meta charset=\"\"UTF-8\"\">\n    <meta http-equiv=\"\"X-UA-Compatible\"\" content=\"\"IE=edge\"\">\n    <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1.0\"\">\n    <title>Document</title>\n    <link rel=\"\"stylesheet\"\" href=\"\"index.css\"\">\n</head>\n\n<body>\n    <script src=\"\"index.js\"\"></script>\n</body>\n\n</html>\");\n    }\n    f = Path.Combine(dir, \"index.js\");\n    if (!File.Exists(f))\n    {\n        File.WriteAllText(f, String.Empty);\n    }\n\n    f = Path.Combine(dir, \"index.css\");\n    if (!File.Exists(f))\n    {\n        File.WriteAllText(f, String.Empty);\n    }\n\n}\n\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "Java",
        "CreationTime": {
            "$numberLong": "16492187261660521"
        },
        "UpdatedTime": {
            "$numberLong": "16492187261660521"
        }
    },
    {
        "_id": 64,
        "Title": "控制台程序：创建微信组件",
        "Content": "// 控制台程序：创建微信组件\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nstatic void GenerateWeChatComponents()\n{\n\n    var s = ClipboardShare.GetText().Trim();\n    var dir = Path.Combine(@\"C:\\Users\\Administrator\\WeChatProjects\\Yoga\\miniprogram\\components\", s);\n    dir.CreateDirectoryIfNotExists();\n\n    var f = Path.Combine(dir, s + \".js\");\n\n    if (!File.Exists(f))\n    {\n        File.WriteAllText(f, $@\"Component({{\n    /*\n    https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/\n{{\n  \"\"usingComponents\"\": {{\n    \"\"{s}\"\":\"\"../../components/{s}/{s}\"\"\n  }}\n}}\n    */\n    properties: {{\n        title: String,\n        value: {{\n            type: String,\n            value: ''\n        }}\n    }},\n    data: {{\n\n    }},\n    methods: {{\n\n\n\n    onTap() {{\n      this.triggerEvent('tap'); // bind:tap=\"\"onTap\"\"\n    }}\n\n    }}\n}})\");\n\n        f = Path.Combine(dir, s + \".wxml\");\n\n        if (!File.Exists(f))\n        {\n            File.WriteAllText(f, String.Empty);\n        }\n\n\n        f = Path.Combine(dir, s + \".json\");\n\n        if (!File.Exists(f))\n        {\n            File.WriteAllText(f, @$\"{{\n    \"\"component\"\": true,\n    \"\"usingComponents\"\": {{}}\n}}\");\n        }\n\n        f = Path.Combine(dir, s + \".wxss\");\n\n        if (!File.Exists(f))\n        {\n            File.WriteAllText(f, String.Empty);\n        }\n\n    }\n\n}\n\nGenerateWeChatComponents();\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16492187346808077"
        },
        "UpdatedTime": {
            "$numberLong": "16496981834522896"
        }
    },
    {
        "_id": 65,
        "Title": "控制台程序：发布静态页面",
        "Content": "// 控制台程序：发布静态页面\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing HtmlAgilityPack;\nusing NUglify;\nusing Renci.SshNet;\n\n\nvar vr = @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\";\n\nforeach (string key in Directory.GetDirectories(vr).Where(x => Directory.GetFiles(x, \"*.html\").Count() > 0).Select(x => Directory.GetFiles(x, \"*.html\").First(x => Path.GetFileName(Path.GetDirectoryName(x)) == Path.GetFileNameWithoutExtension(x))))\n{\n    Shared.PublishJavaScript(key);\n}\nvar dir = @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\";\nconst string host = \"159.75.78.126\";\nconst string username = \"root\";\nconst string password = \"q4so4tDtz!\";\n\n/*using var ssh = new SshClient(host, username, password);\nssh.Connect();*/\nusing var ftp = new SftpClient(host, username, password);\nftp.Connect();\nforeach (var file in Directory.GetFiles(dir))\n{\n    Console.WriteLine(\"/root/bin/wwwroot/\" + Path.GetFileName(file));\n    UploadFile(ftp, file, \"/root/bin/wwwroot/\" + Path.GetFileName(file), true);\n}\nstatic void UploadFile(SftpClient ftp, string filename, string serverFileName, bool checkDir = false)\n{\n    if (checkDir)\n    {\n        var pieces = serverFileName.Split('/');\n        var rootPath = string.Empty;\n        for (var i = 1; i < pieces.Length - 1; i++)\n        {\n            rootPath = rootPath + \"/\" + pieces[i];\n            if (!ftp.Exists(rootPath))\n            {\n                ftp.CreateDirectory(rootPath);\n            }\n        }\n    }\n\n    using var stream = File.OpenRead(filename);\n    ftp.UploadFile(stream, serverFileName);\n}\n\n\npublic static class Shared\n{\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static void PublishJavaScript(string fileName)\n    {\n        var fileList = Directory.GetFiles(Path.GetDirectoryName(Path.GetDirectoryName(fileName)));\n\n        foreach (var element in fileList)\n        {\n            if (element.Contains(Path.GetFileNameWithoutExtension(fileName) + \"_v_\"))\n            {\n                File.Delete(element);\n            }\n        }\n\n        string dir = Path.GetDirectoryName(fileName);\n\n        var hd = new HtmlDocument();\n        var content = fileName.ReadAllText();\n        \n\n\n        hd.LoadHtml(content);\n        PublishCss(fileName, hd);\n        var scripts = hd.DocumentNode.SelectNodes(\"//script\");\n        if (scripts == null)\n            return;\n\n        HtmlNode link = null;\n        var files = new List<string>();\n        foreach (var script in scripts)\n        {\n            var scriptName = script.GetAttributeValue(\"src\", string.Empty);\n\n\n            if (!scriptName.StartsWith(\"http://\") && !scriptName.StartsWith(\"https://\") &&\n                !string.IsNullOrWhiteSpace(scriptName))\n            {\n                files.Add(Path.Combine(dir, scriptName));\n\n                if (link == null)\n                    link = script.CloneNode(true);\n                script.Remove();\n            }\n        }\n\n        var sb = new StringBuilder();\n\n\n        foreach (var element in files)\n        {\n            Console.WriteLine(element);\n            sb.AppendLine(element.ReadAllText());\n        }\n\n        var versionName = string.Format(\"{0}_v_{1}.js\", Path.GetFileNameWithoutExtension(fileName),\n            GetHashForString(sb.ToString()));\n\n\n        link.SetAttributeValue(\"src\", versionName);\n        hd.DocumentNode.SelectSingleNode(\"//body\").ChildNodes.Append(link);\n        var head = hd.DocumentNode.SelectSingleNode(\"//head\");\n        var preload = hd.CreateElement(\"link\");\n        preload.SetAttributeValue(\"rel\", \"preload\");\n        preload.SetAttributeValue(\"as\", \"script\");\n        preload.SetAttributeValue(\"href\", versionName);\n        head.ChildNodes.Append(preload);\n        content = Regex.Replace(content, \"\\\\.\\\\./yoga-[a-z-]+/\", \"../\");\n        File.WriteAllText(Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(fileName)), versionName),\n             Regex.Replace(Uglify.Js(sb.ToString()).Code, \"\\\\.\\\\./yoga-[a-z-]+/\", \"../\"));\n        File.WriteAllText(\n            Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(fileName)), Path.GetFileName(fileName)),\n            Regex.Replace(hd.DocumentNode.OuterHtml, \"\\\\.\\\\./yoga-[a-z-]+/\", \"../\"));\n    }\n\n    private static void PublishCss(string fileName, HtmlDocument hd)\n    {\n        string dir = Path.GetDirectoryName(fileName);\n\n        var scripts = hd.DocumentNode.SelectNodes(\"//link\");\n        if (scripts == null)\n            return;\n        HtmlNode link = null;\n        var files = new List<string>();\n        foreach (var script in scripts)\n        {\n            var scriptName = script.GetAttributeValue(\"href\", string.Empty);\n\n\n            if (!scriptName.StartsWith(\"http://\") && !scriptName.StartsWith(\"https://\") &&\n                !string.IsNullOrWhiteSpace(scriptName))\n            {\n                files.Add(Path.Combine(dir, scriptName));\n                if (link == null)\n                    link = script.CloneNode(true);\n                script.Remove();\n            }\n        }\n\n        var sb = new StringBuilder();\n\n\n        foreach (var element in files)\n        {\n            sb.AppendLine(element.ReadAllText());\n        }\n\n        var versionName = string.Format(\"{0}_v_{1}.css\", Path.GetFileNameWithoutExtension(fileName),\n            GetHashForString(sb.ToString()));\n\n\n        link.SetAttributeValue(\"href\", versionName);\n        var head = hd.DocumentNode.SelectSingleNode(\"//head\");\n        var preload = hd.CreateElement(\"link\");\n        preload.SetAttributeValue(\"rel\", \"preload\");\n        preload.SetAttributeValue(\"as\", \"style\");\n        preload.SetAttributeValue(\"href\", versionName);\n        head.ChildNodes.Append(preload);\n        hd.DocumentNode.SelectSingleNode(\"//head\").ChildNodes.Append(link);\n\n\n        File.WriteAllText(Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(fileName)), versionName),\n            Uglify.Css(sb.ToString()).Code);\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16492291533613216"
        },
        "UpdatedTime": {
            "$numberLong": "16499123254126156"
        }
    },
    {
        "_id": 66,
        "Title": "控制台程序：LiteDB JSON",
        "Content": "// 控制台程序：LiteDB JSON\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\n\n static void CovertClassJSON()\n{\n    var s = ClipboardShare.GetText();\n    var matches = Regex.Matches(s, \"([a-zA-Z]+)\\\\s+?([a-zA-Z]+)(?= { )\")\n        .Select(i =>\n        {\n            return new[]\n            {\n                        i.Groups[1].Value,\n                        i.Groups[2].Value\n            };\n        });\n\n    var ls = new List<string>();\n\n    var prefix = Regex.Match(s, \"(?<= class )[A-Za-z]+\").Value.Decapitalize();\n    foreach (var match in matches)\n    {\n        if (match[0] == \"string\")\n        {\n            ls.Add(@$\"writer.WriteString(\"\"{match[1].Decapitalize()}\"\", {prefix}.{match[1]});\");\n        }\n        else\n        {\n            ls.Add(@$\"writer.WriteNumber(\"\"{match[1].Decapitalize()}\"\", {prefix}.{match[1]});\");\n        }\n    }\n\n    ClipboardShare.SetText(@$\"\n  var {prefix} = Database.GetCollection<{prefix.Capitalize()}>(\"\"{prefix}s\"\").FindOne(x => x.Id == reservation.{prefix.Capitalize()}Id);\n\nvar ms = new MemoryStream();\n    var writer = new Utf8JsonWriter(ms, new JsonWriterOptions\n    {{\n        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping\n    }}); ;\n    writer.WriteStartObject();\n    {string.Join(Environment.NewLine, ls)};\n    writer.WriteEndObject();\n    writer.Flush();\n\n  return  Encoding.UTF8.GetString(ms.ToArray());\");\n}\nstatic void CovertClassJSONArray()\n{\n    var s = ClipboardShare.GetText();\n    var matches = Regex.Matches(s, \"([a-zA-Z]+)\\\\s+?([a-zA-Z]+)(?= { )\")\n        .Select(i =>\n        {\n            return new[]\n            {\n                        i.Groups[1].Value,\n                        i.Groups[2].Value\n            };\n        });\n\n    var ls = new List<string>();\n\n    var prefix = Regex.Match(s, \"(?<= class )[A-Za-z]+\").Value.Decapitalize();\n\n    foreach (var match in matches)\n    {\n        if (match[0] == \"string\")\n        {\n            ls.Add(@$\"writer.WriteString(\"\"{match[1].Decapitalize()}\"\", {prefix}.{match[1]});\");\n        }\n        else\n        {\n            ls.Add(@$\"writer.WriteNumber(\"\"{match[1].Decapitalize()}\"\", {prefix}.{match[1]});\");\n        }\n    }\n\n    ClipboardShare.SetText(@$\"\n\nvar ms = new MemoryStream();\n    var writer = new Utf8JsonWriter(ms, new JsonWriterOptions\n    {{\n        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping\n    }}); ;\n    writer.WriteStartObject();\n\n writer.WriteStartArray(\"\"{prefix}s\"\");\n            foreach (var {prefix} in Database.GetCollection<{prefix.Capitalize()}>(\"\"{prefix}s\"\").FindAll())\n            {{\n                writer.WriteStartObject();\n                {string.Join(Environment.NewLine, ls)};\n                writer.WriteEndObject();\n            }}\n            writer.WriteEndArray();\n\nwriter.WriteEndObject();\n    writer.Flush();\n\n  return  Encoding.UTF8.GetString(ms.ToArray());\n\");\n}\nCovertClassJSONArray();\n//CovertClassJSON();\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16492343743100419"
        },
        "UpdatedTime": {
            "$numberLong": "16492343743100419"
        }
    },
    {
        "_id": 67,
        "Title": "控制台程序：运行 Net 服务器",
        "Content": "// 控制台程序：运行 Net 服务器\n\nusing System.Diagnostics;\n\nProcess.Start(new ProcessStartInfo\n{\n    FileName = \"dotnet\",\n    Arguments = \"run\",\n    WorkingDirectory = @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\"\n});",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16492843299869623"
        },
        "UpdatedTime": {
            "$numberLong": "16493904797426483"
        }
    },
    {
        "_id": 68,
        "Title": "控制台程序：清理微信样式文件",
        "Content": "// 控制台程序：清理微信样式文件\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nstatic void CleanCss()\n{\n    var src = ClipboardShare.GetFileNames().First(Directory.Exists);\n    if (src == null) return;\n\n    var content = File.ReadAllText(Path.Combine(src, \"index.wxss\"));\n    \n\n    var file = Path.Combine(src, \"index.wxml\");\n    if (!File.Exists(file)) return;\n    var selector = Regex.Matches(file.ReadAllText(), \"(class|id)=\\\"([a-zA-Z0-9_ -]+?)\\\"\")\n        .Cast<Match>()\n        .SelectMany(x => x.Groups[2].Value.Split(' '))\n        .Distinct();\n\n    var blocks = content.ToBlocks()\n        .Where(i =>\n        {\n            var p = i.SubstringBefore('{').Trim().Split(\" .:\".ToArray(), StringSplitOptions.RemoveEmptyEntries);\n            //Console.WriteLine(string.Join(\", \",selector));\n            return p.Intersect(selector).Any();\n        });\n\n    File.WriteAllText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), \"css.css\"),\n        string.Join(Environment.NewLine, blocks));\n}\n\nCleanCss();\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16493179893756112"
        },
        "UpdatedTime": {
            "$numberLong": "16493179893756112"
        }
    },
    {
        "_id": 69,
        "Title": "控制台程序：HTTP 请求",
        "Content": "// 控制台程序：HTTP 请求\n\n\n\n/*var content = new StringContent(\"\", System.Text.Encoding.UTF8, System.Net.Mime.MediaTypeNames.Application.Json);\nhrm.Content = content;*/\n\nstatic async Task Fetch(string fileName, string uri)\n{\n    var client = new HttpClient(new HttpClientHandler\n    {\n        UseProxy = false,\n    });\n\n    var hrm = new HttpRequestMessage(HttpMethod.Get, uri);\n    var response = await client.SendAsync(hrm);\n\n    File.WriteAllText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), fileName), await response.Content.ReadAsStringAsync());\n}\n\nawait Fetch(\"courses.json\", \n    \"https://lucidu.cn/api/courses?dateTime=1649347200000&endTime=0&openId=oQOVx5Dxk0E6NQO-Ojoyuky2GVR8\");",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16493324372024493"
        },
        "UpdatedTime": {
            "$numberLong": "16493851190100530"
        }
    },
    {
        "_id": 70,
        "Title": "控制台程序：格式化 HTML CSS",
        "Content": "// 控制台程序：格式化 HTML CSS\n\nusing NUglify;\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\n/*\nvar s = ClipboardShare.GetText();\ns = Uglify.Css(s, NUglify.Css.CssSettings.Pretty()).Code;\nClipboardShare.SetText(s);\n*/\nvar s = ClipboardShare.GetText();\ns = Uglify.Html(s, NUglify.Html.HtmlSettings.Pretty()).Code;\nClipboardShare.SetText(s.SubstringAfter(\"<body>\").SubstringBefore(\"</body>\"));\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n    public static string LowercaseAndDash(this string value)\n    {\n        return Regex.Replace(value, \"(?<=[a-z])[A-Z]\", m => \"-\" + m.Value);\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16493342133714948"
        },
        "UpdatedTime": {
            "$numberLong": "16493342133714948"
        }
    },
    {
        "_id": 71,
        "Title": "控制台程序：整合 Chrome CSS",
        "Content": "// 控制台程序：整合 Chrome CSS\n\nusing NUglify;\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\n static void FormatStyleInSingleLine()\n{\n    var lines = ClipboardShare.GetText().Split('\\n').Where(i => !string.IsNullOrWhiteSpace(i))\n        .Select(x => x.Trim());\n    var das = lines.Where(i => i.StartsWith(\"--\"));\n    var values = lines.Where(i => !i.StartsWith(\"--\"));\n    var ls = new List<string>();\n    foreach (var item in values)\n    {\n        var m = Regex.Match(item, \"(?!var\\\\()--[^)]+(?=\\\\))\");\n        if (m.Success)\n        {\n            ls.Add(Regex.Replace(item, \"var\\\\((--[^)]+)\\\\)\", m =>\n            {\n                var value = das.First(i => i.SubstringBefore(':') == m.Groups[1].Value).SubstringAfter(':')\n                    .TrimEnd(';');\n                while (Regex.IsMatch(value, \"(?!var\\\\()--[^)]+(?=\\\\))\"))\n                {\n                    value = Regex.Replace(value, \"var\\\\((--[^)]+)\\\\)\",\n                        m => das.First(i => i.SubstringBefore(':') == m.Groups[1].Value).SubstringAfter(':')\n                            .TrimEnd(';'));\n                }\n\n                return value;\n            }));\n        }\n        else\n        {\n            ls.Add(item);\n        }\n    }\n\n    ClipboardShare.SetText(string.Format(@\".p{{\n                {0}\n                }}\",\n        string.Join(\"\\n\", ls),\n        Environment.NewLine));\n}\nFormatStyleInSingleLine();\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n    public static string LowercaseAndDash(this string value)\n    {\n        return Regex.Replace(value, \"(?<=[a-z])[A-Z]\", m => \"-\" + m.Value);\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16493350546352340"
        },
        "UpdatedTime": {
            "$numberLong": "16493350546352340"
        }
    },
    {
        "_id": 72,
        "Title": "控制台程序：格式化JSON",
        "Content": "// 控制台程序：格式化JSON\n\nusing System.ComponentModel;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Text.Json;\n\nClipboardShare.SetText(JsonSerializer.Serialize(JsonDocument.Parse(ClipboardShare.GetText()), new System.Text.Json.JsonSerializerOptions\n{\n    WriteIndented = true,\n}));\n\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16493908116176495"
        },
        "UpdatedTime": {
            "$numberLong": "16493908116176495"
        }
    },
    {
        "_id": 73,
        "Title": "控制台程序：创建 README",
        "Content": "// 控制台程序：创建 README\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\n\nvar dir = ClipboardShare.GetFileNames().First(Directory.Exists);\n\nvar file = Path.Combine(dir, \"README.md\");\nvar index = 0;\nwhile (File.Exists(file))\n{\n    file = Path.Combine(dir, \"README\" + (++index) + \".md\");\n}\nFile.Create(file).Dispose();\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n    public static string LowercaseAndDash(this string value)\n    {\n        return Regex.Replace(value, \"(?<=[a-z])[A-Z]\", m => \"-\" + m.Value);\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16494587022435499"
        },
        "UpdatedTime": {
            "$numberLong": "16494587022435499"
        }
    },
    {
        "_id": 74,
        "Title": "控制台程序：创建微信页面",
        "Content": "// 控制台程序：创建微信页面\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nstatic void GenerateWeChatComponents()\n{\n\n    var s = ClipboardShare.GetText().Trim();\n    var dir = Path.Combine(@\"C:\\Users\\Administrator\\WeChatProjects\\Yoga\\miniprogram\\pages\\admin\", String.Empty);\n    dir.CreateDirectoryIfNotExists();\n\n    var f = Path.Combine(dir, s + \".js\");\n\n    if (!File.Exists(f))\n    {\n        File.WriteAllText(f, $@\"const share = require('../../share.js');\nconst api = require('../../api');\nconst loader = require('../../loader');\nconst app = getApp();\n\n// /pages/admin/{s}\n\nPage({{\n    data: {{\n    }},\n    async onLoad(options) {{\n        wx.showShareMenu({{\n            withShareTicket: true,\n            menus: ['shareAppMessage', 'shareTimeline']\n        }});\n    }},\n    onShareAppMessage() {{\n        return {{\n            title: ''\n        }}\n    }},\n}})\");\n\n        f = Path.Combine(dir, s + \".wxml\");\n\n        if (!File.Exists(f))\n        {\n            File.WriteAllText(f, String.Empty);\n        }\n\n\n        f = Path.Combine(dir, s + \".json\");\n\n        if (!File.Exists(f))\n        {\n            File.WriteAllText(f, @$\"{{\n    \"\"usingComponents\"\": {{\n\"\"action\"\": \"\"../../components/action/action\"\",\n    \"\"dialog\"\": \"\"../../components/dialog/dialog\"\"\n}}\n}}\");\n        }\n\n        f = Path.Combine(dir, s + \".wxss\");\n\n        if (!File.Exists(f))\n        {\n            File.WriteAllText(f, String.Empty);\n        }\n\n    }\n\n}\n\nGenerateWeChatComponents();\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16494591067161401"
        },
        "UpdatedTime": {
            "$numberLong": "16497300663421241"
        }
    },
    {
        "_id": 75,
        "Title": "控制台程序：格式化 Chrome CSS",
        "Content": "// 控制台程序：格式化 Chrome CSS\n\nusing NUglify;\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nstatic void FormatStyleInSingleLine()\n{\n    \n        var cn = string.Empty;\n        \n        \n        while (true)\n        {\n            var b = RandomNumberGenerator.GetBytes(1);\n            if (b[0] >= 97 && b[0] <= 122)\n                cn += (char)b[0];\n            if (cn.Length >= 6) break;\n        };\n       \n\n\n     \n    var lines = ClipboardShare.GetText().Split('\\n').Where(i => !string.IsNullOrWhiteSpace(i))\n        .Select(x => x.Trim());\n    var das = lines.Where(i => i.StartsWith(\"--\"));\n    var values = lines.Where(i => !i.StartsWith(\"--\"));\n    var ls = new List<string>();\n    foreach (var item in values)\n    {\n        var m = Regex.Match(item, \"(?!var\\\\()--[^)]+(?=\\\\))\");\n        if (m.Success)\n        {\n            ls.Add(Regex.Replace(item, \"var\\\\((--[^)]+)\\\\)\", m =>\n            {\n                var value = das.First(i => i.SubstringBefore(':') == m.Groups[1].Value).SubstringAfter(':')\n                    .TrimEnd(';');\n                while (Regex.IsMatch(value, \"(?!var\\\\()--[^)]+(?=\\\\))\"))\n                {\n                    value = Regex.Replace(value, \"var\\\\((--[^)]+)\\\\)\",\n                        m => das.First(i => i.SubstringBefore(':') == m.Groups[1].Value).SubstringAfter(':')\n                            .TrimEnd(';'));\n                }\n\n                return value;\n            }));\n        }\n        else\n        {\n            ls.Add(item);\n        }\n    }\n\n\n    ClipboardShare.SetText(string.Format(@\"\n<style>\n.{0}{{\n{1}\n}}\n</style>\n<div class=\"\"{0}\"\">\n</div>\",cn,\n        string.Join(\"\\n\", ls)));\n}\nFormatStyleInSingleLine();\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n    public static string LowercaseAndDash(this string value)\n    {\n        return Regex.Replace(value, \"(?<=[a-z])[A-Z]\", m => \"-\" + m.Value);\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16494644024329907"
        },
        "UpdatedTime": {
            "$numberLong": "16494644024329907"
        }
    },
    {
        "_id": 76,
        "Title": "控制台程序：创建 Web 组件",
        "Content": "// 控制台程序：创建 Web 组件\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\n\nvar s = ClipboardShare.GetText().Trim();\n\nvar name = s.CamelCase().Capitalize();\nvar element = s.LowercaseAndDash();\n\nFile.WriteAllText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), element + \".js\"), $@\"(function () {{\n    class Custom{name} extends HTMLElement {{\n\n        static get observedAttributes() {{\n            return [\"\"title\"\"];\n        }}\n\n        constructor() {{\n            super();\n\n            this.root = this.attachShadow({{mode: 'open'}});\n            this.container = document.createElement('div');\n            this.root.appendChild(this.container);\n            this.container.innerHTML = Custom{name}.template();\n\n        }}\n\n        connectedCallback() {{\n            this.addEventListener('click', evt => {{\n                evt.stopPropagation();\n                this.dispatchEvent(new CustomEvent('tap'));\n            }});\n            this.container.querySelectorAll('.c3-overlay,.close-button')\n                .forEach(element => {{\n                    element.addEventListener('click', evt => {{\n                        this.remove();\n                    }});\n                }});\n\n        }}\n\n        disconnectedCallback() {{\n\n        }}\n\n        attributeChangedCallback(name, oldValue, newValue) {{\n            if (name === 'title') {{\n                this.container.querySelector('').textContent = newValue;\n            }}\n        }}\n\n        static template() {{\n            return `\n            ${{Custom{name}.style()}}\n            `;\n        }}\n\n        static style() {{\n            return `\n            <style>\n            \n            </style>`;\n        }}\n    }}\n\n    customElements.define('custom-{element}', Custom{name});\n    /*\n    https://developer.mozilla.org/docs/Web/API/CustomEvent\n    https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements\n    <custom-{element}></custom-{element}>\n    <script src=\"\"../components/{element}.js\"\" ></script>\n    const custom{name}=document.querySelector('custom-{element}');\n    const custom{name}=document.createElement('custom-{element}');\n    document.body.appendChild(custom{name});\n      */\n}})();\");\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n    public static string LowercaseAndDash(this string value)\n    {\n        return Regex.Replace(value, \"(?<=[a-z])[A-Z]\", m => \"-\" + m.Value);\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16496844852483774"
        },
        "UpdatedTime": {
            "$numberLong": "16496844852483774"
        }
    },
    {
        "_id": 77,
        "Title": "控制台程序：格式数据类",
        "Content": "// 控制台程序：格式数据类\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\n\nstatic string Assignment(string s)\n{\n    \n\n    var matches = Regex.Matches(s, \"(?<=public )(string|int|long|bool|IEnumerable<string>) ([a-zA-Z_0-9]+)(?= { get; set; })\")\n        .Select(i => new string[] { i.Groups[1].Value, i.Groups[2].Value });\n    var m = Regex.Match(s, \"(?<=public class )[a-zA-Z_0-9]+\").Value;\n    var ls = new List<string>();\n    foreach (var match in matches)\n    {\n        if (match[0] == \"int\" || (match[0] == \"long\" && match[1] != \"CreationTime\" && match[1] != \"UpdatedTime\"))\n        {\n            ls.Add($@\"if({m.Decapitalize()}.{match[1]}!=0){{\nold{m}.{match[1]}={m.Decapitalize()}.{match[1]};\n}}\");\n        }\n        else if (match[0] == \"string\" || match[0] == \"IEnumerable<string>\")\n        {\n            ls.Add($@\"if({m.Decapitalize()}.{match[1]}!=null){{\nold{m}.{match[1]}={m.Decapitalize()}.{match[1]};\n}}\");\n        }\n        else if (match[0] == \"bool\")\n        {\n            ls.Add($@\"if({m.Decapitalize()}.{match[1]}){{\nold{m}.{match[1]}={m.Decapitalize()}.{match[1]};\n}}\");\n        }\n    }\n\n    return string.Join(Environment.NewLine, ls);\n}\n\nstatic string CreateXMLCode(string s)\n{\n    var matches = Regex.Matches(s, \"(?<=public )(string|int|long|bool|IEnumerable<string>) ([a-zA-Z_0-9]+)(?= { get; set; })\")\n        .Select(i => new string[] { i.Groups[1].Value, i.Groups[2].Value });\n    var m = Regex.Match(s, \"(?<=public class )[a-zA-Z_0-9]+\").Value;\n    var ls = new List<string>();\n    foreach (var match in matches)\n    {\n        \n            ls.Add($@\"<field name=\"\"{match[1].Decapitalize()}\"\" items=\"\"{{{{{match[1].Decapitalize()}s}}}}\"\" show=\"\"{{{{showDropdown?true:false}}}}\"\"  disable=\"\"{{{{true}}}}\"\" label=\"\"课程名称\"\" placeholder=\"\"请输入课程名称\"\" bind:input=\"\"onInput\"\"></field>\");\n    }\n\n    return string.Join(Environment.NewLine, ls);\n}\nvar s = ClipboardShare.GetText();\nvar ls=new List<string>();\nls.Add(Assignment(s));\nls.Add(CreateXMLCode(s));\nClipboardShare.SetText(string.Join(Environment.NewLine,ls) );\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16497743432174147"
        },
        "UpdatedTime": {
            "$numberLong": "16497743432174147"
        }
    },
    {
        "_id": 78,
        "Title": "控制台程序：移除空行",
        "Content": "// 控制台程序：移除空行\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nvar dir = ClipboardShare.GetFileNames().First(File.Exists);\n\nvar lines = File.ReadAllLines(dir).Select(i=>i.TrimEnd()).Where(i=>!string.IsNullOrWhiteSpace(i));\n\nFile.WriteAllLines(dir, lines);\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16499101319328653"
        },
        "UpdatedTime": {
            "$numberLong": "16499101319328653"
        }
    },
    {
        "_id": 79,
        "Title": "控制台程序：整理文件夹",
        "Content": "// 控制台程序：整理文件夹\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nvar v = ClipboardShare.GetFileNames();\nvar dir = v == null\n    ? System.Environment.GetFolderPath(System.Environment.SpecialFolder.Desktop)\n    : v.First(Directory.Exists);\nvar rr = Path.Combine(dir, \"Resources\", \"Other\");\nrr.CreateDirectoryIfNotExists();\nvar files = Directory.GetFiles(dir);\nforeach (var element in files)\n{\n    try\n    {\n        var t = Path.Combine(rr, Path.GetExtension(element).ToUpper());\n        t.CreateDirectoryIfNotExists();\n        var tt = Path.Combine(t, Path.GetFileName(element));\n        if (File.Exists(tt))\n            continue;\n        File.Move(element, tt);\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n}\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16499102254003952"
        },
        "UpdatedTime": {
            "$numberLong": "16499102254003952"
        }
    },
    {
        "_id": 80,
        "Title": "控制台程序：上传静态文件",
        "Content": "// 控制台程序：上传静态文件\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing HtmlAgilityPack;\nusing NUglify;\nusing Renci.SshNet;\n\n\nvar vr = @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\";\n\nforeach (string key in Directory.GetDirectories(vr).Where(x => Directory.GetFiles(x, \"*.html\").Count() > 0).Select(x => Directory.GetFiles(x, \"*.html\").First(x => Path.GetFileName(Path.GetDirectoryName(x)) == Path.GetFileNameWithoutExtension(x))))\n{\n    Shared.PublishJavaScript(key);\n}\nvar dir = @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\\wwwroot\";\nconst string host = \"159.75.78.126\";\nconst string username = \"root\";\nconst string password = \"q4so4tDtz!\";\n\n/*using var ssh = new SshClient(host, username, password);\nssh.Connect();*/\nusing var ftp = new SftpClient(host, username, password);\nftp.Connect();\nforeach (var file in Directory.GetFiles(dir))\n{\n    Console.WriteLine(\"/root/bin/wwwroot/\" + Path.GetFileName(file));\n    UploadFile(ftp, file, \"/root/bin/wwwroot/\" + Path.GetFileName(file), true);\n}\nstatic void UploadFile(SftpClient ftp, string filename, string serverFileName, bool checkDir = false)\n{\n    if (checkDir)\n    {\n        var pieces = serverFileName.Split('/');\n        var rootPath = string.Empty;\n        for (var i = 1; i < pieces.Length - 1; i++)\n        {\n            rootPath = rootPath + \"/\" + pieces[i];\n            if (!ftp.Exists(rootPath))\n            {\n                ftp.CreateDirectory(rootPath);\n            }\n        }\n    }\n\n    using var stream = File.OpenRead(filename);\n    ftp.UploadFile(stream, serverFileName);\n}\n\n\npublic static class Shared\n{\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static void PublishJavaScript(string fileName)\n    {\n        var fileList = Directory.GetFiles(Path.GetDirectoryName(Path.GetDirectoryName(fileName)));\n\n        foreach (var element in fileList)\n        {\n            if (element.Contains(Path.GetFileNameWithoutExtension(fileName) + \"_v_\"))\n            {\n                File.Delete(element);\n            }\n        }\n\n        string dir = Path.GetDirectoryName(fileName);\n\n        var hd = new HtmlDocument();\n        var content = fileName.ReadAllText();\n        \n\n\n        hd.LoadHtml(content);\n        PublishCss(fileName, hd);\n        var scripts = hd.DocumentNode.SelectNodes(\"//script\");\n        if (scripts == null)\n            return;\n\n        HtmlNode link = null;\n        var files = new List<string>();\n        foreach (var script in scripts)\n        {\n            var scriptName = script.GetAttributeValue(\"src\", string.Empty);\n\n\n            if (!scriptName.StartsWith(\"http://\") && !scriptName.StartsWith(\"https://\") &&\n                !string.IsNullOrWhiteSpace(scriptName))\n            {\n                files.Add(Path.Combine(dir, scriptName));\n\n                if (link == null)\n                    link = script.CloneNode(true);\n                script.Remove();\n            }\n        }\n\n        var sb = new StringBuilder();\n\n\n        foreach (var element in files)\n        {\n            Console.WriteLine(element);\n            sb.AppendLine(element.ReadAllText());\n        }\n\n        var versionName = string.Format(\"{0}_v_{1}.js\", Path.GetFileNameWithoutExtension(fileName),\n            GetHashForString(sb.ToString()));\n\n\n        link.SetAttributeValue(\"src\", versionName);\n        hd.DocumentNode.SelectSingleNode(\"//body\").ChildNodes.Append(link);\n        var head = hd.DocumentNode.SelectSingleNode(\"//head\");\n        var preload = hd.CreateElement(\"link\");\n        preload.SetAttributeValue(\"rel\", \"preload\");\n        preload.SetAttributeValue(\"as\", \"script\");\n        preload.SetAttributeValue(\"href\", versionName);\n        head.ChildNodes.Append(preload);\n        content = Regex.Replace(content, \"\\\\.\\\\./yoga-[a-z-]+/\", \"../\");\n        File.WriteAllText(Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(fileName)), versionName),\n             Regex.Replace(Uglify.Js(sb.ToString()).Code, \"\\\\.\\\\./yoga-[a-z-]+/\", \"../\"));\n        File.WriteAllText(\n            Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(fileName)), Path.GetFileName(fileName)),\n            Regex.Replace(hd.DocumentNode.OuterHtml, \"\\\\.\\\\./yoga-[a-z-]+/\", \"../\"));\n    }\n\n    private static void PublishCss(string fileName, HtmlDocument hd)\n    {\n        string dir = Path.GetDirectoryName(fileName);\n\n        var scripts = hd.DocumentNode.SelectNodes(\"//link\");\n        if (scripts == null)\n            return;\n        HtmlNode link = null;\n        var files = new List<string>();\n        foreach (var script in scripts)\n        {\n            var scriptName = script.GetAttributeValue(\"href\", string.Empty);\n\n\n            if (!scriptName.StartsWith(\"http://\") && !scriptName.StartsWith(\"https://\") &&\n                !string.IsNullOrWhiteSpace(scriptName))\n            {\n                files.Add(Path.Combine(dir, scriptName));\n                if (link == null)\n                    link = script.CloneNode(true);\n                script.Remove();\n            }\n        }\n\n        var sb = new StringBuilder();\n\n\n        foreach (var element in files)\n        {\n            sb.AppendLine(element.ReadAllText());\n        }\n\n        var versionName = string.Format(\"{0}_v_{1}.css\", Path.GetFileNameWithoutExtension(fileName),\n            GetHashForString(sb.ToString()));\n\n\n        link.SetAttributeValue(\"href\", versionName);\n        var head = hd.DocumentNode.SelectSingleNode(\"//head\");\n        var preload = hd.CreateElement(\"link\");\n        preload.SetAttributeValue(\"rel\", \"preload\");\n        preload.SetAttributeValue(\"as\", \"style\");\n        preload.SetAttributeValue(\"href\", versionName);\n        head.ChildNodes.Append(preload);\n        hd.DocumentNode.SelectSingleNode(\"//head\").ChildNodes.Append(link);\n\n\n        File.WriteAllText(Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(fileName)), versionName),\n            Uglify.Css(sb.ToString()).Code);\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16499121955442175"
        },
        "UpdatedTime": {
            "$numberLong": "16499121955442175"
        }
    },
    {
        "_id": 81,
        "Title": "控制台程序：VSC代码段",
        "Content": "// 控制台程序：VSC代码段\n\nusing System.ComponentModel;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\n// '}'.codePointAt(0).toString(16) \\u007b\nvar str = ClipboardShare.GetText().Trim();\nvar obj = new Dictionary<string, dynamic>();\nvar body = new Dictionary<string, List<string>>();\n\nobj.Add(\"prefix\", \"prefix\");\nobj.Add(\"body\", str.Split(new char[] { '\\n' }).Select(i => i.LiterallyInCs()).ToList());\n\nvar res = new Dictionary<string, dynamic>();\nres.Add(\"js\", obj);\nvar text = JsonSerializer.Serialize(res).FormatJson();\nClipboardShare.SetText(text.Substring(1, text.Length - 2));\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16499210675731919"
        },
        "UpdatedTime": {
            "$numberLong": "16499210675731919"
        }
    },
    {
        "_id": 82,
        "Title": "控制台程序：压缩代码目录",
        "Content": "// 控制台程序：压缩代码目录\n\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.IO.Compression;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nvar directories = new string[]\n            {\n                @\"C:\\Users\\Administrator\\WeChatProjects\\Yoga\",\n               // @\"C:\\Users\\Administrator\\Desktop\\源代码\",\n                @\"C:\\Users\\Administrator\\RiderProjects\\Lucidu\\Lucidu\"\n            }; //ClipboardShare.GetFileNames().Where(Directory.Exists);\nvar x = \"D:\\\\Resources\\\\Zip\";\nx.CreateDirectoryIfNotExists();\ndirectories.AsParallel().ForAll(async dir =>\n{\n    Console.WriteLine(\"[开始压缩目录]: {0}\", dir);\n    var stopwatch = new Stopwatch();\n    stopwatch.Start();\n\n    var desitination = x + @\"\\\" + Path.GetFileName(dir) + \" \" +\n                       DateTime.Now.ToString(\"yyyy-MM-dd hh-mm-ss\") + \".zip\";\n    var files = new string[] { };\n\n    files = Directory.GetFiles(dir, \"*\", SearchOption.AllDirectories);\n\n    var length = dir.Length;\n    using (var s = new FileStream(desitination, FileMode.Create)) // , Encoding.GetEncoding(\"gbk\")\n    using (var a = new ZipArchive(s, ZipArchiveMode.Create, true))\n    {\n        var t = new Regex(\n            \"\\\\\\\\(.gradle|.cxx|.git|.idea|.vscode|bin|obj|images|build|distribution|release|cmake-build-debug|miniprogram_npm|node_modules)\\\\\\\\\");\n\n        foreach (var element in files)\n        {\n            if (\n                t.IsMatch(element))\n                continue;\n            a.CreateEntryFromFile(element, element.Replace('\\\\', '/').Substring(length + 1));\n        }\n    }\n\n    Console.WriteLine(\"[完成压缩目录]: {0}秒,{1}\", stopwatch.ElapsedMilliseconds / 1000, dir);\n});\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16499302834326643"
        },
        "UpdatedTime": {
            "$numberLong": "16499329564348031"
        }
    },
    {
        "_id": 83,
        "Title": "控制台程序：压缩书籍目录",
        "Content": "// 控制台程序：压缩书籍目录\n\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.IO.Compression;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\nDirectory.GetDirectories(@\"D:\\Books\")\n                .AsParallel()\n                .ForAll(f => { ZipFile.CreateFromDirectory(f, f + \".zip\"); });\n\npublic static class ClipboardShare\n{\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern IntPtr SetClipboardData(uint uFormat, IntPtr data);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    static extern IntPtr GlobalLock(IntPtr hMem);\n\n    [DllImport(\"Kernel32.dll\", SetLastError = true)]\n    static extern int GlobalSize(IntPtr hMem);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool GlobalUnlock(IntPtr hMem);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool IsClipboardFormatAvailable(uint format);\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool OpenClipboard(IntPtr hWndNewOwner);\n\n    [DllImport(\"user32.dll\")]\n    static extern bool EmptyClipboard();\n\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    static extern bool CloseClipboard();\n\n    [DllImport(\"shell32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);\n\n    [DllImport(\"User32.dll\", SetLastError = true)]\n    static extern IntPtr GetClipboardData(uint uFormat);\n\n\n    const uint cfUnicodeText = 13;\n\n    public static void OpenClipboard()\n    {\n        var num = 10;\n        while (true)\n        {\n            if (OpenClipboard(IntPtr.Zero))\n            {\n                break;\n            }\n\n            if (--num == 0)\n            {\n                ThrowWin32();\n            }\n\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n\n    public static void SetText(string text)\n    {\n        OpenClipboard();\n        EmptyClipboard();\n        IntPtr hGlobal = IntPtr.Zero;\n        try\n        {\n            var bytes = (text.Length + 1) * 2;\n            hGlobal = Marshal.AllocHGlobal(bytes);\n            if (hGlobal == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            var target = GlobalLock(hGlobal);\n            if (target == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            try\n            {\n                Marshal.Copy(text.ToCharArray(), 0, target, text.Length);\n            }\n            finally\n            {\n                GlobalUnlock(target);\n            }\n\n            if (SetClipboardData(cfUnicodeText, hGlobal) == IntPtr.Zero)\n            {\n                ThrowWin32();\n            }\n\n            hGlobal = IntPtr.Zero;\n        }\n        finally\n        {\n            if (hGlobal != IntPtr.Zero)\n            {\n                Marshal.FreeHGlobal(hGlobal);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    static void ThrowWin32()\n    {\n        throw new Win32Exception(Marshal.GetLastWin32Error());\n    }\n\n    public static string GetText()\n    {\n        if (!IsClipboardFormatAvailable(cfUnicodeText))\n        {\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        IntPtr pointer = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(cfUnicodeText);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            pointer = GlobalLock(handle);\n            if (pointer == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var size = GlobalSize(handle);\n            var buff = new byte[size];\n            Marshal.Copy(pointer, buff, 0, size);\n            return Encoding.Unicode.GetString(buff).TrimEnd('\\0');\n        }\n        finally\n        {\n            if (pointer != IntPtr.Zero)\n            {\n                GlobalUnlock(handle);\n            }\n\n            CloseClipboard();\n        }\n    }\n\n    public static IEnumerable<string> GetFileNames()\n    {\n        if (!IsClipboardFormatAvailable(15))\n        {\n            var n = GetText();\n            if (Directory.Exists(n) || File.Exists(n))\n            {\n                return new string[] { n };\n            }\n\n            return null;\n        }\n\n        IntPtr handle = IntPtr.Zero;\n        try\n        {\n            OpenClipboard();\n            handle = GetClipboardData(15);\n            if (handle == IntPtr.Zero)\n            {\n                return null;\n            }\n\n            var count = DragQueryFile(handle, unchecked((int)0xFFFFFFFF), null, 0);\n            if (count == 0)\n            {\n                return Enumerable.Empty<string>();\n            }\n\n            var sb = new StringBuilder(260);\n            var files = new string[count];\n            for (var i = 0; i < count; i++)\n            {\n                var charlen = DragQueryFile(handle, i, sb, sb.Capacity);\n                var s = sb.ToString();\n                if (s.Length > charlen)\n                {\n                    s = s.Substring(0, charlen);\n                }\n\n                files[i] = s;\n            }\n\n            return files;\n        }\n        finally\n        {\n            CloseClipboard();\n        }\n    }\n}\n\npublic static class Shared\n{\n    private const string Quote = \"\\\"\";\n\n    public static void CreateDirectoryIfNotExists(this string path)\n    {\n        if (Directory.Exists(path))\n            return;\n        Directory.CreateDirectory(path);\n    }\n\n    public static string SubstringAfter(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringAfterLast(this string value, char delimiter)\n    {\n        var index = value.LastIndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + 1);\n    }\n\n    public static string SubstringBefore(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    public static string LiterallyInCs(this string txt)\n    {\n        //escape appropriately\n        //escape the quotes with \"\"\n        txt = txt.Trim() //ignore leading and trailing blank lines\n            .Replace(\"\\\\\", \"\\\\\\\\\") //escape backslashes\n            .Replace(Quote, \"\\\\\\\"\") //escape quotes\n            .Replace(\"\\t\", \"\\\\t\") //escape tabs\n            .Replace(\"\\r\", \"\\\\r\") //cr\n            .Replace(\"\\n\", \"\\\\n\"); //lf\n                                   //.Replace(\"\\\"\\\" + \", \"\") //\"\" +Quote + + Quote\n                                   //.Replace(\"\\\\r\\\\n\", \"\\\" + Environment.NewLine + \\r\\n\\\"\"); //escaped crlf to Env.NewLine;;\n        return txt;\n    }\n\n    public static string SubstringAfter(this string value, string delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(index + delimiter.Length);\n    }\n\n    public static string SubstringBefore(this string value, char delimiter)\n    {\n        var index = value.IndexOf(delimiter);\n        if (index == -1)\n            return value;\n        else\n            return value.Substring(0, index);\n    }\n\n    private static string Base64UrlEncode(byte[] input)\n    {\n        return Base64UrlEncode(input, offset: 0, count: input.Length);\n    }\n\n    private static string Base64UrlEncode(byte[] input, int offset, int count)\n    {\n        // Special-case empty input\n        if (count == 0)\n        {\n            return string.Empty;\n        }\n\n        var buffer = new char[GetArraySizeRequiredToEncode(count)];\n        var numBase64Chars = Base64UrlEncode(input, offset, buffer, outputOffset: 0, count: count);\n\n        return new String(buffer, startIndex: 0, length: numBase64Chars);\n    }\n\n    private static int GetArraySizeRequiredToEncode(int count)\n    {\n        var numWholeOrPartialInputBlocks = checked(count + 2) / 3;\n        return checked(numWholeOrPartialInputBlocks * 4);\n    }\n\n    private static int Base64UrlEncode(byte[] input, int offset, char[] output, int outputOffset, int count)\n    {\n        var arraySizeRequired = GetArraySizeRequiredToEncode(count);\n\n\n        // Special-case empty input.\n        if (count == 0)\n        {\n            return 0;\n        }\n\n        // Use base64url encoding with no padding characters. See RFC 4648, Sec. 5.\n\n        // Start with default Base64 encoding.\n        var numBase64Chars = Convert.ToBase64CharArray(input, offset, count, output, outputOffset);\n\n        // Fix up '+' -> '-' and '/' -> '_'. Drop padding characters.\n        for (var i = outputOffset; i - outputOffset < numBase64Chars; i++)\n        {\n            var ch = output[i];\n            if (ch == '+')\n            {\n                output[i] = '-';\n            }\n            else if (ch == '/')\n            {\n                output[i] = '_';\n            }\n            else if (ch == '=')\n            {\n                // We've reached a padding character; truncate the remainder.\n                return i - outputOffset;\n            }\n        }\n\n        return numBase64Chars;\n    }\n\n    private static string GetHashForString(this string str)\n    {\n        // https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Razor/Infrastructure/DefaultFileVersionProvider.cs\n        using (var sha256 = new SHA256CryptoServiceProvider())\n        {\n            var hash = sha256.ComputeHash(new UTF8Encoding(false).GetBytes(str));\n            return Base64UrlEncode(hash);\n        }\n    }\n\n    public static string ReadAllText(this string path)\n    {\n        var encoding = new UTF8Encoding(false);\n        using (StreamReader sr = new StreamReader(path, encoding, true))\n            return sr.ReadToEnd();\n    }\n\n    public static IEnumerable<string> ToBlocks(this string value)\n    {\n        var count = 0;\n        StringBuilder sb = new StringBuilder();\n        List<string> ls = new List<string>();\n        foreach (var t in value)\n        {\n            sb.Append(t);\n            switch (t)\n            {\n                case '{':\n                    count++;\n                    break;\n                case '}':\n                    {\n                        count--;\n                        if (count == 0)\n                        {\n                            ls.Add(sb.ToString());\n                            sb.Clear();\n                        }\n\n                        break;\n                    }\n            }\n        }\n\n        return ls;\n    }\n\n    public static async Task<string> TranslateChinese()\n    {\n        return await Task.Run(() => { return Google(); });\n    }\n\n    private static string Google()\n    {\n        var q = ClipboardShare.GetText();\n        if (string.IsNullOrEmpty(q))\n            return string.Empty;\n        var uri = \"https://translate.google.com/translate_a/single?client=gtx&sl=auto&tl=\"\n                  + \"en\" + \"&dt=t&dt=bd&ie=UTF-8&oe=UTF-8&dj=1&source=icon&q=\" + WebUtility.UrlEncode(q);\n        var req = (HttpWebRequest)WebRequest.Create(uri);\n        req.Proxy = new WebProxy(\"127.0.0.1\", 10809);\n        req.UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\";\n        req.Headers.Add(\"Accept-Encoding\", \"gzip, deflate, br\");\n        req.Method = \"GET\";\n        req.AutomaticDecompression = DecompressionMethods.GZip;\n        var res = req.GetResponse();\n\n        using var stream = res.GetResponseStream();\n        using var streamReader = new StreamReader(stream);\n        var content = streamReader.ReadToEnd();\n        var js = JsonDocument.Parse(content);\n        var sentences = js.RootElement.GetProperty(\"sentences\");\n        var sb = new StringBuilder();\n        var fname = sentences[0].GetProperty(\"trans\").GetString();\n        sb.Append(fname);\n        return sb.ToString();\n    }\n\n    public static string CamelCase(this string value)\n    {\n        return\n            Regex.Replace(\n                Regex.Replace(value.ToLower(), \"[\\\\-_ ]+([a-zA-Z])\", m => m.Groups[1].Value.ToUpper()),\n                \"\\\\s+\",\n                \"\"\n            );\n    }\n\n    public static String Capitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToUpper();\n        if (char.IsUpper(s[0]))\n            return s;\n        return char.ToUpper(s[0]) + s.Substring(1);\n    }\n\n    public static String Decapitalize(this String s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return s;\n        if (s.Length == 1)\n            return s.ToLower();\n        if (char.IsLower(s[0]))\n            return s;\n        return char.ToLower(s[0]) + s.Substring(1);\n    }\n\n    public static string FormatJson(this string str)\n    {\n        var indent = 0;\n        var quoted = false;\n        var sb = new StringBuilder();\n        for (var i = 0; i < str.Length; i++)\n        {\n            var ch = str[i];\n            switch (ch)\n            {\n                case '{':\n                case '[':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case '}':\n                case ']':\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    sb.Append(ch);\n                    break;\n                case '\"':\n                    sb.Append(ch);\n                    bool escaped = false;\n                    var index = i;\n                    while (index > 0 && str[--index] == '\\\\')\n                        escaped = !escaped;\n                    if (!escaped)\n                        quoted = !quoted;\n                    break;\n                case ',':\n                    sb.Append(ch);\n                    if (!quoted)\n                    {\n                        sb.AppendLine();\n                        Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                    }\n\n                    break;\n                case ':':\n                    sb.Append(ch);\n                    if (!quoted)\n                        sb.Append(\" \");\n                    break;\n                default:\n                    sb.Append(ch);\n                    break;\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    public static string RemoveWhiteSpaceLines(this string str)\n    {\n        return string.Join(Environment.NewLine,\n            str.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries)\n                .Where(i => !string.IsNullOrWhiteSpace(i)));\n    }\n\n    public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source,\n        Func<TSource, TKey> keySelector)\n    {\n        HashSet<TKey> seenKeys = new HashSet<TKey>();\n        foreach (TSource element in source)\n        {\n            if (seenKeys.Add(keySelector(element)))\n            {\n                yield return element;\n            }\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T> action)\n    {\n        foreach (T item in items)\n        {\n            action(item);\n        }\n    }\n\n    public static void ForEach<T>(this IEnumerable<T> items, Action<T, int> action)\n    {\n        int num = 0;\n        foreach (T item in items)\n        {\n            action(item, num);\n            num++;\n        }\n    }\n\n    public static Task ForEachAsync<TSource, TResult>(\n        this IEnumerable<TSource> source,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor)\n    {\n        var oneAtATime = new SemaphoreSlim(5, 10);\n        return Task.WhenAll(\n            from item in source\n            select ProcessAsync(item, taskSelector, resultProcessor, oneAtATime));\n    }\n\n    private static async Task ProcessAsync<TSource, TResult>(\n        TSource item,\n        Func<TSource, Task<TResult>> taskSelector, Action<TSource, TResult> resultProcessor,\n        SemaphoreSlim oneAtATime)\n    {\n        var result = await taskSelector(item);\n        await oneAtATime.WaitAsync();\n        try\n        {\n            resultProcessor(item, result);\n        }\n        finally\n        {\n            oneAtATime.Release();\n        }\n    }\n\n    private const string INDENT_STRING = \"    \";\n}",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16499330113900823"
        },
        "UpdatedTime": {
            "$numberLong": "16499330113900823"
        }
    },
    {
        "_id": 84,
        "Title": "图片",
        "Content": "图片\n\nusing SixLabors.Fonts;\nusing SixLabors.ImageSharp;\nusing SixLabors.ImageSharp.Drawing;\nusing SixLabors.ImageSharp.Drawing.Processing;\nusing SixLabors.ImageSharp.PixelFormats;\nusing SixLabors.ImageSharp.Processing;\nusing System.Numerics;\n\nstatic void DrawTitle(IImageProcessingContext imageProcessing, Font font)\n{\n    imageProcessing.DrawText(new TextOptions(font)\n    {\n        HorizontalAlignment = HorizontalAlignment.Center,\n        VerticalAlignment = VerticalAlignment.Center,\n        TextAlignment = TextAlignment.Center,\n        Origin = new PointF(540, 32),\n    }, \"晨蕴瑜伽生活馆\", Color.Black);\n\n}\nstatic void DrawCircle(IImageProcessingContext imageProcessing, Font font, float x, float y, string str)\n{\n    var circle = new EllipsePolygon(x, y, 40);\n    imageProcessing.Fill(Color.Red, circle);\n    imageProcessing.DrawText(new TextOptions(font)\n    {\n        HorizontalAlignment = HorizontalAlignment.Center,\n        VerticalAlignment = VerticalAlignment.Center,\n        TextAlignment = TextAlignment.Center,\n        Origin = new PointF(x, y),\n    }, str, Color.White);\n}\n\nstatic void DrawSubtitle(IImageProcessingContext imageProcessing,Font font)\n{\n    imageProcessing.DrawText(new TextOptions(font)\n    {\n        HorizontalAlignment = HorizontalAlignment.Center,\n        VerticalAlignment = VerticalAlignment.Center,\n        TextAlignment = TextAlignment.Center,\n        Origin = new PointF(135 / 2f, 256),\n    }, \"9:00\", Color.Black);\n}\n\n\n\nstatic IPathCollection BuildCorners(int imageWidth, int imageHeight, float cornerRadius)\n{\n    // first create a square\n    var rect = new RectangularPolygon(-0.5f, -0.5f, cornerRadius, cornerRadius);\n\n    // then cut out of the square a circle so we are left with a corner\n    IPath cornerTopLeft = rect.Clip(new EllipsePolygon(cornerRadius - 0.5f, cornerRadius - 0.5f, cornerRadius));\n\n    // corner is now a corner shape positions top left\n    //lets make 3 more positioned correctly, we can do that by translating the original around the center of the image\n\n    float rightPos = imageWidth - cornerTopLeft.Bounds.Width + 1;\n    float bottomPos = imageHeight - cornerTopLeft.Bounds.Height + 1;\n\n    // move it across the width of the image - the width of the shape\n    IPath cornerTopRight = cornerTopLeft.RotateDegree(90).Translate(rightPos, 0);\n    IPath cornerBottomLeft = cornerTopLeft.RotateDegree(-90).Translate(0, bottomPos);\n    IPath cornerBottomRight = cornerTopLeft.RotateDegree(180).Translate(rightPos, bottomPos);\n\n    return new PathCollection(cornerTopLeft, cornerBottomLeft, cornerTopRight, cornerBottomRight);\n}\nvar image = new Image<Rgba32>(1080, 800);//Image.Load(System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), \"2.png\"));\nimage.Mutate(x =>\n{\n    // \n    //  FontCollection fonts = new FontCollection();\n    // fonts.Install(\"/path/to/Neo_Sans_Medium.ttf\");\n\n    Font font = SystemFonts.CreateFont(\"Microsoft Yahei UI\", 24);\n    /*FontRectangle size = TextMeasurer.Measure(\"晨蕴瑜伽生活馆\", new TextOptions(font));\n   Console.WriteLine(size.Bottom);*/\n    /*float padding = 10f;\n    float textMaxWidth = image.Width - (padding * 2); // width of image indent left & right by padding\n    Vector2 topLeftLocation = new Vector2(padding, padding);*/\n\n    x.Clear(Color.White);\n\n    /*AffineTransformBuilder builder = new AffineTransformBuilder().AppendRotationDegrees(90);\n\n    TextOptions textOptions = new(font);\n    FontRectangle bounds = TextMeasurer.Measure(\"晨蕴瑜伽生活馆\", textOptions);\n    Matrix3x2 transform = builder.BuildMatrix(Rectangle.Round(new RectangleF(bounds.X, bounds.Y, bounds.Width, bounds.Height)));\n    x.SetDrawingTransform(transform)\n                .DrawText(textOptions, \"晨蕴瑜伽生活馆\", Pens.Solid(Color.Black, 1));*/\n    /* FontRectangle size = TextMeasurer.Measure(\"晨蕴瑜伽生活馆\", new TextOptions(font));\n     float scalingFactor = Math.Min(1080/ size.Width, 64/ size.Height);\n     var scaledFont = new Font(font, 1 * font.Size);*/\n    DrawTitle(x, font);\n    var items = new string[] { \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"日\" };\n    for (int i = 0; i < 7; i++)\n    {\n        \n        DrawCircle(x, font, 135 * (i + 1 + 0.5f), 88 + 20, \"周\"+items[i]);\n    }\n    // 64+24+80+24+24+80+24\n\n    IPathCollection corners = BuildCorners(270, 320,8);\n\n    x.SetGraphicsOptions(new GraphicsOptions()\n    {\n        Antialias = true,\n        AlphaCompositionMode = PixelAlphaCompositionMode.DestOut // enforces that any part of this shape that has color is punched out of the background\n    });\n\n    // mutating in here as we already have a cloned original\n    // use any color (not Transparent), so the corners will be clipped\n    foreach (var c in corners)\n    {\n        x = x.Fill(Color.Red, c);\n    }\n\n\n});\n\nimage.SaveAsPng(\"2.png\");",
        "Category": "C#",
        "CreationTime": {
            "$numberLong": "16503970386940565"
        },
        "UpdatedTime": {
            "$numberLong": "16503970386940565"
        }
    }
]